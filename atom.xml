<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RC 的博客</title>
  
  
  <link href="https://rchangl.github.io/atom.xml" rel="self"/>
  
  <link href="https://rchangl.github.io/"/>
  <updated>2023-09-27T09:20:12.361Z</updated>
  <id>https://rchangl.github.io/</id>
  
  <author>
    <name>RC</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FastDFS</title>
    <link href="https://rchangl.github.io/page/Devolop/Main/Linux%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/FastDFS.html"/>
    <id>https://rchangl.github.io/page/Devolop/Main/Linux%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/FastDFS.html</id>
    <published>2023-09-26T13:12:48.791Z</published>
    <updated>2023-09-27T09:20:12.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker部署FastDFS"><a href="#Docker部署FastDFS" class="headerlink" title="Docker部署FastDFS"></a>Docker部署FastDFS</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 搜索镜像</span><br><span class="line">docker search fastdfs</span><br><span class="line"></span><br><span class="line"># 拉取镜像（已经内置Nginx）</span><br><span class="line">docker pull delron/fastdfs</span><br><span class="line"></span><br><span class="line"># 构建Tracker</span><br><span class="line"># 22122 =&gt; Tracker默认端口</span><br><span class="line">docker run --name=tracker-server --privileged=true -p 22122:22122 -v /var/fdfs/tracker:/var/fdfs -d delron/fastdfs tracker</span><br><span class="line"></span><br><span class="line"># 构建Storage</span><br><span class="line"># 23000 =&gt; Storage默认端口</span><br><span class="line"># 8888 =&gt; 内置Nginx默认端口</span><br><span class="line"># TRACKER_SERVER =&gt; 执行Tracker的ip和端口</span><br><span class="line"># --net=host =&gt; 避免因为Docker网络问题导致外网客户端无法上传文件，因此使用host网络模式</span><br><span class="line">docker run --name=storage-server --privileged=true -p 23000:23000 -p 8888:8888 -v /var/fdfs/storage:/var/fdfs -e TRACKER_SERVER=192.168.0.100:22122 -e GROUP_NAME=group1 --net=host -d delron/fastdfs storage</span><br><span class="line"></span><br><span class="line"># 查看容器</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>默认端口：</p><table><thead><tr><th>服务</th><th>默认端口</th></tr></thead><tbody><tr><td>Tracker</td><td>22122</td></tr><tr><td>Storage</td><td>23000</td></tr><tr><td>Nginx</td><td>8888</td></tr></tbody></table><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 FastDFS 的依赖包</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.csource.fastdfs&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;fastdfs&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">1.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 FastDFS 的客户端对象</span></span><br><span class="line"><span class="type">FastDFSClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastDFSClient</span>(<span class="string">&quot;classpath:config/fdfs_client.conf&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完成上传，获得 fileId</span></span><br><span class="line"><span class="type">String</span> <span class="variable">fileId</span> <span class="operator">=</span> client.uploadFile(uploadFile.getBytes(), exeName);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接文件的访问路径并返回到前端页面</span></span><br><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> server_url + fileId;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/page/Devolop/Main/Linux%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/FastDFS/image.png" class="" title="Alt text">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker部署FastDFS&quot;&gt;&lt;a href=&quot;#Docker部署FastDFS&quot; class=&quot;headerlink&quot; title=&quot;Docker部署FastDFS&quot;&gt;&lt;/a&gt;Docker部署FastDFS&lt;/h2&gt;&lt;figure class=&quot;highli</summary>
      
    
    
    
    <category term="Devolop" scheme="https://rchangl.github.io/categories/Devolop/"/>
    
    <category term="Main" scheme="https://rchangl.github.io/categories/Devolop/Main/"/>
    
    <category term="Linux和项目环境" scheme="https://rchangl.github.io/categories/Devolop/Main/Linux%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://rchangl.github.io/page/Devolop/Main/Linux%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/Docker.html"/>
    <id>https://rchangl.github.io/page/Devolop/Main/Linux%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/Docker.html</id>
    <published>2023-09-26T01:20:59.159Z</published>
    <updated>2023-09-26T13:54:17.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p><code>systemctl start docker</code> 启动服务</p><h2 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h2><p><code>docker search xxx</code> 搜索xxx镜像</p><p><code>docker pull aaa/xxx</code> 拉取镜像</p><p><code>docker images</code> </p><p><code>docker image ls</code> 上同，列出本地镜像</p><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><p><code>docker container rm CONTAINERID</code> 移除container</p><h3 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h3><p><code>docker run</code></p><p>参数：</p><p><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN&#x2F;STDOUT&#x2F;STDERR 三项；</p><ul><li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li><li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li><li><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</li><li><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li><li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li><strong>–name&#x3D;”nginx-lb”:</strong> 为容器指定一个名称；</li><li><strong>–dns 8.8.8.8:</strong> 指定容器使用的DNS服务器，默认和宿主一致；</li><li><strong>–dns-search example.com:</strong> 指定容器DNS搜索域名，默认和宿主一致；</li><li><strong>-h “mars”:</strong> 指定容器的hostname；</li><li><strong>-e username&#x3D;”ritchie”:</strong> 设置环境变量；</li><li><strong>–env-file&#x3D;[]:</strong> 从指定文件读入环境变量；</li><li><strong>–cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2”:</strong> 绑定容器到指定CPU运行；</li><li><strong>-m :</strong> 设置容器使用内存最大值；</li><li><strong>–net&#x3D;”bridge”:</strong> 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container: 四种类型；</li><li><strong>–link&#x3D;[]:</strong> 添加链接到另一个容器；</li><li><strong>–expose&#x3D;[]:</strong> 开放一个端口或一组端口；</li><li>**–volume , -v: **绑定一个卷</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;运行&quot;&gt;&lt;a href=&quot;#运行&quot; class=&quot;headerlink&quot; title=&quot;运行&quot;&gt;&lt;/a&gt;运行&lt;/h2&gt;&lt;p&gt;&lt;code&gt;systemctl start docker&lt;/code&gt; 启动服务&lt;/p&gt;
&lt;h2 id=&quot;镜像管理&quot;&gt;&lt;a href=&quot;#镜</summary>
      
    
    
    
    <category term="Devolop" scheme="https://rchangl.github.io/categories/Devolop/"/>
    
    <category term="Main" scheme="https://rchangl.github.io/categories/Devolop/Main/"/>
    
    <category term="Linux和项目环境" scheme="https://rchangl.github.io/categories/Devolop/Main/Linux%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/"/>
    
    
  </entry>
  
  <entry>
    <title>内置函数</title>
    <link href="https://rchangl.github.io/page/Devolop/Main/MySQL/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html"/>
    <id>https://rchangl.github.io/page/Devolop/Main/MySQL/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html</id>
    <published>2023-09-18T09:53:26.960Z</published>
    <updated>2023-09-18T09:54:03.623Z</updated>
    
    <content type="html"><![CDATA[<p><code>CONCAT(s1,s2...sn)</code> 字符串 s1,s2 等多个字符串合并为一个字符串</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;CONCAT(s1,s2...sn)&lt;/code&gt; 字符串 s1,s2 等多个字符串合并为一个字符串&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Devolop" scheme="https://rchangl.github.io/categories/Devolop/"/>
    
    <category term="Main" scheme="https://rchangl.github.io/categories/Devolop/Main/"/>
    
    <category term="MySQL" scheme="https://rchangl.github.io/categories/Devolop/Main/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="https://rchangl.github.io/page/Computer%20Use/Markdown.html"/>
    <id>https://rchangl.github.io/page/Computer%20Use/Markdown.html</id>
    <published>2023-09-18T08:11:32.330Z</published>
    <updated>2023-09-18T08:12:46.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h1><p>在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行(<code>&lt;br&gt;</code>)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;换行&quot;&gt;&lt;a href=&quot;#换行&quot; class=&quot;headerlink&quot; title=&quot;换行&quot;&gt;&lt;/a&gt;换行&lt;/h1&gt;&lt;p&gt;在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行(&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;)。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Computer Use" scheme="https://rchangl.github.io/categories/Computer-Use/"/>
    
    
  </entry>
  
  <entry>
    <title>record</title>
    <link href="https://rchangl.github.io/page/Devolop/Main/Java/Java%20SE/Java9-11%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/record.html"/>
    <id>https://rchangl.github.io/page/Devolop/Main/Java/Java%20SE/Java9-11%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/record.html</id>
    <published>2023-09-18T08:09:15.380Z</published>
    <updated>2023-09-18T08:52:32.842Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.zhihu.com/question/497623999">jdk17 record关键字的作用是什么? - 知乎</a></p><p>声明一个record类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dayangshuo.recordclass;</span><br><span class="line"></span><br><span class="line"><span class="comment">//没错，就这一行代码</span></span><br><span class="line"><span class="keyword">record</span> <span class="title class_">User2</span><span class="params">(String name, Integer age)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="record特点"><a href="#record特点" class="headerlink" title="record特点"></a>record特点</h2><ul><li>提供<ul><li>全参构造方法</li><li>public 访问器<ul><li>访问器方法相当于getter，只不过省略了get前缀，这样可以简化代码和提高可读性</li></ul></li><li>equals方法</li><li>hashCode方法</li><li>toString方法</li></ul></li><li>public final 类</li><li>final 属性，不可修改</li><li>能声明 static 成员，不能声明实例属性</li><li>可以覆盖构造方法、创建静态方法、定义自己的方法</li><li>无 set，get 方法。没有遵循 Bean 的命名规范</li></ul><p><a href="https://www.cnblogs.com/kohler21/p/17555985.html">JDK有用的新特性-Java Record - 愚生浅末 - 博客园</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/497623999&quot;&gt;jdk17 record关键字的作用是什么? - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;声明一个record类：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;</summary>
      
    
    
    
    <category term="Devolop" scheme="https://rchangl.github.io/categories/Devolop/"/>
    
    <category term="Main" scheme="https://rchangl.github.io/categories/Devolop/Main/"/>
    
    <category term="Java" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/"/>
    
    <category term="Java SE" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/Java-SE/"/>
    
    <category term="Java9-11的新特性" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/Java-SE/Java9-11%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>Debug</title>
    <link href="https://rchangl.github.io/page/Devolop/Main/Rust/%E9%85%8D%E7%BD%AE%E5%92%8C%E8%BF%90%E8%A1%8C/Debug.html"/>
    <id>https://rchangl.github.io/page/Devolop/Main/Rust/%E9%85%8D%E7%BD%AE%E5%92%8C%E8%BF%90%E8%A1%8C/Debug.html</id>
    <published>2023-09-18T00:45:59.819Z</published>
    <updated>2023-09-18T01:23:57.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编译器属性标记"><a href="#编译器属性标记" class="headerlink" title="编译器属性标记"></a><a href="https://course.rs/profiling/compiler/attributes.html">编译器属性标记</a></h2><h2 id="允许-allow"><a href="#允许-allow" class="headerlink" title="允许 #![allow()]"></a>允许 <code>#![allow()]</code></h2><p> <code>#![allow(unused_variables)]</code> 属性标记，该标记会告诉编译器忽略未使用的变量，不要抛出 <code>warning</code> 警告,具体的常见编译器属性你可以在这里查阅：。</p><p><code>#[allow(dead_code)]</code> 允许未使用的代码，添加在上方</p><h2 id="unimplemented"><a href="#unimplemented" class="headerlink" title="unimplemented!()"></a>unimplemented!()</h2><p>unimplemented!() 写在函数内部，告诉编译器此函数尚未实现</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;编译器属性标记&quot;&gt;&lt;a href=&quot;#编译器属性标记&quot; class=&quot;headerlink&quot; title=&quot;编译器属性标记&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://course.rs/profiling/compiler/attributes.html&quot;&gt;编译</summary>
      
    
    
    
    <category term="Devolop" scheme="https://rchangl.github.io/categories/Devolop/"/>
    
    <category term="Main" scheme="https://rchangl.github.io/categories/Devolop/Main/"/>
    
    <category term="Rust" scheme="https://rchangl.github.io/categories/Devolop/Main/Rust/"/>
    
    <category term="配置和运行" scheme="https://rchangl.github.io/categories/Devolop/Main/Rust/%E9%85%8D%E7%BD%AE%E5%92%8C%E8%BF%90%E8%A1%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>PageHelper分页插件</title>
    <link href="https://rchangl.github.io/page/Devolop/Main/Java/Java%20Web/Spring%20Boot/PageHelper%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6.html"/>
    <id>https://rchangl.github.io/page/Devolop/Main/Java/Java%20Web/Spring%20Boot/PageHelper%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6.html</id>
    <published>2023-09-17T13:12:43.285Z</published>
    <updated>2023-09-17T13:33:48.080Z</updated>
    
    <content type="html"><![CDATA[<p>简化分页查询的代码编写</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>Mapper:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from emp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>EmpServiceImp:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageBean <span class="title function_">page</span><span class="params">(Integer pge, Integer pageSize)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置分页参数</span></span><br><span class="line">        PageHelper.startPage(page, pageSize);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 执行查询</span></span><br><span class="line">        List&lt;Emp&gt; empList = empMapper.list();</span><br><span class="line">        Page&lt;Emp&gt; p = (Page&lt;Emp&gt;) empList;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装 PageBean 对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageBean</span>(p.getTotal(), p.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简化分页查询的代码编写&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;Mapper:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="Devolop" scheme="https://rchangl.github.io/categories/Devolop/"/>
    
    <category term="Main" scheme="https://rchangl.github.io/categories/Devolop/Main/"/>
    
    <category term="Java" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/"/>
    
    <category term="Java Web" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/Java-Web/"/>
    
    <category term="Spring Boot" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/Java-Web/Spring-Boot/"/>
    
    
  </entry>
  
  <entry>
    <title>字符串</title>
    <link href="https://rchangl.github.io/page/Devolop/Main/Rust/%E8%AF%AD%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2.html"/>
    <id>https://rchangl.github.io/page/Devolop/Main/Rust/%E8%AF%AD%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2.html</id>
    <published>2023-09-15T01:28:52.077Z</published>
    <updated>2023-09-19T02:03:28.199Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    <category term="Devolop" scheme="https://rchangl.github.io/categories/Devolop/"/>
    
    <category term="Main" scheme="https://rchangl.github.io/categories/Devolop/Main/"/>
    
    <category term="Rust" scheme="https://rchangl.github.io/categories/Devolop/Main/Rust/"/>
    
    <category term="语法" scheme="https://rchangl.github.io/categories/Devolop/Main/Rust/%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>所有权 ownership 和 借用</title>
    <link href="https://rchangl.github.io/page/Devolop/Main/Rust/%E8%AF%AD%E6%B3%95/%E6%89%80%E6%9C%89%E6%9D%83Ownership%E5%92%8C%E5%80%9F%E7%94%A8Borrowing.html"/>
    <id>https://rchangl.github.io/page/Devolop/Main/Rust/%E8%AF%AD%E6%B3%95/%E6%89%80%E6%9C%89%E6%9D%83Ownership%E5%92%8C%E5%80%9F%E7%94%A8Borrowing.html</id>
    <published>2023-09-15T01:04:07.593Z</published>
    <updated>2023-09-17T12:54:03.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="所有权规则"><a href="#所有权规则" class="headerlink" title="所有权规则"></a>所有权规则</h2><ol><li>Each value in Rust has an  <em>owner</em> .<ul><li>一个值只允许有一个 owner</li><li>预防bug <strong>二次释放（double free）</strong></li></ul></li><li>There can only be one owner at a time.<ul><li>一个值只能拥有一个所有者</li></ul></li><li>When the owner goes out of scope, the value will be dropped.<ul><li>离开范围被 丢弃(drop)</li></ul></li></ol><h2 id="浅拷贝-和-深拷贝"><a href="#浅拷贝-和-深拷贝" class="headerlink" title="浅拷贝 和 深拷贝"></a>浅拷贝 和 深拷贝</h2><p>默认所有都是浅拷贝</p><p>深拷贝操作：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = s1.<span class="title function_ invoke__">clone</span>();</span><br></pre></td></tr></table></figure><p>数据直接存储在 栈 中，叫 Copy 特征，</p><p>不可变引用 <code>&amp;T</code> 可Copy</p><h2 id="函数传值与返回的所有权"><a href="#函数传值与返回的所有权" class="headerlink" title="函数传值与返回的所有权"></a>函数传值与返回的所有权</h2><ul><li>参数传入函数调用内后，所有权也被移出当前作用域</li><li>函数内变量移出作用域。<ul><li>顺序：后进先出；</li><li>堆释放内存：调用 <code>drop</code> 方法</li></ul></li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);  <span class="comment">// s 进入作用域</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">takes_ownership</span>(s);             <span class="comment">// s 的值移动到函数里 ...</span></span><br><span class="line">                                    <span class="comment">// ... 所以到这里不再有效</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;                      <span class="comment">// x 进入作用域</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">makes_copy</span>(x);                  <span class="comment">// x 应该移动函数里，</span></span><br><span class="line">                                    <span class="comment">// 但 i32 是 Copy 的，所以在后面可继续使用 x</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// 这里, x 先移出了作用域，然后是 s。但因为 s 的值已被移走，</span></span><br><span class="line">  <span class="comment">// 所以不会有特殊操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">takes_ownership</span>(some_string: <span class="type">String</span>) &#123; <span class="comment">// some_string 进入作用域</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, some_string);</span><br><span class="line">&#125; <span class="comment">// 这里，some_string 移出作用域并调用 `drop` 方法。占用的内存被释放</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">makes_copy</span>(some_integer: <span class="type">i32</span>) &#123; <span class="comment">// some_integer 进入作用域</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, some_integer);</span><br><span class="line">&#125; <span class="comment">// 这里，some_integer 移出作用域。不会有特殊操作</span></span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="title function_ invoke__">gives_ownership</span>();         <span class="comment">// gives_ownership 将返回值</span></span><br><span class="line">                                        <span class="comment">// 移给 s1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span> = String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);     <span class="comment">// s2 进入作用域</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s3</span> = <span class="title function_ invoke__">takes_and_gives_back</span>(s2);  <span class="comment">// s2 被移动到</span></span><br><span class="line">                                        <span class="comment">// takes_and_gives_back 中,</span></span><br><span class="line">                                        <span class="comment">// 它也将返回值移给 s3</span></span><br><span class="line">&#125; <span class="comment">// 这里, s3 移出作用域并被丢弃。s2 也移出作用域，但已被移走，</span></span><br><span class="line">  <span class="comment">// 所以什么也不会发生。s1 移出作用域并被丢弃</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">gives_ownership</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;             <span class="comment">// gives_ownership 将返回值移动给</span></span><br><span class="line">                                             <span class="comment">// 调用它的函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">some_string</span> = String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// some_string 进入作用域.</span></span><br><span class="line"></span><br><span class="line">    some_string                              <span class="comment">// 返回 some_string 并移出给调用的函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// takes_and_gives_back 将传入字符串并返回该值</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">takes_and_gives_back</span>(a_string: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123; <span class="comment">// a_string 进入作用域</span></span><br><span class="line"></span><br><span class="line">    a_string  <span class="comment">// 返回 a_string 并移出给调用的函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>移出给调用的函数</p><h2 id="引用-Ref-与解引用-Deref"><a href="#引用-Ref-与解引用-Deref" class="headerlink" title="引用(Ref)与解引用(Deref)"></a>引用(Ref)与解引用(Deref)</h2><p>获取变量的引用，称之为<strong>借用(borrowing)</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = &amp;x;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">5</span>, x);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">5</span>, *y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常规引用是一个指针类型</p><p><code>&amp;x</code> 获取引用</p><p><code>*y</code> 解引用</p><h3 id="自动-解引用-deref-机制"><a href="#自动-解引用-deref-机制" class="headerlink" title="自动 解引用(deref) 机制"></a>自动 解引用(deref) 机制</h3><p>Rust 有自动解引用机制</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;length: &#123;&#125;&quot;</span>, s.<span class="title function_ invoke__">len</span>());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;length: &#123;&#125;&quot;</span>, (&amp;s).<span class="title function_ invoke__">len</span>());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;length: &#123;&#125;&quot;</span>, (&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;s).<span class="title function_ invoke__">len</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Rust编译器帮我们做了隐式的 deref 调用，当它找不到这个<strong>成员方法</strong>的时候，它会自动尝试使用deref方法后再找该方法，一直循环下去。编译器在 <code>&amp;&amp;&amp;str</code> 类型里面找不到len方法，就尝试将它deref，变成 <code>&amp;&amp;str</code> 类型，再寻找len方法，还是没找到，那么继续deref，变成 <code>&amp;str</code> ，直到找到len方法，于是就调用这个方法。</p><p>以下写法在编译器看起来是一样的：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">use std::rc::Rc;</span><br><span class="line">use std::ops::Deref;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    let s = Rc::new(String::from(&quot;hello&quot;));</span><br><span class="line"></span><br><span class="line">    println!(&quot;length: &#123;&#125;&quot;, s.len());</span><br><span class="line">    println!(&quot;length: &#123;&#125;&quot;, s.deref().len());</span><br><span class="line">    println!(&quot;length: &#123;&#125;&quot;, s.deref().deref().len());</span><br><span class="line"></span><br><span class="line">    println!(&quot;length: &#123;&#125;&quot;, (*s).len());</span><br><span class="line">    println!(&quot;length: &#123;&#125;&quot;, (&amp;*s).len());</span><br><span class="line">    println!(&quot;length: &#123;&#125;&quot;, (&amp;**s).len());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当自动解引用发生冲突时，就需要手动解引用了</p><h3 id="可变引用-与-不可变引用"><a href="#可变引用-与-不可变引用" class="headerlink" title="可变引用 与 不可变引用"></a>可变引用 与 不可变引用</h3><p>默认的引用是不可变的，</p><p>可变引用： </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">r1</span> = &amp;<span class="keyword">mut</span> s;</span><br></pre></td></tr></table></figure><ul><li>需注意<ul><li>同一作用域，特定数据只能有<strong>一个可变引用</strong></li><li>可变引用与不可变引用<strong>不能同时存在</strong></li></ul></li></ul><h3 id="NLL-引用的作用域"><a href="#NLL-引用的作用域" class="headerlink" title="NLL 引用的作用域"></a>NLL 引用的作用域</h3><p>引用的作用域 <code>s</code> 从创建开始，一直持续到它最后一次使用的地方，这个跟变量的作用域有所不同</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">   <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r1</span> = &amp;s;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r2</span> = &amp;s;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; and &#123;&#125;&quot;</span>, r1, r2);</span><br><span class="line">    <span class="comment">// 新编译器中，r1,r2作用域在这里结束</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r3</span> = &amp;<span class="keyword">mut</span> s;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, r3);</span><br><span class="line">&#125; <span class="comment">// 老编译器中，r1、r2、r3作用域在这里结束</span></span><br><span class="line">  <span class="comment">// 新编译器中，r3作用域在这里结束</span></span><br></pre></td></tr></table></figure><p>这种编译器优化行为，Rust 专门起了一个名字 ——  <strong>Non-Lexical Lifetimes(NLL)</strong> ：专门用于找到某个引用在作用域 <code>&#125;</code> 结束前就不再被使用的代码位置。</p><h3 id="悬垂引用-Dangling-References"><a href="#悬垂引用-Dangling-References" class="headerlink" title="悬垂引用(Dangling References)"></a>悬垂引用(Dangling References)</h3><p>指针指向某个值后，这个值被释放掉了，而指针仍然存</p><p>在 Rust 中，编译器可以确保数据不会在引用结束前被释放，要想释放数据，必须先停止其引用的使用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;所有权规则&quot;&gt;&lt;a href=&quot;#所有权规则&quot; class=&quot;headerlink&quot; title=&quot;所有权规则&quot;&gt;&lt;/a&gt;所有权规则&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Each value in Rust has an  &lt;em&gt;owner&lt;/em&gt; .&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="Devolop" scheme="https://rchangl.github.io/categories/Devolop/"/>
    
    <category term="Main" scheme="https://rchangl.github.io/categories/Devolop/Main/"/>
    
    <category term="Rust" scheme="https://rchangl.github.io/categories/Devolop/Main/Rust/"/>
    
    <category term="语法" scheme="https://rchangl.github.io/categories/Devolop/Main/Rust/%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Logback日志</title>
    <link href="https://rchangl.github.io/page/Devolop/Main/Java/Java%20%E5%BA%93%20%E5%B0%8F%E5%B7%A5%E5%85%B7/Logback%E6%97%A5%E5%BF%97.html"/>
    <id>https://rchangl.github.io/page/Devolop/Main/Java/Java%20%E5%BA%93%20%E5%B0%8F%E5%B7%A5%E5%85%B7/Logback%E6%97%A5%E5%BF%97.html</id>
    <published>2023-09-14T08:12:50.057Z</published>
    <updated>2023-09-17T07:31:56.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-access<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.logback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Logback</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log=LoggerFactory.getLogger(<span class="string">&quot;logback&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// write your code here</span></span><br><span class="line">        logger.debug(<span class="string">&quot;------&gt;debug log&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;------&gt;info log&quot;</span>);</span><br><span class="line">        logger.error(<span class="string">&quot;------&gt;error log&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lombok 提供了一个注解，<code>@Slf4j</code> 可替代 <code>public static final Logger log=LoggerFactory.getLogger(&quot;logback&quot;);</code></p><h2 id="logback-xml配置文件"><a href="#logback-xml配置文件" class="headerlink" title="logback.xml配置文件"></a>logback.xml配置文件</h2><p>文件位置在：<code>resource/logback.xml</code></p><p>参考样例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 级别从高到低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;60 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 动态日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jmxConfigurator</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志文件 输出位置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;property name=&quot;log_dir&quot; value=&quot;C:/test&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log_dir&quot;</span> <span class="attr">value</span>=<span class="string">&quot;./logs&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志最大的历史 30天 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxHistory&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ConsoleAppender 控制台输出日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 设置日志输出格式 --&gt;</span></span><br><span class="line">                %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger - %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ERROR级别日志 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ERROR&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 过滤器，只记录WARN级别的日志 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置过滤级别 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 用于配置符合过滤条件的操作 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 用于配置不符合过滤条件的操作 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志输出位置 可相对、和绝对路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">                $&#123;log_dir&#125;/error/%d&#123;yyyy-MM-dd&#125;/error-log.log</span><br><span class="line">            <span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且&lt;maxHistory&gt;是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;maxHistory&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 设置日志输出格式 --&gt;</span></span><br><span class="line">                %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger - %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- WARN级别日志 appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;WARN&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 过滤器，只记录WARN级别的日志 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置过滤级别 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 用于配置符合过滤条件的操作 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 用于配置不符合过滤条件的操作 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志输出位置 可相对、和绝对路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log_dir&#125;/warn/%d&#123;yyyy-MM-dd&#125;/warn-log.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;maxHistory&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- INFO级别日志 appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;INFO&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log_dir&#125;/info/%d&#123;yyyy-MM-dd&#125;/info-log.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;maxHistory&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- DEBUG级别日志 appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log_dir&#125;/debug/%d&#123;yyyy-MM-dd&#125;/debug-log.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;maxHistory&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- TRACE级别日志 appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;TRACE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>TRACE<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log_dir&#125;/trace/%d&#123;yyyy-MM-dd&#125;/trace-log.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;maxHistory&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- root级别 DEBUG --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打印debug级别日志及以上级别日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件输出 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;TRACE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">(String format, Object... argArray)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.info(<span class="string">&quot;分页查询，参数 page:&#123;&#125;,pageSize&#123;&#125;&quot;</span>, page, pageSize);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Maven配置&quot;&gt;&lt;a href=&quot;#Maven配置&quot; class=&quot;headerlink&quot; title=&quot;Maven配置&quot;&gt;&lt;/a&gt;Maven配置&lt;/h2&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    <category term="Devolop" scheme="https://rchangl.github.io/categories/Devolop/"/>
    
    <category term="Main" scheme="https://rchangl.github.io/categories/Devolop/Main/"/>
    
    <category term="Java" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/"/>
    
    <category term="Java 库 小工具" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/Java-%E5%BA%93-%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>开发规范</title>
    <link href="https://rchangl.github.io/page/Devolop/Main/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.html"/>
    <id>https://rchangl.github.io/page/Devolop/Main/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.html</id>
    <published>2023-09-13T13:56:13.781Z</published>
    <updated>2023-09-13T14:14:01.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Restful"><a href="#Restful" class="headerlink" title="Restful"></a>Restful</h2><img src="/page/Devolop/Main/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/1694613430155.png" class="" width="1694613430155"><img src="/page/Devolop/Main/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/1694613528981.png" class="" width="1694613528981"><h2 id="统一响应结果"><a href="#统一响应结果" class="headerlink" title="统一响应结果"></a>统一响应结果</h2><img src="/page/Devolop/Main/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/1694614303677.png" class="" width="1694614303677">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Restful&quot;&gt;&lt;a href=&quot;#Restful&quot; class=&quot;headerlink&quot; title=&quot;Restful&quot;&gt;&lt;/a&gt;Restful&lt;/h2&gt;&lt;img src=&quot;/page/Devolop/Main/%E9%A1%B9%E7%9B%AE%E5%BC</summary>
      
    
    
    
    <category term="Devolop" scheme="https://rchangl.github.io/categories/Devolop/"/>
    
    <category term="Main" scheme="https://rchangl.github.io/categories/Devolop/Main/"/>
    
    <category term="项目开发" scheme="https://rchangl.github.io/categories/Devolop/Main/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Mapper</title>
    <link href="https://rchangl.github.io/page/Devolop/Main/Java/Java%20Web/Spring%20Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/Mapper.html"/>
    <id>https://rchangl.github.io/page/Devolop/Main/Java/Java%20Web/Spring%20Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/Mapper.html</id>
    <published>2023-09-13T13:45:34.419Z</published>
    <updated>2023-09-23T02:13:29.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DeptMapper</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参数占位符"><a href="#参数占位符" class="headerlink" title="参数占位符"></a>参数占位符</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> #&#123;name&#125;</span><br></pre></td></tr></table></figure><h2 id="xml-文件方式编写SQL"><a href="#xml-文件方式编写SQL" class="headerlink" title="xml 文件方式编写SQL"></a>xml 文件方式编写SQL</h2><p>位置： <code>resource/和Mapper.java一样的目录结构/同名.xml</code></p><p><a href="https://mybatis.net.cn/getting-started.html">入门_MyBatis中文网</a> ：这里可以找到xml样例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.rc.springdemo1.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.rc.springdemo1.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from emp</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>namespace</code> 属性对应 <code>Mapper.java</code> 的位置</p><p><code>&lt;select</code> 的属性也与对应的方法相同</p><p>语句结束后不加分号</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>if</p><p>where ：判断是否需要where，后面的代码是否需要删除 and or</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    条件查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.rc.springdemo1.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from emp</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                name like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                and gender = #&#123;gender&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        order by update_time desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    批量删除员工--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span>&gt;</span></span><br><span class="line">    delete</span><br><span class="line">    from emp</span><br><span class="line">    where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>collection<ul><li>待遍历的内容，与参数名相同</li></ul></li><li>item<ul><li>遍历出来的对象，命名可自定义</li></ul></li><li>separator<ul><li>分隔符</li></ul></li><li>open<ul><li>开始前添加</li></ul></li><li>close<ul><li>结束后添加</li></ul></li></ul><h2 id="注入对象-Autowired"><a href="#注入对象-Autowired" class="headerlink" title="注入对象 @Autowired"></a>注入对象 <code>@Autowired</code></h2><p>在 Service 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DeptService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptMapper deptMapper;</span><br></pre></td></tr></table></figure><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="注解形式查询操作-Select-quot-quot"><a href="#注解形式查询操作-Select-quot-quot" class="headerlink" title="注解形式查询操作 @Select(&quot;&quot;)"></a>注解形式查询操作 <code>@Select(&quot;&quot;)</code></h3><p>在方法上注解 <code>@Select(&quot;&quot;)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DeptMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from dept&quot;)</span></span><br><span class="line">    List&lt;Dept&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注解式SQL-参数输入"><a href="#注解式SQL-参数输入" class="headerlink" title="注解式SQL 参数输入"></a>注解式SQL 参数输入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> delete</span><br></pre></td></tr></table></figure><p><code>#&#123;&#125;</code> 如果是对象，直接写属性名</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;注解&quot;&gt;&lt;a href=&quot;#注解&quot; class=&quot;headerlink&quot; title=&quot;注解&quot;&gt;&lt;/a&gt;注解&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c</summary>
      
    
    
    
    <category term="Devolop" scheme="https://rchangl.github.io/categories/Devolop/"/>
    
    <category term="Main" scheme="https://rchangl.github.io/categories/Devolop/Main/"/>
    
    <category term="Java" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/"/>
    
    <category term="Java Web" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/Java-Web/"/>
    
    <category term="Spring Boot" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/Java-Web/Spring-Boot/"/>
    
    <category term="三层架构" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/Java-Web/Spring-Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Service</title>
    <link href="https://rchangl.github.io/page/Devolop/Main/Java/Java%20Web/Spring%20Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/Service.html"/>
    <id>https://rchangl.github.io/page/Devolop/Main/Java/Java%20Web/Spring%20Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/Service.html</id>
    <published>2023-09-13T13:42:15.428Z</published>
    <updated>2023-09-14T09:23:38.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注解-Service"><a href="#注解-Service" class="headerlink" title="注解 @Service"></a>注解 <code>@Service</code></h2><p>交给 IOC 成为 Bean</p><p>使用接口形式进行多个 Bean 的管理：</p><img src="/page/Devolop/Main/Java/Java%20Web/Spring%20Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/Service/1694682582886.png" class="" width="1694682582886"><p>注解在 Service 实例中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注入对象-Autowired"><a href="#注入对象-Autowired" class="headerlink" title="注入对象 @Autowired"></a>注入对象 <code>@Autowired</code></h2><p>Controller 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class DeptController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private DeptService deptService; // 这里类型是接口类型</span><br></pre></td></tr></table></figure><p>必须保证有对应的 Bean 实例</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;注解-Service&quot;&gt;&lt;a href=&quot;#注解-Service&quot; class=&quot;headerlink&quot; title=&quot;注解 @Service&quot;&gt;&lt;/a&gt;注解 &lt;code&gt;@Service&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;交给 IOC 成为 Bean&lt;/p&gt;
&lt;p&gt;使</summary>
      
    
    
    
    <category term="Devolop" scheme="https://rchangl.github.io/categories/Devolop/"/>
    
    <category term="Main" scheme="https://rchangl.github.io/categories/Devolop/Main/"/>
    
    <category term="Java" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/"/>
    
    <category term="Java Web" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/Java-Web/"/>
    
    <category term="Spring Boot" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/Java-Web/Spring-Boot/"/>
    
    <category term="三层架构" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/Java-Web/Spring-Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Controller</title>
    <link href="https://rchangl.github.io/page/Devolop/Main/Java/Java%20Web/Spring%20Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/Controller.html"/>
    <id>https://rchangl.github.io/page/Devolop/Main/Java/Java%20Web/Spring%20Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/Controller.html</id>
    <published>2023-09-12T08:35:27.135Z</published>
    <updated>2023-09-26T02:03:33.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p><code>@RestController</code> 相当于 <code>@Controller</code> + <code>@ResponseBody</code></p><p><code>@Controller</code> 标注为 Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleParamController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestMapping-请求与响应处理"><a href="#RequestMapping-请求与响应处理" class="headerlink" title="RequestMapping 请求与响应处理"></a>RequestMapping 请求与响应处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解的属性：</p><ul><li>默认 value<ul><li>url</li></ul></li><li>method<ul><li>限制请求方式</li><li>值<ul><li>RequestMethod.GET</li></ul></li></ul></li></ul><h4 id="Mapping-衍生注解"><a href="#Mapping-衍生注解" class="headerlink" title="Mapping 衍生注解"></a>Mapping 衍生注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/url&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/url&quot;)</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/url&quot;)</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/url&quot;)</span></span><br></pre></td></tr></table></figure><h4 id="公共路径可提取到类上"><a href="#公共路径可提取到类上" class="headerlink" title="公共路径可提取到类上"></a>公共路径可提取到类上</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/depts&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Dept&gt; deptList = deptService.list();</span><br><span class="line">        <span class="keyword">return</span> Result.success(deptList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        deptService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestBody</span> Dept dept)</span> &#123;</span><br><span class="line">        deptService.add(dept);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求接收"><a href="#请求接收" class="headerlink" title="请求接收"></a>请求接收</h2><h3 id="原始方式获取参数"><a href="#原始方式获取参数" class="headerlink" title="原始方式获取参数"></a>原始方式获取参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleParamController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ageStr</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(ageStr);</span><br><span class="line">        System.out.println(name + <span class="string">&quot;:&quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单参数"><a href="#简单参数" class="headerlink" title="简单参数"></a>简单参数</h3><p>请求参数名与函数的参数名相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">    System.out.println(name + <span class="string">&quot;:&quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestParam-请求参数处理（限制、映射、默认值）"><a href="#RequestParam-请求参数处理（限制、映射、默认值）" class="headerlink" title="@RequestParam 请求参数处理（限制、映射、默认值）"></a><code>@RequestParam</code> 请求参数处理（限制、映射、默认值）</h3><h4 id="name属性，映射参数名"><a href="#name属性，映射参数名" class="headerlink" title="name属性，映射参数名"></a>name属性，映射参数名</h4><p>如果参数名未对应上，值为null，但不报错</p><p><code>@RequestParam(name=&quot;&quot;)</code> 映射参数名，使用属性name或 <code>value</code>都可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(name=&quot;name&quot;)</span>String username, </span></span><br><span class="line"><span class="params">    Integer age</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">    System.out.println(name + <span class="string">&quot;:&quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@RequestParam</code> 有一个默认属性 <code>required=turn</code> ，不传入参数会报错</p><h4 id="defaultValue-，设置默认值"><a href="#defaultValue-，设置默认值" class="headerlink" title="defaultValue ，设置默认值"></a><code>defaultValue</code> ，设置默认值</h4><p>annotation属性值类型为字符串，最后会自行转换为参数类型</p><h3 id="路径参数-PathVariable"><a href="#路径参数-PathVariable" class="headerlink" title="路径参数 @PathVariable"></a>路径参数 <code>@PathVariable</code></h3><p>注解 <code>@PathVariable</code> 获取路径参数， 路径中用 <code>&#123;参数名&#125;</code> 标注参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/pathParam/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">pathParam</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapping的SQL annotation处：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;#&#123;paraName&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="日期参数"><a href="#日期参数" class="headerlink" title="日期参数"></a>日期参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/dateParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">dateParam</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span>LocalDateTime updataTime)</span> &#123;</span><br><span class="line">    System.out.println(updataTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解 <code>@DateTimeFormat</code> 指定日期参数格式</p><h3 id="JSON-参数-RequestBody"><a href="#JSON-参数-RequestBody" class="headerlink" title="JSON 参数 @RequestBody"></a>JSON 参数 <code>@RequestBody</code></h3><p>用 实体对象 接收参数：<br>键名于对象名保持一致，嵌套的也是如此</p><p>注解 <code>@RequestBody</code> 解析JSON</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/jsonParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">jsonParam</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件接收"><a href="#文件接收" class="headerlink" title="文件接收"></a>文件接收</h3><p>对象 MultipartFile 多文件处理</p><img src="/page/Devolop/Main/Java/Java%20Web/Spring%20Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/Controller/1695547729018.png" class="" width="1695547729018"><img src="/page/Devolop/Main/Java/Java%20Web/Spring%20Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/Controller/1695652637197.png" class="" width="1695652637197"><p>配置：</p><img src="/page/Devolop/Main/Java/Java%20Web/Spring%20Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/Controller/1695560882986.png" class="" width="1695560882986"><p>常见方法：</p><img src="/page/Devolop/Main/Java/Java%20Web/Spring%20Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/Controller/1695560927426.png" class="" width="1695560927426"><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello, World ~&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, World ~&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接响应字符串</p><h3 id="响应对象，处理为JSON-ResponseBody"><a href="#响应对象，处理为JSON-ResponseBody" class="headerlink" title="响应对象，处理为JSON @ResponseBody"></a>响应对象，处理为JSON <code>@ResponseBody</code></h3><p><code>@ResponseBody</code> 响应数据，返回的数据（对象）转换为 JSON 数据，发送给前端</p><p>如果返回值是字符串，那么直接将字符串写到客户端；如果是一个对象，会将对象转化为json串，然后写到客户端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getAddr&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Address <span class="title function_">getAddr</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">    addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">    addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换成 JSON 后返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;province&quot;</span><span class="punctuation">:</span><span class="string">&quot;广东&quot;</span><span class="punctuation">,</span><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span><span class="string">&quot;深圳&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/listAddr&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Address&gt; <span class="title function_">listAddr</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Address&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">    addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">    addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Address</span> <span class="variable">addr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">    addr2.setProvince(<span class="string">&quot;广西&quot;</span>);</span><br><span class="line">    addr2.setCity(<span class="string">&quot;北海&quot;</span>);</span><br><span class="line"></span><br><span class="line">    list.add(addr);</span><br><span class="line">    list.add(addr2);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回 JSON ，最外层是数组：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;province&quot;</span><span class="punctuation">:</span><span class="string">&quot;广东&quot;</span><span class="punctuation">,</span><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span><span class="string">&quot;深圳&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;province&quot;</span><span class="punctuation">:</span><span class="string">&quot;广西&quot;</span><span class="punctuation">,</span><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span><span class="string">&quot;北海&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h3 id="统一响应结果"><a href="#统一响应结果" class="headerlink" title="统一响应结果"></a>统一响应结果</h3><p>响应数据包装成一个 Result 类，以此统一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="comment">// 响应码，1 成功， 0 失败</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">// 提示信息</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">// 返回的数据</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造器 有参构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter and Setter</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以写 一些静态方法 方便快速创建 Result 对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;操作成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span>...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;注解&quot;&gt;&lt;a href=&quot;#注解&quot; class=&quot;headerlink&quot; title=&quot;注解&quot;&gt;&lt;/a&gt;注解&lt;/h2&gt;&lt;p&gt;&lt;code&gt;@RestController&lt;/code&gt; 相当于 &lt;code&gt;@Controller&lt;/code&gt; + &lt;code&gt;@Res</summary>
      
    
    
    
    <category term="Devolop" scheme="https://rchangl.github.io/categories/Devolop/"/>
    
    <category term="Main" scheme="https://rchangl.github.io/categories/Devolop/Main/"/>
    
    <category term="Java" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/"/>
    
    <category term="Java Web" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/Java-Web/"/>
    
    <category term="Spring Boot" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/Java-Web/Spring-Boot/"/>
    
    <category term="三层架构" scheme="https://rchangl.github.io/categories/Devolop/Main/Java/Java-Web/Spring-Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>函数</title>
    <link href="https://rchangl.github.io/page/Devolop/Main/Rust/%E8%AF%AD%E6%B3%95/%E5%87%BD%E6%95%B0.html"/>
    <id>https://rchangl.github.io/page/Devolop/Main/Rust/%E8%AF%AD%E6%B3%95/%E5%87%BD%E6%95%B0.html</id>
    <published>2023-09-12T05:14:02.201Z</published>
    <updated>2023-09-12T05:29:26.048Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">add</span>(i: <span class="type">i32</span>, j: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">   i + j</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个函数参数都要标识出它的具体类型</p><p><strong>返回值</strong>：最后一条表达式的返回值，当然我们也可以使用 <code>return</code> 提前返回</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">plus_or_minus</span>(x:<span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">5</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x - <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x + <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>函数没有返回值，那么返回一个 <code>()</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐式返回 ()</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">report</span>&lt;T: <span class="built_in">Debug</span>&gt;(item: T) &#123;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显式返回 ()</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">clear</span>(text: &amp;<span class="keyword">mut</span> <span class="type">String</span>) <span class="punctuation">-&gt;</span> () &#123;</span><br><span class="line">  *text = String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="永不返回的发散函数"><a href="#永不返回的发散函数" class="headerlink" title="永不返回的发散函数 !"></a>永不返回的发散函数 <code>!</code></h2><p>用 <code>!</code> 作函数返回类型的时候，表示该函数永不返回( diverge function )</p><p>这种语法往往用做会导致程序崩溃的函数：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">dead_end</span>() <span class="punctuation">-&gt;</span> ! &#123;</span><br><span class="line">  <span class="built_in">panic!</span>(<span class="string">&quot;你已经到了穷途末路，崩溃吧！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无限循环函数：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">forever</span>() <span class="punctuation">-&gt;</span> ! &#123;</span><br><span class="line">  <span class="keyword">loop</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="Devolop" scheme="https://rchangl.github.io/categories/Devolop/"/>
    
    <category term="Main" scheme="https://rchangl.github.io/categories/Devolop/Main/"/>
    
    <category term="Rust" scheme="https://rchangl.github.io/categories/Devolop/Main/Rust/"/>
    
    <category term="语法" scheme="https://rchangl.github.io/categories/Devolop/Main/Rust/%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>数据类型</title>
    <link href="https://rchangl.github.io/page/Devolop/Main/Rust/%E8%AF%AD%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"/>
    <id>https://rchangl.github.io/page/Devolop/Main/Rust/%E8%AF%AD%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</id>
    <published>2023-09-11T09:46:50.071Z</published>
    <updated>2023-09-20T01:28:12.449Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ul><li>数值类型:<ul><li>有符号整数 (<code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>isize</code>)、</li><li>无符号整数 (<code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>usize</code>) 、</li><li>浮点数 (<code>f32</code>, <code>f64</code>)、以及有理数、复数</li></ul></li><li>字符串：<ul><li>字符串字面量和字符串切片 <code>&amp;str</code></li></ul></li><li>布尔类型：<ul><li><code>true</code>和 <code>false</code></li></ul></li><li>字符类型:<ul><li>表示单个 Unicode 字符，存储为 4 个字节</li></ul></li><li>单元类型:<ul><li>即 <code>()</code> ，其唯一的值也是 <code>()</code></li></ul></li><li>发散函数返回类型： <code>!</code><ul><li>执行到这时报错</li></ul></li></ul><p><a href="https://course.rs/basic/base-type/index.html">基本类型 - Rust语言圣经(Rust Course)</a></p><h2 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h2><ul><li>字符串 <code>String</code><ul><li>字符串切片的类型标识是 <code>&amp;str</code> （ <code>&amp;str</code> 是切片）</li><li>字符串字面量类型是切片（<code>&quot;let s: &amp;str = &quot;Hello, world!&quot;; &quot;</code>）</li><li>UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)</li></ul></li><li>元组<ul><li><code>let tup = (500, 6.4, 1);</code> 定义</li><li><code>let (x, y, z) = tup;</code> 模式匹配结构</li><li><code>tup.0; tup.1; tup.2</code> 访问元组</li></ul></li><li>结构体</li><li>枚举</li><li>数组</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数值类型:&lt;ul&gt;
&lt;li&gt;有符号整数 (&lt;code&gt;i8&lt;/code&gt;, &lt;code&gt;i16&lt;/code&gt;, </summary>
      
    
    
    
    <category term="Devolop" scheme="https://rchangl.github.io/categories/Devolop/"/>
    
    <category term="Main" scheme="https://rchangl.github.io/categories/Devolop/Main/"/>
    
    <category term="Rust" scheme="https://rchangl.github.io/categories/Devolop/Main/Rust/"/>
    
    <category term="语法" scheme="https://rchangl.github.io/categories/Devolop/Main/Rust/%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>基本语法</title>
    <link href="https://rchangl.github.io/page/Devolop/Main/Rust/%E8%AF%AD%E6%B3%95/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html"/>
    <id>https://rchangl.github.io/page/Devolop/Main/Rust/%E8%AF%AD%E6%B3%95/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html</id>
    <published>2023-09-11T08:28:28.916Z</published>
    <updated>2023-09-19T01:57:48.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">n <span class="title function_ invoke__">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 编译器会默认根据a的值为a推断类型：i32，有符号32位整数</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动指定类型</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span>: <span class="type">i32</span> = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可在数值后带上类型</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b1</span> = <span class="number">30i32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mut 表示可变的，缩写自 mutable</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">c</span> = <span class="number">30i32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数值与类型可添加下划线，增加可读性</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">d</span> = <span class="number">30_i32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以返回值作为变量的值，（返回值也可做为参数）</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">e</span> = <span class="title function_ invoke__">add</span>(<span class="title function_ invoke__">add</span>(a, b), <span class="title function_ invoke__">add</span>(c, d));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">add</span>(i: <span class="type">i32</span>, j: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    i + j</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量可变性"><a href="#变量可变性" class="headerlink" title="变量可变性"></a>变量可变性</h2><p>变量默认不可变</p><p>可变变量：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">    x = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="print-宏-println"><a href="#print-宏-println" class="headerlink" title="print 宏 println!()"></a>print 宏 <code>println!()</code></h2><p>Rust 中 print 用宏实现</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// !代表宏调用，区别于函数它返回的是宏定义的代码块</span></span><br><span class="line"><span class="comment">// &#123;&#125; 是占位符，相当于python中的 %s %d ，自动推导类型</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;result is &#123;&#125;&quot;</span>, a);</span><br></pre></td></tr></table></figure><h2 id="未使用的变量-警告"><a href="#未使用的变量-警告" class="headerlink" title="未使用的变量 警告"></a>未使用的变量 警告</h2><p>变量未使用会有警告，如果要忽略警告，加上 <code>_</code> 在开头</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">_x</span> = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h2 id="变量解构"><a href="#变量解构" class="headerlink" title="变量解构"></a>变量解构</h2><p>从一个相对复杂的变量中，匹配出该变量的一部分内容：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> (a, <span class="keyword">mut</span> b): (<span class="type">bool</span>,<span class="type">bool</span>) = (<span class="literal">true</span>, <span class="literal">false</span>); <span class="comment">// 定义</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;a = &#123;:?&#125;, b = &#123;:?&#125;&quot;</span>, a, b); <span class="comment">// 解构使用</span></span><br><span class="line">b = <span class="literal">true</span>; <span class="comment">// 更改值</span></span><br><span class="line"><span class="built_in">assert_eq!</span>(a, b); <span class="comment">// 更改后变为相等</span></span><br></pre></td></tr></table></figure><p>解构式赋值（<a href="https://course.rs/appendix/rust-versions/1.59.html">Rust 1.59</a> 版本后），可以在赋值语句的左式中使用元组、切片和结构体模式：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Struct</span> &#123;</span><br><span class="line">    e: <span class="type">i32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (a, b, c, d, e);</span><br><span class="line"></span><br><span class="line">    (a, b) = (<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// _ 代表匹配一个值，但是我们不关心具体的值是什么，因此没有使用一个变量名而是使用了 _</span></span><br><span class="line">    [c, .., d, _] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">    Struct &#123; e, .. &#125; = Struct &#123; e: <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert_eq!</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>], [a, b, c, d, e]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p><code>const</code> 定义</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值使用 下划线 提高可读性</span></span><br><span class="line"><span class="keyword">const</span> MAX_POINTS: <span class="type">u32</span> = <span class="number">100_000</span>;</span><br></pre></td></tr></table></figure><p>常量可以在任意作用域内声明，包括全局作用域</p><h2 id="变量遮蔽-shadowing"><a href="#变量遮蔽-shadowing" class="headerlink" title="变量遮蔽(shadowing)"></a>变量遮蔽(shadowing)</h2><p>后面声明的变量会遮蔽掉前面声明</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">spaces</span> = <span class="string">&quot;   &quot;</span>;</span><br><span class="line"><span class="comment">// usize数值类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">spaces</span> = spaces.<span class="title function_ invoke__">len</span>();</span><br></pre></td></tr></table></figure><h2 id="语句和表达式"><a href="#语句和表达式" class="headerlink" title="语句和表达式"></a>语句和表达式</h2><p><strong>语句（statement）和表达式（expression）</strong></p><p>表达式没有分号结尾，<strong>表达式总要返回值</strong></p><p>表达式如果不返回任何值，会隐式地返回一个 <a href="https://course.rs/basic/base-type/char-bool.html#%E5%8D%95%E5%85%83%E7%B1%BB%E5%9E%8B"><code>()</code></a></p><p>let 是语句，所以 <code>let b = (let a = 8);</code> 是错的，但是 <code>let</code> 作为表达式已经是试验功能了，在将来或许能够这样使用</p><h2 id="序列Range"><a href="#序列Range" class="headerlink" title="序列Range"></a>序列Range</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>..<span class="number">5</span></span><br><span class="line"><span class="number">1</span>..=<span class="number">5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p><strong>引用</strong>集合中部分连续的元素序列</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">hello</span> = &amp;s[<span class="number">0</span>..<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">world</span> = &amp;s[<span class="number">6</span>..<span class="number">11</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>[开始索引..终止索引]</code> 左闭右开区间</p><p>字符串切片：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从零开始</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">slice</span> = &amp;s[<span class="number">0</span>..<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">slice</span> = &amp;s[..<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 截取至末尾</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">len</span> = s.<span class="title function_ invoke__">len</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="variable">slice</span> = &amp;s[<span class="number">4</span>..len];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">slice</span> = &amp;s[<span class="number">4</span>..];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 截取全段</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">slice</span> = &amp;s[<span class="number">0</span>..len];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">slice</span> = &amp;s[..];</span><br></pre></td></tr></table></figure><p>数组切片：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">slice</span> = &amp;a[<span class="number">1</span>..<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(slice, &amp;[<span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;入口函数&quot;&gt;&lt;a href=&quot;#入口函数&quot; class=&quot;headerlink&quot; title=&quot;入口函数&quot;&gt;&lt;/a&gt;入口函数&lt;/h2&gt;&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    <category term="Devolop" scheme="https://rchangl.github.io/categories/Devolop/"/>
    
    <category term="Main" scheme="https://rchangl.github.io/categories/Devolop/Main/"/>
    
    <category term="Rust" scheme="https://rchangl.github.io/categories/Devolop/Main/Rust/"/>
    
    <category term="语法" scheme="https://rchangl.github.io/categories/Devolop/Main/Rust/%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>【黑桃A】拉康三界</title>
    <link href="https://rchangl.github.io/page/Phyloshophy/%E6%89%91%E5%85%8B%E7%89%8C/11.html"/>
    <id>https://rchangl.github.io/page/Phyloshophy/%E6%89%91%E5%85%8B%E7%89%8C/11.html</id>
    <published>2023-09-10T11:50:44.607Z</published>
    <updated>2023-09-16T02:45:12.349Z</updated>
    
    <content type="html"><![CDATA[<p>拉康的三界理论，象征界、想象界、符号界，对应康德的 先验自我、经验自我、我自身</p><p>这三个界并不是完全分离的，而是相互交织和影响的。</p><h2 id="想象界-The-Imaginary"><a href="#想象界-The-Imaginary" class="headerlink" title="想象界 (The Imaginary)"></a>想象界 (The Imaginary)</h2><p>想象界是指人类通过镜像、幻想、自恋等方式构建的自我形象和他者形象，它们是主观的、扭曲的、虚幻的，例如镜中的自己、理想的爱人、美丽的梦境等。</p><p>经验中能感觉到，能想象到的东西，一个表象世界，需要借助具体图像</p><h2 id="符号界-x2F-象征界-The-Symbolic"><a href="#符号界-x2F-象征界-The-Symbolic" class="headerlink" title="符号界&#x2F;象征界 (The Symbolic)"></a>符号界&#x2F;象征界 (The Symbolic)</h2><p>先验自我 统觉 </p><p>象征界是指人类通过语言、符号、规则、文化等方式建立的社会秩序和意义系统，它们是客观的、规范的、有限的，例如法律、道德、逻辑、数学等。拉康认为，人类从出生开始就进入了这三个界，并在其中形成了自己的主体性和欲望。</p><p>日常说话的话语就是符号，我们所处在的由概念搭建起来的世界，就是符号界</p><h2 id="实在界-The-Real"><a href="#实在界-The-Real" class="headerlink" title="实在界 (The Real)"></a>实在界 (The Real)</h2><p>不可见的 我自身 物自体， </p><p>在想象界与符号界之外的场域，既不是象征性的，也不是想象性的。它构成主体现实的一部分，不过它无法用语言或符号表达的事物，它们是不可知的、不可思议的、不可言说的，例如死亡、性、无意识等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;拉康的三界理论，象征界、想象界、符号界，对应康德的 先验自我、经验自我、我自身&lt;/p&gt;
&lt;p&gt;这三个界并不是完全分离的，而是相互交织和影响的。&lt;/p&gt;
&lt;h2 id=&quot;想象界-The-Imaginary&quot;&gt;&lt;a href=&quot;#想象界-The-Imaginary&quot; class</summary>
      
    
    
    
    <category term="Phyloshophy" scheme="https://rchangl.github.io/categories/Phyloshophy/"/>
    
    <category term="扑克牌" scheme="https://rchangl.github.io/categories/Phyloshophy/%E6%89%91%E5%85%8B%E7%89%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>toml配置</title>
    <link href="https://rchangl.github.io/page/Devolop/Main/Rust/%E9%85%8D%E7%BD%AE%E5%92%8C%E8%BF%90%E8%A1%8C/toml%E9%85%8D%E7%BD%AE.html"/>
    <id>https://rchangl.github.io/page/Devolop/Main/Rust/%E9%85%8D%E7%BD%AE%E5%92%8C%E8%BF%90%E8%A1%8C/toml%E9%85%8D%E7%BD%AE.html</id>
    <published>2023-09-07T16:35:33.975Z</published>
    <updated>2023-09-07T16:37:14.715Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;world_hello&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2021&quot;</span></span><br></pre></td></tr></table></figure><p><code>edition</code> 字段定义了我们使用的 Rust 大版本。</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">rand</span> = <span class="string">&quot;0.3&quot;</span></span><br><span class="line"><span class="attr">hammer</span> = &#123; version = <span class="string">&quot;0.5.0&quot;</span>&#125;</span><br><span class="line"><span class="attr">color</span> = &#123; git = <span class="string">&quot;https://github.com/bjz/color-rs&quot;</span> &#125;</span><br><span class="line"><span class="attr">geometry</span> = &#123; path = <span class="string">&quot;crates/geometry&quot;</span> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight toml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="Devolop" scheme="https://rchangl.github.io/categories/Devolop/"/>
    
    <category term="Main" scheme="https://rchangl.github.io/categories/Devolop/Main/"/>
    
    <category term="Rust" scheme="https://rchangl.github.io/categories/Devolop/Main/Rust/"/>
    
    <category term="配置和运行" scheme="https://rchangl.github.io/categories/Devolop/Main/Rust/%E9%85%8D%E7%BD%AE%E5%92%8C%E8%BF%90%E8%A1%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>环境配置</title>
    <link href="https://rchangl.github.io/page/Devolop/Main/Rust/%E9%85%8D%E7%BD%AE%E5%92%8C%E8%BF%90%E8%A1%8C/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html"/>
    <id>https://rchangl.github.io/page/Devolop/Main/Rust/%E9%85%8D%E7%BD%AE%E5%92%8C%E8%BF%90%E8%A1%8C/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</id>
    <published>2023-09-07T16:24:05.879Z</published>
    <updated>2023-09-11T04:53:29.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="msvc-环境"><a href="#msvc-环境" class="headerlink" title="msvc 环境"></a>msvc 环境</h2><p>安装 <a href="https://visualstudio.microsoft.com/zh-hans/visual-cpp-build-tools/">Microsoft C++ Build Tools</a>，勾选安装 C++ 环境即可。</p><p>msvc 命令行程序需要手动添加到环境变量中</p><p><code>%Visual Studio 安装位置%\VC\Tools\MSVC\%version%\bin\Hostx64\x64</code>（请自行替换其中的 %Visual Studio 安装位置%、%version% 字段）</p><h2 id="Rust-镜像"><a href="#Rust-镜像" class="headerlink" title="Rust 镜像"></a>Rust 镜像</h2><p>网址（字节跳动）： <a href="https://rsproxy.cn/">https://rsproxy.cn/</a></p><h3 id="rustup设置"><a href="#rustup设置" class="headerlink" title="rustup设置"></a>rustup设置</h3><p><strong>将</strong> <code>RUSTUP_DIST_SERVER</code><strong>与</strong> <code>RUSTUP_UPDATE_ROOT</code><strong>增加到系统环境变量。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字节跳动</span></span><br><span class="line">RUSTUP_DIST_SERVER=https://rsproxy.cn</span><br><span class="line">RUSTUP_UPDATE_ROOT=https://rsproxy.cn/rustup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中国科学技术大学</span></span><br><span class="line">RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static</span><br><span class="line">RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清华大学</span></span><br><span class="line">RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上海交通大学</span></span><br><span class="line">RUSTUP_DIST_SERVER=https://mirrors.sjtug.sjtu.edu.cn/rust-static/</span><br></pre></td></tr></table></figure><h3 id="cargo设置"><a href="#cargo设置" class="headerlink" title="cargo设置"></a>cargo设置</h3><p><code>.cargo</code> 目录下创建文件 <code>config</code> ，文件内容见： <a href="https://rsproxy.cn/">https://rsproxy.cn/</a></p><h3 id="其他的教程"><a href="#其他的教程" class="headerlink" title="其他的教程"></a>其他的教程</h3><p>Rust 圣经： <a href="https://course.rs/first-try/slowly-downloading.html">https://course.rs/first-try/slowly-downloading.html</a></p><h2 id="环境变量，-rust-cargo-位置"><a href="#环境变量，-rust-cargo-位置" class="headerlink" title="环境变量， rust cargo 位置"></a>环境变量， rust cargo 位置</h2><p>设置安装路径。默认它会把Rust装到你的<del>&#x2F;.rustup 里，依赖库下载到</del>&#x2F;.cargo 里。需要修改的话，设置环境变量 <code>RUSTUP_HOME</code> 和 <code>CARGO_HOME</code> 分别修改这两个值（例如D:\rustup和D:\cargo）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;msvc-环境&quot;&gt;&lt;a href=&quot;#msvc-环境&quot; class=&quot;headerlink&quot; title=&quot;msvc 环境&quot;&gt;&lt;/a&gt;msvc 环境&lt;/h2&gt;&lt;p&gt;安装 &lt;a href=&quot;https://visualstudio.microsoft.com/zh-</summary>
      
    
    
    
    <category term="Devolop" scheme="https://rchangl.github.io/categories/Devolop/"/>
    
    <category term="Main" scheme="https://rchangl.github.io/categories/Devolop/Main/"/>
    
    <category term="Rust" scheme="https://rchangl.github.io/categories/Devolop/Main/Rust/"/>
    
    <category term="配置和运行" scheme="https://rchangl.github.io/categories/Devolop/Main/Rust/%E9%85%8D%E7%BD%AE%E5%92%8C%E8%BF%90%E8%A1%8C/"/>
    
    
  </entry>
  
</feed>
