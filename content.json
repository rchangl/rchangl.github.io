{"meta":{"title":"RC 的博客","subtitle":"","description":"","author":"RC","url":"https://rchangl.github.io","root":"/"},"pages":[{"title":"About","date":"2023-08-26T08:55:32.731Z","updated":"2023-07-12T07:07:03.221Z","comments":true,"path":"about/index.html","permalink":"https://rchangl.github.io/about/index.html","excerpt":"","text":"有问题请联系 E-mail:&#x72;&#x63;&#104;&#x61;&#x6e;&#x67;&#x6c;&#x40;&#111;&#117;&#x74;&#x6c;&#x6f;&#111;&#107;&#46;&#99;&#111;&#x6d;"},{"title":"Categories","date":"2023-08-26T08:55:32.732Z","updated":"2022-08-13T15:12:49.522Z","comments":true,"path":"categories/index.html","permalink":"https://rchangl.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2023-08-26T08:55:32.732Z","updated":"2022-08-13T15:12:49.522Z","comments":true,"path":"tags/index.html","permalink":"https://rchangl.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"AOP","slug":"Devolop/后端/Spring Boot/AOP","date":"2023-10-13T11:41:21.763Z","updated":"2023-10-13T11:47:42.981Z","comments":true,"path":"page/Devolop/后端/Spring Boot/AOP.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Spring%20Boot/AOP.html","excerpt":"","text":"面向切面编程 基本原理：动态代理技术 在不改变原函数的情况下增加函数功能。 与设计模式里的“代理模式”思想一样","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Spring Boot","slug":"Devolop/后端/Spring-Boot","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/"}],"tags":[]},{"title":"Cookie","slug":"Devolop/后端/Java Web/Cookie","date":"2023-10-13T11:16:20.814Z","updated":"2023-10-13T11:21:09.446Z","comments":true,"path":"page/Devolop/后端/Java Web/Cookie.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Cookie.html","excerpt":"","text":"数据保存在浏览器 Cookie 不能跨域使用（协议、IP&#x2F;域名、端口） request.getCookie 获取 response.addCookie 添加","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"}],"tags":[]},{"title":"Session 会话","slug":"Devolop/后端/Java Web/Seesion会话","date":"2023-10-13T11:12:53.342Z","updated":"2023-10-13T11:23:34.546Z","comments":true,"path":"page/Devolop/后端/Java Web/Seesion会话.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Seesion%E4%BC%9A%E8%AF%9D.html","excerpt":"","text":"一个浏览器（客户端）一个会话。同一个浏览器多个请求都是一个会话 Session 只能单服务器使用，无法直接在集群服务器使用 会话跟踪纯 Cookie ：最早的方式，不安全 Session ：改进 JWT 令牌 ：主流 JSESSIONID自动设置在 Cookie 中","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"}],"tags":[]},{"title":"配置文件","slug":"Devolop/后端/Spring Boot/配置文件","date":"2023-10-09T10:58:52.957Z","updated":"2023-10-13T11:50:02.614Z","comments":true,"path":"page/Devolop/后端/Spring Boot/配置文件.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Spring%20Boot/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html","excerpt":"","text":"将 Spring 里的复杂的 xml 文件替代了 约定大于配置 CoC(Convention over Configuration) 。只需要配置不同配置的部分就好 单个注入 @Value注入属性值： yaml配置文件一样 批量注入 @ConfigurationProperties@Component 交给IOC容器 @ConfigurationProperties(prefix=&quot;aliyun.oss&quot;) 注入配置，前缀 读取配置文件在SpringBoot中已封装 @Value","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Spring Boot","slug":"Devolop/后端/Spring-Boot","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/"}],"tags":[]},{"title":"组合数","slug":"Devolop/Math_and_Algo_数学和算法/组合数","date":"2023-10-07T15:03:49.175Z","updated":"2023-10-07T15:10:13.982Z","comments":true,"path":"page/Devolop/Math_and_Algo_数学和算法/组合数.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Math_and_Algo_%E6%95%B0%E5%AD%A6%E5%92%8C%E7%AE%97%E6%B3%95/%E7%BB%84%E5%90%88%E6%95%B0.html","excerpt":"","text":"代码中使用展开式，用for循环计算（Python、Golang 中有相应的API，Java、C++、JS没有） 1234long ans = 1;for (int x = n, y = 1; y &lt; m; ++x, ++y) &#123; ans = ans * x / y;&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Math_and_Algo_数学和算法","slug":"Devolop/Math-and-Algo-数学和算法","permalink":"https://rchangl.github.io/categories/Devolop/Math-and-Algo-%E6%95%B0%E5%AD%A6%E5%92%8C%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"排列组合之隔板法","slug":"Devolop/Math_and_Algo_数学和算法/排列组合之隔板法","date":"2023-10-07T09:34:30.102Z","updated":"2023-10-07T15:05:51.802Z","comments":true,"path":"page/Devolop/Math_and_Algo_数学和算法/排列组合之隔板法.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Math_and_Algo_%E6%95%B0%E5%AD%A6%E5%92%8C%E7%AE%97%E6%B3%95/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E4%B9%8B%E9%9A%94%E6%9D%BF%E6%B3%95.html","excerpt":"","text":"","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Math_and_Algo_数学和算法","slug":"Devolop/Math-and-Algo-数学和算法","permalink":"https://rchangl.github.io/categories/Devolop/Math-and-Algo-%E6%95%B0%E5%AD%A6%E5%92%8C%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"File 文件","slug":"Devolop/Language/Java SE/内置类/File文件","date":"2023-10-05T13:25:49.387Z","updated":"2023-10-05T13:31:11.865Z","comments":true,"path":"page/Devolop/Language/Java SE/内置类/File文件.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/%E5%86%85%E7%BD%AE%E7%B1%BB/File%E6%96%87%E4%BB%B6.html","excerpt":"","text":"删除文件123456789101112131415161718192021222324252627282930313233343536373839404142434445// package com.rc;import java.io.File;public class DeleteFileJava &#123; /** * 此类显示如何在Java中删除文件 * @param args */ public static void main(String[] args) &#123; // 带路径的文件名 File file = new File(&quot;tmp/tmp2/file.txt&quot;); if(file.delete())&#123; System.out.println(&quot;tmp/tmp2/file.txt File deleted&quot;); &#125;else System.out.println(&quot;File tmp/tmp2/file.txt doesn&#x27;t exist&quot;); // 只提供文件名称 file = new File(&quot;file.txt&quot;); if(file.delete())&#123; System.out.println(&quot;file.txt File deleted from Project root directory&quot;); &#125;else System.out.println(&quot;File file.txt doesn&#x27;t exist in the project root directory&quot;); //relative path file = new File(&quot;temp/file.txt&quot;); if(file.delete())&#123; System.out.println(&quot;temp/file.txt File deleted from Project root directory&quot;); &#125;else System.out.println(&quot;File temp/file.txt doesn&#x27;t exist in the project root directory&quot;); // 删除空的目录 file = new File(&quot;temp&quot;); if(file.delete())&#123; System.out.println(&quot;temp directory deleted from Project root directory&quot;); &#125;else System.out.println(&quot;temp directory doesn&#x27;t exist or not empty in the project root directory&quot;); // 试图删除非空目录 file = new File(&quot;D:/user/maxsu/project&quot;); if(file.delete())&#123; System.out.println(&quot;D:/user/maxsu/project directory deleted from Project root directory&quot;); &#125;else System.out.println(&quot;D:/user/maxsu/project directory doesn&#x27;t exist or not empty&quot;); &#125;&#125;//更多请阅读：https://www.yiibai.com/java/java-delete-file-directory.html delete方法不会抛出IOException异常 123456789101112131415161718192021222324import java.io.File;public class JavaDeleteDirectory &#123; public static void main(String[] args) &#123; File dir = new File(&quot;D:/worksp/java/log&quot;); if(dir.isDirectory() == false) &#123; System.out.println(&quot;Not a directory. Do nothing&quot;); return; &#125; File[] listFiles = dir.listFiles(); for(File file : listFiles)&#123; System.out.println(&quot;Deleting &quot;+file.getName()); file.delete(); &#125; //现在目录为空，所以可以删除它 System.out.println(&quot;Deleting Directory. Success = &quot;+dir.delete()); &#125;&#125;//更多请阅读：https://www.yiibai.com/java/java-delete-file-directory.html","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"内置类","slug":"Devolop/Language/Java-SE/内置类","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/%E5%86%85%E7%BD%AE%E7%B1%BB/"}],"tags":[]},{"title":"MY-Easy-Pic-Bed 简易本地图床","slug":"Devolop/小工具/MY-Easy-Pic-Bed简易本地图床","date":"2023-10-04T16:35:45.804Z","updated":"2023-10-04T17:08:48.033Z","comments":true,"path":"page/Devolop/小工具/MY-Easy-Pic-Bed简易本地图床.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%B0%8F%E5%B7%A5%E5%85%B7/MY-Easy-Pic-Bed%E7%AE%80%E6%98%93%E6%9C%AC%E5%9C%B0%E5%9B%BE%E5%BA%8A.html","excerpt":"","text":"Github: https://github.com/fslongjin/My-Easy-Pic-Bed 使用：安装python 3.8 然后： 1pip install flask Github上下载项目： 1git clone https://github.com/fslongjin/My-Easy-Pic-Bed.git 运行即可 上传和访问图片直接打开链接可开启一个引导页面。 手动管理图片，将图片放到 ./pics 下，访问使用 .../uploads/xxx.xxx","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"小工具","slug":"Devolop/小工具","permalink":"https://rchangl.github.io/categories/Devolop/%E5%B0%8F%E5%B7%A5%E5%85%B7/"}],"tags":[]},{"title":"环境配置","slug":"Devolop/Secondary/Python/环境配置","date":"2023-10-04T16:03:17.177Z","updated":"2023-10-04T16:15:33.472Z","comments":true,"path":"page/Devolop/Secondary/Python/环境配置.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Python/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html","excerpt":"","text":"修改镜像源临时使用：Linux Mac Windows 通用命令 可以在使用pip的时候在后面加上-i参数，指定pip源 1pip install scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple 永久修改：Linux:修改 pip.conf 文件 (没有就创建一个) $HOME/.config/pip/pip.conf 修改内容如下： 123[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple12 Mac:修改 pip.conf 文件 $HOME&#x2F;Library&#x2F;Application Support&#x2F;pip&#x2F;pip.conf 如果没有上面的目录,在如下目录创建 pip.conf $HOME&#x2F;.config&#x2F;pip&#x2F;pip.conf 修改内容如下： 123[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple12 Windows:修改 pip.conf 文件 (没有就创建一个) %APPDATA%\\pip\\pip.ini (%APPDATA%为用户目录) 修改内容如下： 123[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple pip 10 以后版本可进行的设置升级 pip 到最新的版本 (&gt;&#x3D;10.0.0) 后进行配置： 12python -m pip install --upgrade pippip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Python","slug":"Devolop/Secondary/Python","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Python/"}],"tags":[]},{"title":"File 文件","slug":"Devolop/Language/Java SE/Base and Grammer/File文件","date":"2023-10-03T12:31:24.207Z","updated":"2023-10-03T12:40:02.688Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/File文件.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/File%E6%96%87%E4%BB%B6.html","excerpt":"","text":"class Filepublic long length() 返回文件字节数","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"match","slug":"Devolop/Main/Rust/基本语法/模式匹配/match","date":"2023-09-30T03:20:42.733Z","updated":"2023-09-30T11:57:40.484Z","comments":true,"path":"page/Devolop/Main/Rust/基本语法/模式匹配/match.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/match.html","excerpt":"","text":"match 表达式是一个控制结构，其接收一个表达式，然后将表达式的结果与多个模式进行匹配，一旦匹配了某个模式，则该模式相关联的代码将被执行: 123456789match target &#123; 模式1 =&gt; 表达式1, 模式2 =&gt; &#123; 语句1; 语句2; 表达式2 &#125;, _ =&gt; 表达式3&#125; 123456789101112131415161718enum Coin &#123; Penny, Nickel, Dime, Quarter,&#125;fn value_in_cents(coin: Coin) -&gt; u8 &#123; match coin &#123; Coin::Penny =&gt; &#123; println!(&quot;Lucky penny!&quot;); 1 &#125;, Coin::Nickel =&gt; 5, Coin::Dime =&gt; 10, Coin::Quarter =&gt; 25, &#125;&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"},{"name":"基本语法","slug":"Devolop/Main/Rust/基本语法","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"name":"模式匹配","slug":"Devolop/Main/Rust/基本语法/模式匹配","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"}],"tags":[]},{"title":"断言 assertion","slug":"Devolop/Main/Rust/测试/断言assertion","date":"2023-09-29T16:30:12.981Z","updated":"2023-09-29T16:34:23.524Z","comments":true,"path":"page/Devolop/Main/Rust/测试/断言assertion.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/%E6%B5%8B%E8%AF%95/%E6%96%AD%E8%A8%80assertion.html","excerpt":"","text":"断言列表在正式开始前，来看看常用的断言有哪些: assert!, assert_eq!, assert_ne!, 它们会在所有模式下运行 debug_assert!, debug_assert_eq!, debug_assert_ne!, 它们只会在 Debug 模式下运行 assert_eq!assert_eq! 宏可以用于判断两个表达式返回的值是否相等 : 12345fn main() &#123; let a = 3; let b = 1 + 2; assert_eq!(a, b);&#125; 当不相等时，当前线程会直接 panic: 12345fn main() &#123; let a = 3; let b = 1 + 3; assert_eq!(a, b, &quot;我们在测试两个数之和&#123;&#125; + &#123;&#125;，这是额外的错误信息&quot;, a, b);&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"},{"name":"测试","slug":"Devolop/Main/Rust/测试","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E6%B5%8B%E8%AF%95/"}],"tags":[]},{"title":"动态数组 Vector","slug":"Devolop/Main/Rust/基本语法/动态数组Vector","date":"2023-09-29T16:17:43.216Z","updated":"2023-09-29T16:24:09.723Z","comments":true,"path":"page/Devolop/Main/Rust/基本语法/动态数组Vector.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84Vector.html","excerpt":"","text":"创建动态数组Vec::new12let mut v = Vec::new();v.push(1); vec![] 宏1let v = vec![1, 2, 3];","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"},{"name":"基本语法","slug":"Devolop/Main/Rust/基本语法","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"}],"tags":[]},{"title":"Macro 宏","slug":"Devolop/Main/Rust/基本语法/Macro宏","date":"2023-09-29T14:48:39.276Z","updated":"2023-09-30T03:07:46.720Z","comments":true,"path":"page/Devolop/Main/Rust/基本语法/Macro宏.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/Macro%E5%AE%8F.html","excerpt":"","text":"从调用上看，最显著的是，宏多了一个 !，如 println!(&quot;aaa&quot;); 宏的参数宏的参数可以使用 () 、[] 以及 &#123;&#125; : 12345fn main() &#123; println!(&quot;aaaa&quot;); println![&quot;aaaa&quot;]; println!&#123;&quot;aaaa&quot;&#125;&#125; 虽然三种使用形式皆可，但是 Rust 内置的宏都有自己约定俗成的使用方式，例如 vec![...] 、assert_eq!(...) 等。 参数数量：函数的参数数量是固定的，而宏就可以拥有可变数量的参数。如 println!(&quot;hello&quot;) ，也可以调用两个参数的 println!(&quot;hello &#123;&#125;&quot;, name) 。 宏的分类在 Rust 中宏分为两大类：声明式宏( declarative macros ) macro_rules! 和三种过程宏( procedural macros ): #[derive] ，在之前多次见到的派生宏，可以为目标结构体或枚举派生指定的代码，例如 Debug 特征类属性宏(Attribute-like macro)，用于为目标添加自定义的属性类函数宏(Function-like macro)，看上去就像是函数调用 声明式宏 macro_rules!","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"},{"name":"基本语法","slug":"Devolop/Main/Rust/基本语法","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"}],"tags":[]},{"title":"安装配置环境","slug":"Devolop/Main/Rust/Slint/安装配置环境","date":"2023-09-29T13:25:43.620Z","updated":"2023-10-06T06:26:13.811Z","comments":true,"path":"page/Devolop/Main/Rust/Slint/安装配置环境.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/Slint/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83.html","excerpt":"","text":"依赖1cargo add slint","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"},{"name":"Slint","slug":"Devolop/Main/Rust/Slint","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/Slint/"}],"tags":[]},{"title":"FastDFS","slug":"Devolop/Main/Linux和项目环境/FastDFS","date":"2023-09-26T13:12:48.791Z","updated":"2023-10-05T10:03:40.634Z","comments":true,"path":"page/Devolop/Main/Linux和项目环境/FastDFS.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Linux%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/FastDFS.html","excerpt":"","text":"Docker部署FastDFS12345# 搜索镜像docker search fastdfs# 拉取镜像（已经内置Nginx）docker pull delron/fastdfs Tracker1docker run -d --name tracker --network=host -v /mydata/fastdfs/tracker:/var/fdfs delron/fastdfs tracker 服务默认的端口为22122，-v 实现了容器和本地目录的挂载操作。 Storage1docker run -d --name storage --network=host -e TRACKER_SERVER=10.0.2.15:22122 -v /mydata/fastdfs/storage:/var/fdfs -e GROUP_NAME=group1 delron/fastdfs storage 在执行上面命令的时候要注意对应的修改下，其中TRACKER_SERVER中的ip要修改为你的Tracker服务所在的服务IP地址。 默认端口： 服务 默认端口 Tracker 22122 Storage 23000 Nginx 8888 使用12345678910111213141516// 导入 FastDFS 的依赖包&lt;dependency&gt; &lt;groupId&gt;org.csource.fastdfs&lt;/groupId&gt; &lt;artifactId&gt;fastdfs&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt;&lt;/dependency&gt;// 创建 FastDFS 的客户端对象FastDFSClient client = new FastDFSClient(&quot;classpath:config/fdfs_client.conf&quot;);// 完成上传，获得 fileIdString fileId = client.uploadFile(uploadFile.getBytes(), exeName);// 拼接文件的访问路径并返回到前端页面String filePath = server_url + fileId;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Linux和项目环境","slug":"Devolop/Main/Linux和项目环境","permalink":"https://rchangl.github.io/categories/Devolop/Main/Linux%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/"}],"tags":[]},{"title":"Docker","slug":"Devolop/Main/Linux和项目环境/Docker","date":"2023-09-26T01:20:59.159Z","updated":"2023-10-05T09:41:55.536Z","comments":true,"path":"page/Devolop/Main/Linux和项目环境/Docker.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Linux%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/Docker.html","excerpt":"","text":"镜像仓库 Docker Hub镜像仓库的国内镜像源（阿里云）： 【Ubuntu18.04】Docker配置镜像源-阿里云开发者社区 运行systemctl start docker 启动服务 镜像管理docker search xxx 搜索xxx镜像 docker pull aaa/xxx 拉取镜像 创建并运行 run命令docker run 创建并运行一个容器 常用参数： -d: 后台运行容器，并返回容器ID； 不加 -d 会卡在那，等待输出日志 --name=&quot;nginx-lb&quot;: 为容器指定一个名称； 必须唯一 -p: 指定端口映射，格式为：主机(宿主)端口:容器端口 -e username=&quot;ritchie&quot;: 镜像环境变量； 由镜像的制作者决定的，查阅镜像文档可知如何配置 --volume , -v: 绑定一个卷 更多见数据卷部分 指定运行镜像的名字 完整写法： mysql:8.0 没写默认最新版本 其它参数： -a stdin: 指定标准输入输出内容类型，可选 STDIN&#x2F;STDOUT&#x2F;STDERR 三项； -i: 以交互模式运行容器，通常与 -t 同时使用； -P: 随机端口映射，容器内部端口随机映射到主机的端口 -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用； –dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致； –dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致； -h “mars”: 指定容器的hostname； –env-file&#x3D;[]: 从指定文件读入环境变量； –cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2”: 绑定容器到指定CPU运行； -m : 设置容器使用内存最大值； –net&#x3D;”bridge”: 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container: 四种类型； –link&#x3D;[]: 添加链接到另一个容器； –expose&#x3D;[]: 开放一个端口或一组端口； 12docker -d \\--name 常见命令官网：Docker Docs docker xxx --help 查看具体命令帮助 镜像管理： docker pull 下载到本地 docker pull nginx docker push 推送镜像到云端 docker images 查看本地镜像 docker rmi 删除本地镜像 docker build 通过 dockerfile 构建镜像 docker save 保存镜像为压缩包 docker save -o nginx.tar nginx:latest -o 文件名 docker load 将save保存的压缩包，加载为本地镜像 容器： docker run 创建运行容器 docker stop 停止容器内部的进程 docker start 启动容器内部的进程 docker ps 查看容器运行状态 docker ps -a --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Names&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;&quot; -a 显示所有容器，包括未运行的道容器 docker rm 删除容器 -f 强制删除 docker logs 查看日志 docker logs nginx docker exec 进入容器内部 -it nginx bash 可交互终端，命令行 docker inspect nginx 查看容器信息（Mounts处有数据卷信息） 数据卷主机中数据卷固定目录： /var/lib/docker/volumes/ docker run -v 数据卷名:容器内目录 数据卷挂载，如果数据卷不存在，则自动创建 docker run -v 本地目录:容器内目录 挂载到本地目录。 目录以 / ./ 开头 自定义镜像Dockerfilenetwork 网络host 为IP地址为主机地址一样","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Linux和项目环境","slug":"Devolop/Main/Linux和项目环境","permalink":"https://rchangl.github.io/categories/Devolop/Main/Linux%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/"}],"tags":[]},{"title":"内置函数","slug":"Devolop/后端/MySQL/内置函数","date":"2023-09-18T09:53:26.960Z","updated":"2023-09-18T09:54:03.623Z","comments":true,"path":"page/Devolop/后端/MySQL/内置函数.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/MySQL/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html","excerpt":"","text":"CONCAT(s1,s2...sn) 字符串 s1,s2 等多个字符串合并为一个字符串","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"MySQL","slug":"Devolop/后端/MySQL","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/"}],"tags":[]},{"title":"Markdown","slug":"Computer Use/Markdown","date":"2023-09-18T08:11:32.330Z","updated":"2023-09-18T08:12:46.107Z","comments":true,"path":"page/Computer Use/Markdown.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/Markdown.html","excerpt":"","text":"换行在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行(&lt;br&gt;)。","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"}],"tags":[]},{"title":"record","slug":"Devolop/Language/Java SE/Java9-11的新特性/record","date":"2023-09-18T08:09:15.380Z","updated":"2023-09-18T08:52:32.842Z","comments":true,"path":"page/Devolop/Language/Java SE/Java9-11的新特性/record.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Java9-11%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/record.html","excerpt":"","text":"jdk17 record关键字的作用是什么? - 知乎 声明一个record类： 1234package cn.dayangshuo.recordclass;//没错，就这一行代码record User2(String name, Integer age) &#123;&#125; record特点 提供 全参构造方法 public 访问器 访问器方法相当于getter，只不过省略了get前缀，这样可以简化代码和提高可读性 equals方法 hashCode方法 toString方法 public final 类 final 属性，不可修改 能声明 static 成员，不能声明实例属性 可以覆盖构造方法、创建静态方法、定义自己的方法 无 set，get 方法。没有遵循 Bean 的命名规范 JDK有用的新特性-Java Record - 愚生浅末 - 博客园","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Java9-11的新特性","slug":"Devolop/Language/Java-SE/Java9-11的新特性","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Java9-11%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/"}],"tags":[]},{"title":"Debug","slug":"Devolop/Main/Rust/项目配置管理/Debug","date":"2023-09-18T00:45:59.819Z","updated":"2023-09-18T01:23:57.211Z","comments":true,"path":"page/Devolop/Main/Rust/项目配置管理/Debug.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/Debug.html","excerpt":"","text":"编译器属性标记允许 #![allow()] #![allow(unused_variables)] 属性标记，该标记会告诉编译器忽略未使用的变量，不要抛出 warning 警告,具体的常见编译器属性你可以在这里查阅：。 #[allow(dead_code)] 允许未使用的代码，添加在上方 unimplemented!()unimplemented!() 写在函数内部，告诉编译器此函数尚未实现","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"},{"name":"项目配置管理","slug":"Devolop/Main/Rust/项目配置管理","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"}],"tags":[]},{"title":"PageHelper分页插件","slug":"Devolop/后端/Spring Boot/PageHelper分页插件","date":"2023-09-17T13:12:43.285Z","updated":"2023-09-17T13:33:48.080Z","comments":true,"path":"page/Devolop/后端/Spring Boot/PageHelper分页插件.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Spring%20Boot/PageHelper%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6.html","excerpt":"","text":"简化分页查询的代码编写 代码Mapper: 12@Select(&quot;select * from emp&quot;)public List&lt;Emp&gt; list(); EmpServiceImp: 12345678910111213@Overridepublic PageBean page(Integer pge, Integer pageSize) &#123; // 设置分页参数 PageHelper.startPage(page, pageSize); // 执行查询 List&lt;Emp&gt; empList = empMapper.list(); Page&lt;Emp&gt; p = (Page&lt;Emp&gt;) empList; // 封装 PageBean 对象 return new PageBean(p.getTotal(), p.getResult());&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Spring Boot","slug":"Devolop/后端/Spring-Boot","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/"}],"tags":[]},{"title":"字符串","slug":"Devolop/Main/Rust/基本语法/字符串","date":"2023-09-15T01:28:52.077Z","updated":"2023-09-19T02:03:28.199Z","comments":true,"path":"page/Devolop/Main/Rust/基本语法/字符串.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2.html","excerpt":"","text":"1let s1 = String::from(&quot;hello&quot;);","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"},{"name":"基本语法","slug":"Devolop/Main/Rust/基本语法","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"}],"tags":[]},{"title":"所有权 ownership 和 借用","slug":"Devolop/Main/Rust/基本语法/所有权Ownership和借用Borrowing","date":"2023-09-15T01:04:07.593Z","updated":"2023-09-17T12:54:03.658Z","comments":true,"path":"page/Devolop/Main/Rust/基本语法/所有权Ownership和借用Borrowing.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%89%80%E6%9C%89%E6%9D%83Ownership%E5%92%8C%E5%80%9F%E7%94%A8Borrowing.html","excerpt":"","text":"所有权规则 Each value in Rust has an owner . 一个值只允许有一个 owner 预防bug 二次释放（double free） There can only be one owner at a time. 一个值只能拥有一个所有者 When the owner goes out of scope, the value will be dropped. 离开范围被 丢弃(drop) 浅拷贝 和 深拷贝默认所有都是浅拷贝 深拷贝操作： 12let s1 = String::from(&quot;hello&quot;);let s2 = s1.clone(); 数据直接存储在 栈 中，叫 Copy 特征， 不可变引用 &amp;T 可Copy 函数传值与返回的所有权 参数传入函数调用内后，所有权也被移出当前作用域 函数内变量移出作用域。 顺序：后进先出； 堆释放内存：调用 drop 方法 123456789101112131415161718192021fn main() &#123; let s = String::from(&quot;hello&quot;); // s 进入作用域 takes_ownership(s); // s 的值移动到函数里 ... // ... 所以到这里不再有效 let x = 5; // x 进入作用域 makes_copy(x); // x 应该移动函数里， // 但 i32 是 Copy 的，所以在后面可继续使用 x&#125; // 这里, x 先移出了作用域，然后是 s。但因为 s 的值已被移走， // 所以不会有特殊操作fn takes_ownership(some_string: String) &#123; // some_string 进入作用域 println!(&quot;&#123;&#125;&quot;, some_string);&#125; // 这里，some_string 移出作用域并调用 `drop` 方法。占用的内存被释放fn makes_copy(some_integer: i32) &#123; // some_integer 进入作用域 println!(&quot;&#123;&#125;&quot;, some_integer);&#125; // 这里，some_integer 移出作用域。不会有特殊操作 返回值： 12345678910111213141516171819202122232425fn main() &#123; let s1 = gives_ownership(); // gives_ownership 将返回值 // 移给 s1 let s2 = String::from(&quot;hello&quot;); // s2 进入作用域 let s3 = takes_and_gives_back(s2); // s2 被移动到 // takes_and_gives_back 中, // 它也将返回值移给 s3&#125; // 这里, s3 移出作用域并被丢弃。s2 也移出作用域，但已被移走， // 所以什么也不会发生。s1 移出作用域并被丢弃fn gives_ownership() -&gt; String &#123; // gives_ownership 将返回值移动给 // 调用它的函数 let some_string = String::from(&quot;hello&quot;); // some_string 进入作用域. some_string // 返回 some_string 并移出给调用的函数&#125;// takes_and_gives_back 将传入字符串并返回该值fn takes_and_gives_back(a_string: String) -&gt; String &#123; // a_string 进入作用域 a_string // 返回 a_string 并移出给调用的函数&#125; 移出给调用的函数 引用(Ref)与解引用(Deref)获取变量的引用，称之为借用(borrowing) 1234567fn main() &#123; let x = 5; let y = &amp;x; assert_eq!(5, x); assert_eq!(5, *y);&#125; 常规引用是一个指针类型 &amp;x 获取引用 *y 解引用 自动 解引用(deref) 机制Rust 有自动解引用机制 123456fn main() &#123; let s = &quot;hello&quot;; println!(&quot;length: &#123;&#125;&quot;, s.len()); println!(&quot;length: &#123;&#125;&quot;, (&amp;s).len()); println!(&quot;length: &#123;&#125;&quot;, (&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;s).len());&#125; Rust编译器帮我们做了隐式的 deref 调用，当它找不到这个成员方法的时候，它会自动尝试使用deref方法后再找该方法，一直循环下去。编译器在 &amp;&amp;&amp;str 类型里面找不到len方法，就尝试将它deref，变成 &amp;&amp;str 类型，再寻找len方法，还是没找到，那么继续deref，变成 &amp;str ，直到找到len方法，于是就调用这个方法。 以下写法在编译器看起来是一样的： 1234567891011121314use std::rc::Rc;use std::ops::Deref;fn main() &#123; let s = Rc::new(String::from(&quot;hello&quot;)); println!(&quot;length: &#123;&#125;&quot;, s.len()); println!(&quot;length: &#123;&#125;&quot;, s.deref().len()); println!(&quot;length: &#123;&#125;&quot;, s.deref().deref().len()); println!(&quot;length: &#123;&#125;&quot;, (*s).len()); println!(&quot;length: &#123;&#125;&quot;, (&amp;*s).len()); println!(&quot;length: &#123;&#125;&quot;, (&amp;**s).len());&#125; 当自动解引用发生冲突时，就需要手动解引用了 可变引用 与 不可变引用默认的引用是不可变的， 可变引用： 12let mut s = String::from(&quot;hello&quot;);let r1 = &amp;mut s; 需注意 同一作用域，特定数据只能有一个可变引用 可变引用与不可变引用不能同时存在 NLL 引用的作用域引用的作用域 s 从创建开始，一直持续到它最后一次使用的地方，这个跟变量的作用域有所不同 123456789101112fn main() &#123; let mut s = String::from(&quot;hello&quot;); let r1 = &amp;s; let r2 = &amp;s; println!(&quot;&#123;&#125; and &#123;&#125;&quot;, r1, r2); // 新编译器中，r1,r2作用域在这里结束 let r3 = &amp;mut s; println!(&quot;&#123;&#125;&quot;, r3);&#125; // 老编译器中，r1、r2、r3作用域在这里结束 // 新编译器中，r3作用域在这里结束 这种编译器优化行为，Rust 专门起了一个名字 —— Non-Lexical Lifetimes(NLL) ：专门用于找到某个引用在作用域 &#125; 结束前就不再被使用的代码位置。 悬垂引用(Dangling References)指针指向某个值后，这个值被释放掉了，而指针仍然存 在 Rust 中，编译器可以确保数据不会在引用结束前被释放，要想释放数据，必须先停止其引用的使用。","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"},{"name":"基本语法","slug":"Devolop/Main/Rust/基本语法","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"}],"tags":[]},{"title":"Logback日志","slug":"Devolop/Language/Java SE/测试维护/Logback日志","date":"2023-09-14T08:12:50.057Z","updated":"2023-10-07T08:49:14.420Z","comments":true,"path":"page/Devolop/Language/Java SE/测试维护/Logback日志.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/%E6%B5%8B%E8%AF%95%E7%BB%B4%E6%8A%A4/Logback%E6%97%A5%E5%BF%97.html","excerpt":"","text":"Maven配置12345678910111213141516171819202122&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;2.0.9&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-core&lt;/artifactId&gt; &lt;version&gt;1.4.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-access&lt;/artifactId&gt; &lt;version&gt;1.4.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;version&gt;1.4.5&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 使用123456789101112131415package com.logback;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class Logback &#123; public static final Logger log=LoggerFactory.getLogger(&quot;logback&quot;); public static void main(String[] args) &#123; // write your code here logger.debug(&quot;------&gt;debug log&quot;); logger.info(&quot;------&gt;info log&quot;); logger.error(&quot;------&gt;error log&quot;); &#125;&#125; lombok 提供了一个注解，@Slf4j 可替代 public static final Logger log=LoggerFactory.getLogger(&quot;logback&quot;); 123456@Slf4jpublic class Logback &#123; public static void main(String[] args) &#123; logger.info(&quot;------&gt;info log&quot;); &#125;&#125; logback.xml配置文件文件位置在：resource/logback.xml 参考样例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139&lt;!-- 级别从高到低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL --&gt;&lt;!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 --&gt;&lt;!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 --&gt;&lt;!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 --&gt;&lt;!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;&lt;!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt; &lt;!-- 动态日志级别 --&gt; &lt;jmxConfigurator /&gt; &lt;!-- 定义日志文件 输出位置 --&gt; &lt;!-- &lt;property name=&quot;log_dir&quot; value=&quot;C:/test&quot; /&gt;--&gt; &lt;property name=&quot;log_dir&quot; value=&quot;./logs&quot; /&gt; &lt;!-- 日志最大的历史 30天 --&gt; &lt;property name=&quot;maxHistory&quot; value=&quot;30&quot; /&gt; &lt;!-- ConsoleAppender 控制台输出日志 --&gt; &lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; &lt;encoder&gt; &lt;pattern&gt; &lt;!-- 设置日志输出格式 --&gt; %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger - %msg%n &lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- ERROR级别日志 --&gt; &lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender --&gt; &lt;appender name=&quot;ERROR&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;!-- 过滤器，只记录WARN级别的日志 --&gt; &lt;!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 --&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;!-- 设置过滤级别 --&gt; &lt;level&gt;ERROR&lt;/level&gt; &lt;!-- 用于配置符合过滤条件的操作 --&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt; &lt;!-- 用于配置不符合过滤条件的操作 --&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt; &lt;/filter&gt; &lt;!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 --&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;!--日志输出位置 可相对、和绝对路径 --&gt; &lt;fileNamePattern&gt; $&#123;log_dir&#125;/error/%d&#123;yyyy-MM-dd&#125;/error-log.log &lt;/fileNamePattern&gt; &lt;!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且&lt;maxHistory&gt;是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 --&gt; &lt;maxHistory&gt;$&#123;maxHistory&#125;&lt;/maxHistory&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;pattern&gt; &lt;!-- 设置日志输出格式 --&gt; %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger - %msg%n &lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- WARN级别日志 appender --&gt; &lt;appender name=&quot;WARN&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;!-- 过滤器，只记录WARN级别的日志 --&gt; &lt;!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 --&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;!-- 设置过滤级别 --&gt; &lt;level&gt;WARN&lt;/level&gt; &lt;!-- 用于配置符合过滤条件的操作 --&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt; &lt;!-- 用于配置不符合过滤条件的操作 --&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt; &lt;/filter&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;!--日志输出位置 可相对、和绝对路径 --&gt; &lt;fileNamePattern&gt;$&#123;log_dir&#125;/warn/%d&#123;yyyy-MM-dd&#125;/warn-log.log&lt;/fileNamePattern&gt; &lt;maxHistory&gt;$&#123;maxHistory&#125;&lt;/maxHistory&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- INFO级别日志 appender --&gt; &lt;appender name=&quot;INFO&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;level&gt;INFO&lt;/level&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt; &lt;/filter&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;$&#123;log_dir&#125;/info/%d&#123;yyyy-MM-dd&#125;/info-log.log&lt;/fileNamePattern&gt; &lt;maxHistory&gt;$&#123;maxHistory&#125;&lt;/maxHistory&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- DEBUG级别日志 appender --&gt; &lt;appender name=&quot;DEBUG&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;level&gt;DEBUG&lt;/level&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt; &lt;/filter&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;$&#123;log_dir&#125;/debug/%d&#123;yyyy-MM-dd&#125;/debug-log.log&lt;/fileNamePattern&gt; &lt;maxHistory&gt;$&#123;maxHistory&#125;&lt;/maxHistory&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- TRACE级别日志 appender --&gt; &lt;appender name=&quot;TRACE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;level&gt;TRACE&lt;/level&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt; &lt;/filter&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;$&#123;log_dir&#125;/trace/%d&#123;yyyy-MM-dd&#125;/trace-log.log&lt;/fileNamePattern&gt; &lt;maxHistory&gt;$&#123;maxHistory&#125;&lt;/maxHistory&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- root级别 DEBUG --&gt; &lt;root&gt; &lt;!-- 打印debug级别日志及以上级别日志 --&gt; &lt;level value=&quot;debug&quot; /&gt; &lt;!-- 控制台输出 --&gt; &lt;appender-ref ref=&quot;console&quot; /&gt; &lt;!-- 文件输出 --&gt; &lt;appender-ref ref=&quot;ERROR&quot; /&gt; &lt;appender-ref ref=&quot;INFO&quot; /&gt; &lt;appender-ref ref=&quot;WARN&quot; /&gt; &lt;appender-ref ref=&quot;DEBUG&quot; /&gt; &lt;appender-ref ref=&quot;TRACE&quot; /&gt; &lt;/root&gt;&lt;/configuration&gt; Logger1public void info(String format, Object... argArray) 1log.info(&quot;分页查询，参数 page:&#123;&#125;,pageSize&#123;&#125;&quot;, page, pageSize);","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"测试维护","slug":"Devolop/Language/Java-SE/测试维护","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/%E6%B5%8B%E8%AF%95%E7%BB%B4%E6%8A%A4/"}],"tags":[]},{"title":"开发规范","slug":"Devolop/Main/项目开发/开发规范","date":"2023-09-13T13:56:13.781Z","updated":"2023-09-13T14:14:01.956Z","comments":true,"path":"page/Devolop/Main/项目开发/开发规范.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.html","excerpt":"","text":"Restful 统一响应结果","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"项目开发","slug":"Devolop/Main/项目开发","permalink":"https://rchangl.github.io/categories/Devolop/Main/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"Mapper","slug":"Devolop/后端/Spring Boot/三层架构/Mapper","date":"2023-09-13T13:45:34.419Z","updated":"2023-10-10T07:57:49.337Z","comments":true,"path":"page/Devolop/后端/Spring Boot/三层架构/Mapper.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Spring%20Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/Mapper.html","excerpt":"","text":"注解123@Mapperpublic interface DeptMapper &#123;&#125; 参数占位符1select * from emp where name = #&#123;name&#125; xml 文件方式编写SQL位置： resource/和Mapper.java一样的目录结构/同名.xml 入门_MyBatis中文网 ：这里可以找到xml样例： 1234567891011&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.rc.springdemo1.mapper.EmpMapper&quot;&gt; &lt;select id=&quot;list&quot; resultType=&quot;com.rc.springdemo1.pojo.Emp&quot;&gt; select * from emp &lt;/select&gt;&lt;/mapper&gt; namespace 属性对应 Mapper.java 的位置 &lt;select 的属性也与对应的方法相同 语句结束后不加分号 标签 if ：条件判断 test里为条件判断，可直接使用变量 &lt;where ：判断是否需要where，后面的代码是否需要删除 and or &lt;set ：功能类似与where标签 1234567891011121314151617&lt;!-- 条件查询--&gt; &lt;select id=&quot;list&quot; resultType=&quot;com.rc.springdemo1.pojo.Emp&quot;&gt; select * from emp &lt;where&gt; &lt;if test=&quot;name != null&quot;&gt; name like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;) &lt;/if&gt; &lt;if test=&quot;name != null&quot;&gt; and gender = #&#123;gender&#125; &lt;/if&gt; &lt;if test=&quot;name != null&quot;&gt; and entrydate between #&#123;begin&#125; and #&#123;end&#125; &lt;/if&gt; &lt;/where&gt; order by update_time desc &lt;/select&gt; foreach123456789&lt;!-- 批量删除员工--&gt;&lt;delete id=&quot;delete&quot;&gt; delete from emp where id in &lt;foreach collection=&quot;ids&quot; item=&quot;id&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot;&gt; #&#123;id&#125; &lt;/foreach&gt;&lt;/delete&gt; collection 待遍历的内容，与参数名相同 item 遍历出来的对象，命名可自定义 separator 分隔符 open 开始前添加 close 结束后添加 注入对象 @Autowired在 Service 中 12@Autowiredprivate DeptMapper deptMapper; 数据库操作注解形式查询操作 @Select(&quot;&quot;)在方法上注解 @Select(&quot;&quot;) 123456@Mapperpublic interface DeptMapper &#123; @Select(&quot;select * from dept&quot;) List&lt;Dept&gt; list();&#125; 注解式SQL 参数输入1public delete #&#123;&#125; 如果是对象，直接写属性名 返回结果如果没有查询结果，则返回 null","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Spring Boot","slug":"Devolop/后端/Spring-Boot","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/"},{"name":"三层架构","slug":"Devolop/后端/Spring-Boot/三层架构","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"}],"tags":[]},{"title":"Service","slug":"Devolop/后端/Spring Boot/三层架构/Service","date":"2023-09-13T13:42:15.428Z","updated":"2023-09-14T09:23:38.796Z","comments":true,"path":"page/Devolop/后端/Spring Boot/三层架构/Service.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Spring%20Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/Service.html","excerpt":"","text":"注解 @Service交给 IOC 成为 Bean 使用接口形式进行多个 Bean 的管理： 注解在 Service 实例中 1234@Servicepublic class EmpServiceImpl implements EmpService &#123;&#125; 注入对象 @AutowiredController 中 1234public class DeptController &#123; @Autowired private DeptService deptService; // 这里类型是接口类型 必须保证有对应的 Bean 实例","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Spring Boot","slug":"Devolop/后端/Spring-Boot","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/"},{"name":"三层架构","slug":"Devolop/后端/Spring-Boot/三层架构","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"}],"tags":[]},{"title":"Controller","slug":"Devolop/后端/Spring Boot/三层架构/Controller","date":"2023-09-12T08:35:27.135Z","updated":"2023-10-09T07:03:26.906Z","comments":true,"path":"page/Devolop/后端/Spring Boot/三层架构/Controller.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Spring%20Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/Controller.html","excerpt":"","text":"注解@RestController 相当于 @Controller + @ResponseBody @Controller 标注为 Controller 1234@RestControllerpublic class SimpleParamController &#123;&#125; RequestMapping 请求与响应处理1234567@RestControllerpublic class HelloController &#123; @RequestMapping(&quot;/hello&quot;) public String hello() &#123; return &quot;Hello World&quot;; &#125;&#125; 注解的属性： 默认 value url method 限制请求方式 值 RequestMethod.GET Mapping 衍生注解1234@GetMapping(&quot;/url&quot;)@PostMapping(&quot;/url&quot;)@PutMapping(&quot;/url&quot;)@DeleteMapping(&quot;/url&quot;) 公共路径可提取到类上1234567891011121314151617181920212223242526@RestController@RequestMapping(&quot;/depts&quot;)public class DeptController &#123; @Autowired private DeptService deptService; @GetMapping public Result list() &#123; List&lt;Dept&gt; deptList = deptService.list(); return Result.success(deptList); &#125; @DeleteMapping(&quot;/&#123;id&#125;&quot;) public Result delete(@PathVariable Integer id) &#123; deptService.delete(id); return Result.success(); &#125; @PostMapping public Result delete(@RequestBody Dept dept) &#123; deptService.add(dept); return Result.success(); &#125;&#125; 请求接收原始方式获取参数12345678910111213@RestControllerpublic class SimpleParamController &#123; @RequestMapping(&quot;/simpleParam&quot;) public String simpleParam(HttpServletRequest request) &#123; // 获取请求参数 String name = request.getParameter(&quot;name&quot;); String ageStr = request.getParameter(&quot;age&quot;); int age = Integer.parseInt(ageStr); System.out.println(name + &quot;:&quot; + age); return &quot;OK&quot;; &#125;&#125; 简单参数请求参数名与函数的参数名相同 12345@RequestMapping(&quot;/simpleParam&quot;)public String simpleParam(String name, Integer age) &#123; System.out.println(name + &quot;:&quot; + age); return &quot;OK&quot;;&#125; @RequestParam 请求参数处理（限制、映射、默认值）name属性，映射参数名如果参数名未对应上，值为null，但不报错 @RequestParam(name=&quot;&quot;) 映射参数名，使用属性name或 value都可以 12345678@RequestMapping(&quot;/simpleParam&quot;)public String simpleParam( @RequestParam(name=&quot;name&quot;)String username, Integer age ) &#123; System.out.println(name + &quot;:&quot; + age); return &quot;OK&quot;;&#125; @RequestParam 有一个默认属性 required=turn ，不传入参数会报错 defaultValue ，设置默认值annotation属性值类型为字符串，最后会自行转换为参数类型 路径参数 @PathVariable注解 @PathVariable 获取路径参数， 路径中用 &#123;参数名&#125; 标注参数 12345@RequestMapping(&quot;/pathParam/&#123;id&#125;&quot;)public String pathParam(@PathVariable Integer id) &#123; System.out.println(id); return &quot;OK&quot;;&#125; Mapping的SQL annotation处： 1&quot;#&#123;paraName&#125;&quot; JSON 参数 @RequestBody用 实体对象 接收参数：键名于对象名保持一致，嵌套的也是如此 注解 @RequestBody 解析JSON 12345@RequestMapping(&quot;/jsonParam&quot;)public String jsonParam(@RequestBody User user) &#123; System.out.println(user); return &quot;OK&quot;;&#125; 日期参数123456@RequestMapping(&quot;/dateParam&quot;)public String dateParam(@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)LocalDateTime updataTime) &#123; System.out.println(updataTime); return &quot;OK&quot;;&#125; 注解 @DateTimeFormat 指定日期参数格式 文件接收对象 MultipartFile 多文件处理 配置： 常见方法： 前端发送的响应类型：multipart/form-data 响应String12345@RequestMappingpublic String hello()&#123; System.out.println(&quot;Hello, World ~&quot;); return &quot;Hello, World ~&quot;;&#125; 直接响应字符串 响应对象，处理为JSON @ResponseBody@ResponseBody 响应数据，返回的数据（对象）转换为 JSON 数据，发送给前端 如果返回值是字符串，那么直接将字符串写到客户端；如果是一个对象，会将对象转化为json串，然后写到客户端。 1234567@RequestMapping(&quot;/getAddr&quot;)public Address getAddr() &#123; Address addr = new Address(); addr.setProvince(&quot;广东&quot;); addr.setCity(&quot;深圳&quot;); return addr;&#125; 转换成 JSON 后返回： 1&#123;&quot;province&quot;:&quot;广东&quot;,&quot;city&quot;:&quot;深圳&quot;&#125; 列表12345678910111213141516@RequestMapping(&quot;/listAddr&quot;)public List&lt;Address&gt; listAddr() &#123; List&lt;Address&gt; list = new ArrayList&lt;&gt;(); Address addr = new Address(); addr.setProvince(&quot;广东&quot;); addr.setCity(&quot;深圳&quot;); Address addr2 = new Address(); addr2.setProvince(&quot;广西&quot;); addr2.setCity(&quot;北海&quot;); list.add(addr); list.add(addr2); return list;&#125; 返回 JSON ，最外层是数组： 1[&#123;&quot;province&quot;:&quot;广东&quot;,&quot;city&quot;:&quot;深圳&quot;&#125;,&#123;&quot;province&quot;:&quot;广西&quot;,&quot;city&quot;:&quot;北海&quot;&#125;] 统一响应结果响应数据包装成一个 Result 类，以此统一 1234567891011121314public class Result &#123; // 响应码，1 成功， 0 失败 private Integer code; // 提示信息 private String msg; // 返回的数据 private Object data; // 无参构造器 有参构造器 // Getter and Setter // 可以写 一些静态方法 方便快速创建 Result 对象&#125; 返回： 12345&#123; &quot;code&quot;:1, &quot;msg&quot;:&quot;操作成功&quot;, &quot;data&quot;:...&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Spring Boot","slug":"Devolop/后端/Spring-Boot","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/"},{"name":"三层架构","slug":"Devolop/后端/Spring-Boot/三层架构","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"}],"tags":[]},{"title":"函数","slug":"Devolop/Main/Rust/基本语法/函数","date":"2023-09-12T05:14:02.201Z","updated":"2023-09-12T05:29:26.048Z","comments":true,"path":"page/Devolop/Main/Rust/基本语法/函数.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E5%87%BD%E6%95%B0.html","excerpt":"","text":"123fn add(i: i32, j: i32) -&gt; i32 &#123; i + j&#125; 每一个函数参数都要标识出它的具体类型 返回值：最后一条表达式的返回值，当然我们也可以使用 return 提前返回 12345678fn plus_or_minus(x:i32) -&gt; i32 &#123; if x &gt; 5 &#123; return x - 5 &#125; x + 5&#125; 函数没有返回值，那么返回一个 () 123456789// 隐式返回 ()fn report&lt;T: Debug&gt;(item: T) &#123; println!(&quot;&#123;:?&#125;&quot;, item);&#125;// 显式返回 ()fn clear(text: &amp;mut String) -&gt; () &#123; *text = String::from(&quot;&quot;);&#125; 永不返回的发散函数 !用 ! 作函数返回类型的时候，表示该函数永不返回( diverge function ) 这种语法往往用做会导致程序崩溃的函数： 123fn dead_end() -&gt; ! &#123; panic!(&quot;你已经到了穷途末路，崩溃吧！&quot;);&#125; 无限循环函数： 12345fn forever() -&gt; ! &#123; loop &#123; //... &#125;;&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"},{"name":"基本语法","slug":"Devolop/Main/Rust/基本语法","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"}],"tags":[]},{"title":"数据类型","slug":"Devolop/Main/Rust/基本语法/数据类型","date":"2023-09-11T09:46:50.071Z","updated":"2023-09-20T01:28:12.449Z","comments":true,"path":"page/Devolop/Main/Rust/基本语法/数据类型.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","excerpt":"","text":"基本类型 数值类型: 有符号整数 (i8, i16, i32, i64, isize)、 无符号整数 (u8, u16, u32, u64, usize) 、 浮点数 (f32, f64)、以及有理数、复数 字符串： 字符串字面量和字符串切片 &amp;str 布尔类型： true和 false 字符类型: 表示单个 Unicode 字符，存储为 4 个字节 单元类型: 即 () ，其唯一的值也是 () 发散函数返回类型： ! 执行到这时报错 基本类型 - Rust语言圣经(Rust Course) 复合类型 字符串 String 字符串切片的类型标识是 &amp;str （ &amp;str 是切片） 字符串字面量类型是切片（&quot;let s: &amp;str = &quot;Hello, world!&quot;; &quot;） UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4) 元组 let tup = (500, 6.4, 1); 定义 let (x, y, z) = tup; 模式匹配结构 tup.0; tup.1; tup.2 访问元组 结构体 枚举 数组","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"},{"name":"基本语法","slug":"Devolop/Main/Rust/基本语法","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"}],"tags":[]},{"title":"基本语法","slug":"Devolop/Main/Rust/基本语法/基本语法","date":"2023-09-11T08:28:28.916Z","updated":"2023-09-19T01:57:48.855Z","comments":true,"path":"page/Devolop/Main/Rust/基本语法/基本语法.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html","excerpt":"","text":"入口函数123fn main()&#123; // 代码&#125; 声明变量1234567891011121314151617181920212223n main() &#123; // 编译器会默认根据a的值为a推断类型：i32，有符号32位整数 let a = 10; // 手动指定类型 let b: i32 = 20; // 可在数值后带上类型 let b1 = 30i32; // mut 表示可变的，缩写自 mutable let mut c = 30i32; // 数值与类型可添加下划线，增加可读性 let d = 30_i32; // 以返回值作为变量的值，（返回值也可做为参数） let e = add(add(a, b), add(c, d));&#125;fn add(i: i32, j: i32) -&gt; i32 &#123; i + j&#125; 变量可变性变量默认不可变 可变变量： 123456fn main() &#123; let mut x = 5; println!(&quot;The value of x is: &#123;&#125;&quot;, x); x = 6; println!(&quot;The value of x is: &#123;&#125;&quot;, x);&#125; print 宏 println!()Rust 中 print 用宏实现 123// !代表宏调用，区别于函数它返回的是宏定义的代码块// &#123;&#125; 是占位符，相当于python中的 %s %d ，自动推导类型println!(&quot;result is &#123;&#125;&quot;, a); 未使用的变量 警告变量未使用会有警告，如果要忽略警告，加上 _ 在开头 1let _x = 5; 变量解构从一个相对复杂的变量中，匹配出该变量的一部分内容： 1234let (a, mut b): (bool,bool) = (true, false); // 定义println!(&quot;a = &#123;:?&#125;, b = &#123;:?&#125;&quot;, a, b); // 解构使用b = true; // 更改值assert_eq!(a, b); // 更改后变为相等 解构式赋值（Rust 1.59 版本后），可以在赋值语句的左式中使用元组、切片和结构体模式： 1234567891011121314struct Struct &#123; e: i32&#125;fn main() &#123; let (a, b, c, d, e); (a, b) = (1, 2); // _ 代表匹配一个值，但是我们不关心具体的值是什么，因此没有使用一个变量名而是使用了 _ [c, .., d, _] = [1, 2, 3, 4, 5]; Struct &#123; e, .. &#125; = Struct &#123; e: 5 &#125;; assert_eq!([1, 2, 1, 4, 5], [a, b, c, d, e]);&#125; 常量const 定义 12// 数值使用 下划线 提高可读性const MAX_POINTS: u32 = 100_000; 常量可以在任意作用域内声明，包括全局作用域 变量遮蔽(shadowing)后面声明的变量会遮蔽掉前面声明 1234// 字符串类型let spaces = &quot; &quot;;// usize数值类型let spaces = spaces.len(); 语句和表达式语句（statement）和表达式（expression） 表达式没有分号结尾，表达式总要返回值 表达式如果不返回任何值，会隐式地返回一个 () let 是语句，所以 let b = (let a = 8); 是错的，但是 let 作为表达式已经是试验功能了，在将来或许能够这样使用 序列Range1231..51..=5 切片引用集合中部分连续的元素序列 12345let s = String::from(&quot;hello world&quot;);let hello = &amp;s[0..5];let world = &amp;s[6..11]; [开始索引..终止索引] 左闭右开区间 字符串切片： 1234567891011121314let s = String::from(&quot;hello&quot;);// 从零开始let slice = &amp;s[0..2];let slice = &amp;s[..2];// 截取至末尾let len = s.len();let slice = &amp;s[4..len];let slice = &amp;s[4..];// 截取全段let slice = &amp;s[0..len];let slice = &amp;s[..]; 数组切片： 12345let a = [1, 2, 3, 4, 5];let slice = &amp;a[1..3];assert_eq!(slice, &amp;[2, 3]);","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"},{"name":"基本语法","slug":"Devolop/Main/Rust/基本语法","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"}],"tags":[]},{"title":"toml配置","slug":"Devolop/Main/Rust/项目配置管理/toml配置","date":"2023-09-07T16:35:33.975Z","updated":"2023-09-29T12:56:00.349Z","comments":true,"path":"page/Devolop/Main/Rust/项目配置管理/toml配置.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/toml%E9%85%8D%E7%BD%AE.html","excerpt":"","text":"1234[package]name = &quot;world_hello&quot;version = &quot;0.1.0&quot;edition = &quot;2021&quot; edition 字段定义了我们使用的 Rust 大版本。 12345[dependencies]rand = &quot;0.3&quot;hammer = &#123; version = &quot;0.5.0&quot;&#125;color = &#123; git = &quot;https://github.com/bjz/color-rs&quot; &#125;geometry = &#123; path = &quot;crates/geometry&quot; &#125; Cargo.toml 和 Cargo.lockcargo 的核心文件，它的所有活动均基于此二者。 Cargo.lock根据同一项目的 toml 文件生成的项目依赖详细清单，一般不用修改它 Cargo.toml项目数据描述文件 package 部份配置： 1234[package]name = &quot;world_hello&quot;version = &quot;0.1.0&quot;edition = &quot;2021&quot; name 字段定义了项目名称， version 字段定义当前版本，新项目默认是 0.1.0， edition 字段定义了我们使用的 Rust 大版本。 Rust 版本详解 dependencies 定义项目依赖： 12345[dependencies]rand = &quot;0.3&quot;hammer = &#123; version = &quot;0.5.0&quot;&#125;color = &#123; git = &quot;https://github.com/bjz/color-rs&quot; &#125;geometry = &#123; path = &quot;crates/geometry&quot; &#125; 官方仓库： https://crates.io/ Cargo 依赖管理","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"},{"name":"项目配置管理","slug":"Devolop/Main/Rust/项目配置管理","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"}],"tags":[]},{"title":"环境配置","slug":"Devolop/Main/Rust/项目配置管理/环境配置","date":"2023-09-07T16:24:05.879Z","updated":"2023-09-11T04:53:29.784Z","comments":true,"path":"page/Devolop/Main/Rust/项目配置管理/环境配置.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html","excerpt":"","text":"msvc 环境安装 Microsoft C++ Build Tools，勾选安装 C++ 环境即可。 msvc 命令行程序需要手动添加到环境变量中 %Visual Studio 安装位置%\\VC\\Tools\\MSVC\\%version%\\bin\\Hostx64\\x64（请自行替换其中的 %Visual Studio 安装位置%、%version% 字段） Rust 镜像网址（字节跳动）： https://rsproxy.cn/ rustup设置将 RUSTUP_DIST_SERVER与 RUSTUP_UPDATE_ROOT增加到系统环境变量。 12345678910111213# 字节跳动RUSTUP_DIST_SERVER=https://rsproxy.cnRUSTUP_UPDATE_ROOT=https://rsproxy.cn/rustup# 中国科学技术大学RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-staticRUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup# 清华大学RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup# 上海交通大学RUSTUP_DIST_SERVER=https://mirrors.sjtug.sjtu.edu.cn/rust-static/ cargo设置.cargo 目录下创建文件 config ，文件内容见： https://rsproxy.cn/ 其他的教程Rust 圣经： https://course.rs/first-try/slowly-downloading.html 环境变量， rust cargo 位置设置安装路径。默认它会把Rust装到你的&#x2F;.rustup 里，依赖库下载到&#x2F;.cargo 里。需要修改的话，设置环境变量 RUSTUP_HOME 和 CARGO_HOME 分别修改这两个值（例如D:\\rustup和D:\\cargo）。","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"},{"name":"项目配置管理","slug":"Devolop/Main/Rust/项目配置管理","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"}],"tags":[]},{"title":"命令","slug":"Devolop/Main/Rust/项目配置管理/终端命令","date":"2023-09-07T14:37:26.635Z","updated":"2023-09-11T08:57:41.875Z","comments":true,"path":"page/Devolop/Main/Rust/项目配置管理/终端命令.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4.html","excerpt":"","text":"rustup更新 Rust: rustup update cargo创建项目： cargo new world_hello 运行项目： cargo run release 模式 cargo run --release cargo build --release 检查代码： cargo check 手动编译 cargo build ./target/debug/world_hello","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"},{"name":"项目配置管理","slug":"Devolop/Main/Rust/项目配置管理","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"}],"tags":[]},{"title":"Linux 常用命令","slug":"Devolop/Main/Linux和项目环境/Linux常用命令","date":"2023-09-07T12:29:16.770Z","updated":"2023-09-30T14:00:05.942Z","comments":true,"path":"page/Devolop/Main/Linux和项目环境/Linux常用命令.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Linux%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html","excerpt":"","text":"开关机 重启命令 ： 1、reboot 2、shutdown -r now 立刻重启 3、shutdown -r 10 过10分钟自动重启 4、shutdown -r 20:35 在时间为20:35时候重启 如果是通过shutdown命令设置重启的话，可以用shutdown -c命令取消重启 关机命令 ： 1、halt 立刻关机（一般加-p 关闭电源） 2、poweroff 立刻关机 3、shutdown -h now 立刻关机 4、shutdown -h 10 10分钟后自动关机 如果是通过shutdown命令设置关机的话，可以用shutdown -c命令取消关机 服务管理systemctl start docker 启动docker服务 sudo systemctl daemon-reload Copy curlcurl is a free and open source software that allows you to transfer data with URLs across various protocols and devices. 免费开源软件，通过各种协议获取 URL数据 软件dpkg -l | grep docker 搜索相关","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Linux和项目环境","slug":"Devolop/Main/Linux和项目环境","permalink":"https://rchangl.github.io/categories/Devolop/Main/Linux%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/"}],"tags":[]},{"title":"论文写作","slug":"考试/论文写作","date":"2023-09-07T00:35:05.792Z","updated":"2023-09-07T00:41:04.897Z","comments":true,"path":"page/考试/论文写作.html","link":"","permalink":"https://rchangl.github.io/page/%E8%80%83%E8%AF%95/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C.html","excerpt":"","text":"选题 课题 针对学科 论题 针对命题，与选题统一层次 标题 论文的题目","categories":[{"name":"考试","slug":"考试","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/"}],"tags":[]},{"title":"计算机网络","slug":"考试/计算机网络","date":"2023-09-06T00:32:23.995Z","updated":"2023-09-11T02:04:47.166Z","comments":true,"path":"page/考试/计算机网络.html","link":"","permalink":"https://rchangl.github.io/page/%E8%80%83%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html","excerpt":"","text":"分层模型OSI会话层：会话管理 TCP&#x2F;IP数据通信奈氏准则理想低通信道的最高码元传输速率 &#x3D; 2W Baud W：信道的频率带宽（单位为Hz） W：信道的频率带宽（单位为Hz） 波特率码元传输速率 Baud","categories":[{"name":"考试","slug":"考试","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/"}],"tags":[]},{"title":"工作上班","slug":"劳动/劳动与法律/工作上班","date":"2023-09-04T14:31:05.920Z","updated":"2023-10-09T12:22:58.334Z","comments":true,"path":"page/劳动/劳动与法律/工作上班.html","link":"","permalink":"https://rchangl.github.io/page/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/%E5%B7%A5%E4%BD%9C%E4%B8%8A%E7%8F%AD.html","excerpt":"","text":"工时制和包薪制标准工时制，上班时间 一个月21.75天 包薪制，合法，协商一致 多数是包薪制，只有明确说明是标准工时制的 才是工时制 扣押身份证公安机关职权范围 盖章公章 和 人力资源章 不包括合同专用章（这是公司对外签署业务用的） 打卡记录 工作记录保存好打卡记录、工作记录 如果自己没有打卡记录，公司提供了打卡记录，则哪怕否认了公司的记录，仍然可能以公司的记录为准 加班相关周末加班，要保留证据，否则企业可隐藏周末工资并否认 日常加班，须明确证明是加班了，如有上司明确说明的录音","categories":[{"name":"劳动","slug":"劳动","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/"},{"name":"劳动与法律","slug":"劳动/劳动与法律","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/"}],"tags":[]},{"title":"马原","slug":"考试/马原","date":"2023-09-04T14:20:35.896Z","updated":"2023-09-06T06:43:52.808Z","comments":true,"path":"page/考试/马原.html","link":"","permalink":"https://rchangl.github.io/page/%E8%80%83%E8%AF%95/%E9%A9%AC%E5%8E%9F.html","excerpt":"","text":"选择题 哲学是 系统化、理论化的世界观 哲学基本问题 第一方面，思维和存在何者是第一性？ 唯物主义 唯心主义 思维能否认识或正确认识存在？ 可知论 不可知论 唯物辩证主义 唯物辩证法 三大规律 核心：对立统一规律 量变质变规律 否定之否定规律：实现对立面的统一，使矛盾得到解决 四为四对思维方法：“归纳和演绎、分析和综合、抽象和具体、逻辑和历史”。 五大范畴（基本范畴）： 内容和形式 现象和本质 原因和结果 可能性和现实性 必然性和偶然性 特点：普遍又特殊 规律：否定之否定 总特征：发展和联系的观点 联系：事物内部各要素之间和事物之间的相互影响、相互制约、相互作用的 联系的特点： 客观性 普遍性 任何事物都具有内在的结构性 任何事物都不能孤立存在，都同其它事物处在一定的相互联系之中 整个世界是相互联系的统一整体，每一个事物都是世界普遍联系中的一个成分和环境，并通过它表现出联系的普遍性。世界的普遍联系是通过“中介”来实现的 多样性——各种联系 条件性 条件对事物发展和人的活动有支持或制约作用 条件是可以改变的 改变和创造条件不是任意的，必须尊重事物发展的客观规律发展 发展： 发展的内涵：一切形式的变化就是运动，运动变化的基本趋势是发展 发展的实质：发展是前进向上的运动，发展的实质是新事物的产生和旧事物的灭亡 认识论 认识的本质是 主体在实践基础上对客体的能动反映 两个 突出特点： 一是把实践的观点引入认识论。二是把辩证法应用于反映论考察认识的发展过程。 世界 世界的二重化 人的实践活动和自然界 世界的物质统一性原理 世界的统一性在于它的物质性——世界统一的基础是物质，而不是某种“始基”物质 运动是物质的根本属性和存在方式。 矛盾 基本属性或基本性质 同一性和斗争性 实践的特征：实践是人类（独有的）能动的（有目的的）改造世界的客观物质性活动 实践 三个基本特征 直接现实性： 可以把人脑中观念的存在变为现实的存在。 自觉能动性： 与动物本能的、被动的适应性活动不同，人的实践活动是一种有意识、有目的的活动。 社会历史性： 作为实践主体的人总是处在一定社会关系中，任何人的活动都离不开与社会的联系。实践的内容、性质、范围、水平以及方式都受一定社会历史条件的制约。 (客观实在性) 社会 社会生活的实践本质 （不是主体） 社会意识反作用于社会存在（相对独立） 真理 真理是标志主观和客观相符合的哲学范畴，是对客观事物及其规律的正确反映 真理的检验标准——实践 “真理的本性”——主客观相符合（主观符合客观） 实践具有“直接现实性”的特点 价值 基本特性 主体性 客观性 多维性 社会历史性 货币的基本职能 五种基本职能 价值尺度、流通手段、贮藏手段、支付手段、（世界货币） 贮藏手段：退出流通领域作为社会财富的一般代表被保存起来的职能 意识活动 特点 目的性和计划性 创造性 指导实践改造客观世界的作用（指导性） 认识 判断 商品的二因素：具体劳动形成商品的使用价值，抽象劳动形成商品的价值实体 劳动的二重性：具体劳动和抽象劳动 评价历史人物的科学方法 ① 评价历史人物必须运用历史分析方法和阶级分析方法。 ②要多方面地、具体地分析。 同一个历史人物在不同的历史时期具有不同的作用。 ③评价历史人物，必须坚持阶级分析的方法。 大题 联系 联系的特点： 客观性——不以人的物质为转移 普遍性 任何事物都具有内在的结构性 任何事物都不能孤立存在，都同其它事物处在一定的相互联系之中 整个世界是相互联系的统一整体，每一个事物都是世界普遍联系中的一个成分和环境，并通过它表现出联系的普遍性。世界的普遍联系是通过“中介”来实现的 多样性——各种联系 条件性 条件对事物发展和人的活动有支持或制约作用 条件是可以改变的 改变和创造条件不是任意的，必须尊重事物发展的客观规律发展 唯物辩证法 对立统一规律 是唯物辩证法的实质和核心 发展 中心线索 矛盾分析法 （坚持和运用十分重要） 量变质变规律 量变是质变的必要准备 质变是量变的必然结果 量变和质变是相互渗透的","categories":[{"name":"考试","slug":"考试","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/"}],"tags":[]},{"title":"Lombok","slug":"Devolop/Language/Java SE/Other_library_其它库/Lombok","date":"2023-09-02T17:18:23.278Z","updated":"2023-09-18T08:24:29.869Z","comments":true,"path":"page/Devolop/Language/Java SE/Other_library_其它库/Lombok.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Other_library_%E5%85%B6%E5%AE%83%E5%BA%93/Lombok.html","excerpt":"","text":"Lombok使用争议到底该不该用Lombok ？ - 知乎 使用Lombok需知 变量名前两个字母不能是大写，否则有错误 旧版本Lombok和新版本不兼容，特别老的项目升级会报错，直接或间接地同时引用了两个版本的Lombok也有可能会有问题 Java增加的特性——record，实现了部分Lombok的功能 依赖123456&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.18.4&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt; 通过注解自动生成 getter setter 等方法 Logback@Slf4j 可替代 public static final Logger log=LoggerFactory.getLogger(&quot;logback&quot;);","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Other_library_其它库","slug":"Devolop/Language/Java-SE/Other-library-其它库","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Other-library-%E5%85%B6%E5%AE%83%E5%BA%93/"}],"tags":[]},{"title":"Java及相关的环境配置","slug":"Devolop/Language/Java SE/Java及相关的环境配置","date":"2023-09-01T04:32:12.510Z","updated":"2023-09-01T04:38:07.772Z","comments":true,"path":"page/Devolop/Language/Java SE/Java及相关的环境配置.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Java%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html","excerpt":"","text":"多个Java版本环境变量配置 环境变量名 环境变量值 JAVA8_HOMEJAVA11_HOME 各版本Java JAVA_HOME %JAVA11_HOME% PATH %JAVA_HOME%\\bin CLASSPATH 在1.5之后的版本都不需要配置CLASSPATH变量 Maven 环境变量配置两个： MAVEN_HOME Path : %MAVEN_HOME%\\bin","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"}],"tags":[]},{"title":"库恩《科学革命的结构》","slug":"Phyloshophy/库恩《科学革命的结构》","date":"2023-08-31T02:34:02.913Z","updated":"2023-08-31T02:47:00.757Z","comments":true,"path":"page/Phyloshophy/库恩《科学革命的结构》.html","link":"","permalink":"https://rchangl.github.io/page/Phyloshophy/%E5%BA%93%E6%81%A9%E3%80%8A%E7%A7%91%E5%AD%A6%E9%9D%A9%E5%91%BD%E7%9A%84%E7%BB%93%E6%9E%84%E3%80%8B.html","excerpt":"","text":"科学发展不是一个累计的过程。 科学的发展分为四个阶段： 前范式时期 常规科学时期 危机阶段 ， Bing 回答的习题阶段 库恩的习题阶段是指在一个科学范式确立之后，科学家们以该范式为基础开展研究活动，解决一些具体的问题或难题，这些问题或难题被库恩称为“习题”https://baike.baidu.com/item/%E5%BA%93%E6%81%A9%E5%AD%A6%E8%AF%B4/22449394。库恩把这种科学工作比喻为“解谜”，因为它们都有一个预设的目标和一套默认的规则https://www.bilibili.com/read/cv16954342。库恩认为，习题阶段是科学发展的正常状态，也是科学知识积累和精确化的阶段https://zhuanlan.zhihu.com/p/105040248。","categories":[{"name":"Phyloshophy","slug":"Phyloshophy","permalink":"https://rchangl.github.io/categories/Phyloshophy/"}],"tags":[]},{"title":"多表查询","slug":"Devolop/后端/MySQL/SQL/多表查询","date":"2023-08-17T15:35:43.342Z","updated":"2023-08-19T08:05:25.920Z","comments":true,"path":"page/Devolop/后端/MySQL/SQL/多表查询.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/MySQL/SQL/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2.html","excerpt":"","text":"1select * from 表1,表2; 结果为 表1 与 表2 的 笛卡儿积 （表1和表2的所有组合） 访问表中的字段： 表1.字段 内连接两表的交集中查询 隐式内连接： 1select 字段列表 from 表1,表2 where; 显示内连接： 12-- inner 可省略select 字段列表 from 表1 [inner] join 表2 on 连接条件; 外连接以一个表为主，另一个表的数据为附加上去的（可以为Null） 左外连接以左表为主 12-- outer 可省略select 字段列表 from 表左 left [outer] join 表右 on 连接条件; 右外连接以右表为主 因右外连接可替换为左外连接，故使用较少 12-- outer 可省略select 字段列表 from 表左 right [outer] join 表右 on 连接条件; 子查询标量子查询：子查询返回的结果为单个值原数值的位置替换为查询语句 1select * from tb_emp where id = (select id from tb_dept where name = &#x27;教研部&#x27;); 行子查询：子查询返回结果是一行（或多行）","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"MySQL","slug":"Devolop/后端/MySQL","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/"},{"name":"SQL","slug":"Devolop/后端/MySQL/SQL","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/SQL/"}],"tags":[]},{"title":"Linux如何查看ip地址","slug":"Computer Use/Linux/命令/Linux如何查看ip地址","date":"2023-08-08T14:18:33.449Z","updated":"2023-08-08T14:21:15.152Z","comments":true,"path":"page/Computer Use/Linux/命令/Linux如何查看ip地址.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/Linux/%E5%91%BD%E4%BB%A4/Linux%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Bip%E5%9C%B0%E5%9D%80.html","excerpt":"","text":"ip命令ip addr show ipconfigipconfig 有的系统默认没有这个命令的支持","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"},{"name":"Linux","slug":"Computer-Use/Linux","permalink":"https://rchangl.github.io/categories/Computer-Use/Linux/"},{"name":"命令","slug":"Computer-Use/Linux/命令","permalink":"https://rchangl.github.io/categories/Computer-Use/Linux/%E5%91%BD%E4%BB%A4/"}],"tags":[]},{"title":"Java三层架构","slug":"Devolop/Main/项目开发/Java三层架构","date":"2023-08-08T12:31:22.469Z","updated":"2023-08-08T12:33:00.390Z","comments":true,"path":"page/Devolop/Main/项目开发/Java三层架构.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/Java%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.html","excerpt":"","text":"表现层：接受请求展示数据 也就是我们常说的web层。它负责接收客户端请求，向客户端响应结果，通常客户端使用http协议请求web层，web需要接收http请求，完成http响应。 表现层包括展示层和控制层：控制层负责接收请求，展示层负责结果的展示。 表现层依赖业务层，接收到客户端请求一般会调用业务层进行业务处理，并将处理结果响应给客户端。 表现层的设计一般都使用MVC模型。（MVC是表现层的设计模型，和其他层没有关系） 业务层：处理业务逻辑 也就是我们常说的service层。它负责业务逻辑处理，和我们开发项目的需求息息相关。web层依赖业务层，但是业务层不依赖web层。 业务层在业务处理时可能会依赖持久层，如果要对数据持久化需要保证事务一致性。（也就是我们说的，事务应该放到业务层来控制） 持久层：数据库交互 也就是我们是常说的dao层。负责数据持久化，包括数据层即数据库和数据访问层，数据库是对数据进行持久化的载体，数据访问层是业务层和持久层交互的接口，业务层需要通过数据访问层将数据持久化到数据库中。通俗的讲，持久层就是和数据库交互，对数据库表进行曾删改查的。","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"项目开发","slug":"Devolop/Main/项目开发","permalink":"https://rchangl.github.io/categories/Devolop/Main/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"philosophy","slug":"Phyloshophy/philosophy","date":"2023-08-08T11:01:54.917Z","updated":"2023-08-08T12:55:48.541Z","comments":true,"path":"page/Phyloshophy/philosophy.html","link":"","permalink":"https://rchangl.github.io/page/Phyloshophy/philosophy.html","excerpt":"","text":"后结构主义 Post-structuralism","categories":[{"name":"Phyloshophy","slug":"Phyloshophy","permalink":"https://rchangl.github.io/categories/Phyloshophy/"}],"tags":[]},{"title":"外键约束","slug":"Devolop/后端/MySQL/外键约束","date":"2023-08-06T05:06:27.244Z","updated":"2023-08-17T15:35:17.153Z","comments":true,"path":"page/Devolop/后端/MySQL/外键约束.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/MySQL/%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F.html","excerpt":"","text":"物理外键创建时指定外键： 12345create table 表名( ..., -- 所有字段罗列完成后 constraint 外键名称 foreign key 本表字段名 references 主表(字段名)); 创建完后添加外键 1alter table 表名 add constraint 外键名称 foreign key 主表(字段名); 物理外键的特点 增、删、改 时需要检查外键关系，影响效率 不适用于 分布式、集群 场景。 容易引发数据库死锁问题，消耗性能 实际开发中少用，一些公司禁用 逻辑外键在业务逻辑上解决外键关联，通过业务代码解决数据一致性问题","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"MySQL","slug":"Devolop/后端/MySQL","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/"}],"tags":[]},{"title":"Temux","slug":"Computer Use/Temux","date":"2023-08-02T03:54:31.510Z","updated":"2023-08-03T13:15:32.187Z","comments":true,"path":"page/Computer Use/Temux.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/Temux.html","excerpt":"","text":"配置镜像1temux-change-repo 之后的图形界面可直接点击配置，选择清华的镜像即可","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"}],"tags":[]},{"title":"查询 DQL","slug":"Devolop/后端/MySQL/SQL/查询-DQL","date":"2023-07-23T09:43:50.803Z","updated":"2023-08-19T11:36:28.801Z","comments":true,"path":"page/Devolop/后端/MySQL/SQL/查询-DQL.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/MySQL/SQL/%E6%9F%A5%E8%AF%A2-DQL.html","excerpt":"","text":"结构条件查询 where 分组查询 group by 排序查询 order by 分页查询 limit 123456789101112131415161718select 字段列表from 表名列表where 条件列表group by 分组字段列表having 分组后条件列表order by 排序字段列表limit 分页参数 语法查询： 12345-- 多个字段select 字段1 [as 别名1]，字段2 [as 别名2] from 表名;-- 所有字段select * from 表名; 别名有空格：&#39;姓 名&#39; 去除重复记录： 1select distinct 字段列表 from 表名; 条件查询 select1select 字段列表 from 表名列表 where 条件列表; &gt; &gt;= &lt; &lt;= = &lt;&gt; != and &amp;&amp; or || not ! between ... and ... in() not in : ... where age in (2,3,4); 值在列表中 like 占位符: ... where name &#39;___&#39;; ，_单个字符，%任意个字符 is null : null 值判断 不用 = null ，否则结果会不对 分组查询聚合函数常见聚合函数 count(字段) count(*) count(常量) min() max() avg() 平均值，有小数 sum() null 值不参与所有聚合函数计算 聚合函数不能写在 where 后（只可以写在字段后和having后） 分组查询1select ... from ... [where ...] group by 分组字段名 [having 分组后过滤条件]; 1SELECT gender,COUNT(*) FROM tb_emp GROUP BY gender; 聚合函数常与分组查询一起使用 字段列表 和 分组后条件 只能是 分组字段 和 对应的聚合函数 ，不能使用其他未分组的字段 排序查询1select ... from ... order by 字段1 排序方式1,字段2 排序方式2,...; 字段1相同时，根据字段2排序 排序方式：ASC 升序（默认值）DESC 降序 分页查询1select ... from ... limit 起始索引,展示数据条数 分页查询不同的数据库有不同的实现，MySQL用limit，Oracle不用这个 如果查询的是首页数据，可省略起始索引，写作 limit 展示数据条数","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"MySQL","slug":"Devolop/后端/MySQL","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/"},{"name":"SQL","slug":"Devolop/后端/MySQL/SQL","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/SQL/"}],"tags":[]},{"title":"DML 数据库操作","slug":"Devolop/后端/MySQL/SQL/操作 DML","date":"2023-07-23T08:55:27.560Z","updated":"2023-07-23T09:39:20.599Z","comments":true,"path":"page/Devolop/后端/MySQL/SQL/操作 DML.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/MySQL/SQL/%E6%93%8D%E4%BD%9C%20DML.html","excerpt":"","text":"Data Manipulation Language 数据库 操作 语言 添加数据 INSERT指定字段添加数据 insert into 表名 (字段名1, 字段名2) values (值1, 值2); 全部字段添加数据 insert into 表名 values(值1, 值2, 值N); （指定字段）批量添加数据 insert into 表名 (字段名1, 字段名2) values (值1, 值2), (值1, 值2); （全部字段）批量添加数据 insert into 表名 values(值1, 值2, 值N), (值1, 值2, 值N); 函数now() 获取当前系统时间 修改数据 UPDATAupdate 表名 set 字段名1=值1, 字段名2=值2 [where 条件]; 修改数据 DELETEdelete from 表名 [where 条件]","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"MySQL","slug":"Devolop/后端/MySQL","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/"},{"name":"SQL","slug":"Devolop/后端/MySQL/SQL","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/SQL/"}],"tags":[]},{"title":"状语从句","slug":"English/从句/状语从句","date":"2023-07-19T04:39:29.299Z","updated":"2023-07-22T15:19:46.410Z","comments":true,"path":"page/English/从句/状语从句.html","link":"","permalink":"https://rchangl.github.io/page/English/%E4%BB%8E%E5%8F%A5/%E7%8A%B6%E8%AF%AD%E4%BB%8E%E5%8F%A5.html","excerpt":"","text":"时间when, while, asas 同时，或一先一后紧接着（as从句先） 有时可相互替换，有时不可 when as 延续性或瞬时动词 while 必须是延续性 从句动作发生在主句之前，只能用 when从句动作发生在主句之后，只能用 when，并注意时态（从句过去时，主句过去完成时） while 表转折，不可替代","categories":[{"name":"English","slug":"English","permalink":"https://rchangl.github.io/categories/English/"},{"name":"从句","slug":"English/从句","permalink":"https://rchangl.github.io/categories/English/%E4%BB%8E%E5%8F%A5/"}],"tags":[]},{"title":"SQL DDL","slug":"Devolop/后端/MySQL/SQL/定义 SQL DDL","date":"2023-07-16T12:28:26.062Z","updated":"2023-07-23T11:54:43.545Z","comments":true,"path":"page/Devolop/后端/MySQL/SQL/定义 SQL DDL.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/MySQL/SQL/%E5%AE%9A%E4%B9%89%20SQL%20DDL.html","excerpt":"","text":"SQL 语句SQL 可多行写，分号结束 MySQL 的 SQL语句 不区分大小写（包括数据库名） 注释： 12-- 单行/* 多行 */ 分类： DDL Data Definition Language 数据库定义语 DML Data Manipulation Language 数据库操作语言 DQL Data Query Language 数据库查询语言 DCL Data Control Language 数据库控制语言 用来创建数据库用户、控制数据库的访问权限 DBA 数据库管理员用 DDL 数据库操作查询： 12345-- 展示所有数据库show databases;-- 查看当前正在使用的数据库select database(); 使用： 12-- 使用数据库use 数据库名; 创建： 12345-- 创建数据库create database 数据库名;-- 如果不存在 则创建create database if not exists 数据库名; 删除： 12345-- 删除数据库drop database 数据库名;-- 如果存在 则删除drop database if exists 数据库名; 上述操作中database 可以替换为 schemadatabases 可以替换为 schemas日常使用 database DDL 表操作创建:12345CREATE TABLE 表名( 字段1 字段类型 [约束] [comment &#x27;字段1注释&#x27;], ......, 字段n 字段类型 [约束] [comment &#x27;字段n注释&#x27;],)[comment &#x27;表注释&#x27;]; 业务中表名加上 tb_ 前缀 约束限制字段的数据 primary key 主键约束，数据的唯一标志，非空且唯一 not null 非空约束 unique 唯一约束 default 值 默认约束，未指定值则采用默认值 foreign key 外键约束，两张表的数据建立联系 查询show tables; 查询所有表 desc 表名; 查询表结构 show create table 表名; 查询建表语句 修改 操作 语句 添加字段 alter table 表名 add 字段名 类型(长度) [comment 注释] [约束]; 修改字段类型 alter table 表名 modify 字段名 新数据类型(长度); 修改字段名 和 字段类型 alter table 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束]; 删除字段 alter table 表名 drop column 字段名; 修改表名 rename table 表名 to 新表名; 删除删除表： drop table [if exists] 表名;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"MySQL","slug":"Devolop/后端/MySQL","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/"},{"name":"SQL","slug":"Devolop/后端/MySQL/SQL","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/SQL/"}],"tags":[]},{"title":"MySQL 环境配置和基本概念","slug":"Devolop/后端/MySQL/环境配置和命令行命令/环境配置和命令","date":"2023-07-14T11:03:59.654Z","updated":"2023-09-09T16:42:25.916Z","comments":true,"path":"page/Devolop/后端/MySQL/环境配置和命令行命令/环境配置和命令.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/MySQL/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%91%BD%E4%BB%A4/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E5%91%BD%E4%BB%A4.html","excerpt":"","text":"环境变量MYSQL_HOME Path : %MYSQL_HOME%\\bin 启动服务（Windowsnet start mysql80 修改默认密码mysqladmin -u root password 1234 登录连接mysql -u root -p mysql -h 主机名 -u 用户名 -p密码 可选参数：-h IP地址 -P 端口号默认3306 直接输入密码p后不加空格 退出exit 初始化（使用安装程序安装跳过）mysqld --参数 -- initialize 命令初始化数据库 -insecure 忽略安全性，默认用户root密码为空。自动生成一个随机的密码 DataGripIntelliJ DataGrip ，在IDEA企业版中内置了","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"MySQL","slug":"Devolop/后端/MySQL","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/"},{"name":"环境配置和命令行命令","slug":"Devolop/后端/MySQL/环境配置和命令行命令","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%91%BD%E4%BB%A4/"}],"tags":[]},{"title":"Hey Jude","slug":"音乐/歌词/Hey Jude","date":"2023-07-13T12:07:07.178Z","updated":"2023-07-13T12:11:32.407Z","comments":true,"path":"page/音乐/歌词/Hey Jude.html","link":"","permalink":"https://rchangl.github.io/page/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/Hey%20Jude.html","excerpt":"","text":"Hey Jude don’t make it badTake a sad song and make it betterRemember to let her into your heartThen you can start to make it better Hey Jude don’t be afraidYou were made to go out and get herThe minute you let her under your skinThen you begin to make it better And anytime you feel the pain hey Jude refrainDon’t carry the world upon your shouldersFor well you know that it’s a fool who plays it coolBy making his world a little colder Na na na na na na na na na Hey Jude don’t let me downYou have found her now go and get herRemember to let her into your heartThen you can start to make it better So let it out and let it in hey Jude beginYou’re waiting for someone to perform withAnd don’t you know that it’s just you hey Jude you’ll doThe movement you need is on your shoulder Na na na na na na na na na Hey Jude don’t make it badTake a sad song and make it betterRemember to let her under your skinThen you’ll begin to make it Better better better better better better oh Na na na na na na na na na na na hey JudeNa na na na na na na na na na na hey JudeNa na na na na na na na na na na hey JudeNa na na na na na na na na na na hey Jude Na na na na na na na na na na na hey JudeNa na na na na na na na na na na hey JudeNa na na na na na na na na na na hey JudeNa na na na na na na na na na na hey Jude Na na na na na na na na na na na hey JudeNa na na na na na na na na na na hey JudeNa na na na na na na na na na na hey JudeNa na na na na na na na na na na hey Jude Na na na na na na na na na na na hey JudeNa na na na na na na na na na na hey JudeNa na na na na na na na na na na hey JudeNa na na na na na na na na na na hey Jude Na na na na na na na na na na na hey JudeNa na na na na na na na na na na hey Jude","categories":[{"name":"音乐","slug":"音乐","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/"},{"name":"歌词","slug":"音乐/歌词","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/"}],"tags":[]},{"title":"IOC","slug":"Devolop/后端/Spring Boot/IOC","date":"2023-07-13T07:45:59.043Z","updated":"2023-10-13T11:41:10.728Z","comments":true,"path":"page/Devolop/后端/Spring Boot/IOC.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Spring%20Boot/IOC.html","excerpt":"","text":"IoC - Inversion of Control 控制反转 - 对象的创建控制权 由程序自身转移到外部（容器）（一种设计思想，将设计好的对象交给第三方托管） DI - Dependency Injection 依赖注入 - 容器为应用提供 依赖的资源 bean - IOC 容器中 创建、管理的对象 IOC 注解@Conponent IOC 注解 - 在类上注解，此类交由 IOC 控制，即 Bean 声明 @Autowired DI 注解 - 在成员变量上注解，依赖注入，默认按照类型注入 Bean 衍生注解@Conponent 的衍生注解： @Controller 标注在控制器上 @RestController 相当于 @Controller + @ResponseBody SpringBoot Web开发中，只能用 @Controller 声明控制器Bean @Service 标注在业务类上 @Repository 标注在数据访问类上 由于与 mybatis 整合，用得少 一般使用衍生注解，如果不确定在哪一个类再使用 @Conponent （如一些工具类） 每个 Bean 都有名字，通过 value 属性指定，未指定默认为类名首字母小写 组件扫描，Bean扫描 （默认即可，基本不用）@ComponentScan 组件扫描注解，被包含在启动类声明注解 @SpringBootApplication 中 默认扫描范围：启动类所在包 及其子包 手动指定扫描目录 需使用注解 @ComponentScan(&quot;package1&quot;, &quot;package2&quot;) ，手动指定后会覆盖默认的注解效果 一般按照SpringBoot规范，放在启动类所在包及其子包下即可 DI 依赖注入注解@Autowired DI 自动装配，默认按照类型注入 默认按照类型装配，找到同类型的 Bean 进行赋值；如果存在多个相同类型的 Bean 就会报错。解决方案任选一： @Primary 让谁生效就 在类上添加一个此注解 @Qualifier(&quot;bean名&quot;) 在@Autowired下添加 @Resource(name=&quot;beanA&quot;) 默认按照名称注入，替换@Autowired ，（JDK提供的）","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Spring Boot","slug":"Devolop/后端/Spring-Boot","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/"}],"tags":[]},{"title":"三层架构","slug":"Devolop/后端/Spring Boot/三层架构/三层架构","date":"2023-07-13T07:03:39.117Z","updated":"2023-09-08T09:29:26.552Z","comments":true,"path":"page/Devolop/后端/Spring Boot/三层架构/三层架构.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Spring%20Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.html","excerpt":"","text":"Controller 控制层 请求，响应 的处理 Service 业务逻辑层 逻辑处理 dao 数据访问层（持久层） 数据访问 Data Access Object ，增删改查 dao 层在 mybatis 中就是 mapper 层 包：cotroller service dao service dao 先创建接口，再创建impl包，便于管理","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Spring Boot","slug":"Devolop/后端/Spring-Boot","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/"},{"name":"三层架构","slug":"Devolop/后端/Spring-Boot/三层架构","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"}],"tags":[]},{"title":"惊梦-刘小慧","slug":"音乐/歌词/惊梦-刘小慧","date":"2023-07-12T13:24:36.374Z","updated":"2023-07-12T13:42:47.559Z","comments":true,"path":"page/音乐/歌词/惊梦-刘小慧.html","link":"","permalink":"https://rchangl.github.io/page/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/%E6%83%8A%E6%A2%A6-%E5%88%98%E5%B0%8F%E6%85%A7.html","excerpt":"","text":"长夜泛起一刹冲动荡向街中想像再重逢缠绵时光一再 眼前扇动 情话在心轻俏翻弄热爱眼光竟是这样浓从前情怀笼罩着 不知有恨痛 骤眼朦胧 将画面变动急风中断甜蜜作用两眼渐红 方知道是梦沾湿了夜冷风 重回现实梦中惊醒幻化的温馨消失反应全是错觉我心内有梦自制虚空感觉在扑空 前事日夕在心中翻起或会追忆中差点失控记着往日情浓 编了一个幻梦习惯清醒即心渐痛 :|| 记着往日情浓 编了一个幻梦习惯清醒即心渐痛","categories":[{"name":"音乐","slug":"音乐","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/"},{"name":"歌词","slug":"音乐/歌词","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/"}],"tags":[]},{"title":"XML解析 Dom4j.md","slug":"Devolop/Language/Java SE/Other_library_其它库/XML解析 Dom4j","date":"2023-07-12T07:37:23.406Z","updated":"2023-07-12T12:52:32.970Z","comments":true,"path":"page/Devolop/Language/Java SE/Other_library_其它库/XML解析 Dom4j.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Other_library_%E5%85%B6%E5%AE%83%E5%BA%93/XML%E8%A7%A3%E6%9E%90%20Dom4j.html","excerpt":"","text":"pom.xml : 123456&lt;!-- https://mvnrepository.com/artifact/org.dom4j/dom4j --&gt;&lt;dependency&gt; &lt;groupId&gt;org.dom4j&lt;/groupId&gt; &lt;artifactId&gt;dom4j&lt;/artifactId&gt; &lt;version&gt;2.1.3&lt;/version&gt;&lt;/dependency&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142public class XmlParserUtils &#123; public static &lt;T&gt; List&lt;T&gt; parse(String file, Class&lt;T&gt; targetClass) &#123; ArrayList&lt;T&gt; list = new ArrayList&lt;&gt;(); // 封装解析出来的数据 try&#123; // 1. 获取一个对象解析器对象 SAXReader saxReader = new SAXReader(); // 2. 利用解析器把xml文件加载到内存中 Document document = saxReader.read(new File(file)); // 3. 获取根标签 Element rootElement = document.getRootElement(); // 4. 通过根标签来获取 user 标签 List&lt;Element&gt; elements = rootElement.elements(&quot;emp&quot;); // 5. 便利集合，得到每一个user标签 for(Element element : elements) &#123; // 获取 name 属性 String name = element.element(&quot;name&quot;).getText(); // 获取 age 属性 String age = element.element(&quot;age&quot;).getText(); // 获取 image 属性 String image = element.element(&quot;image&quot;).getText(); // 获取 gender 属性 String gender = element.element(&quot;gender&quot;).getText(); // 获取 job 属性 String job = element.element(&quot;job&quot;).getText(); //组装数据 Constructor&lt;T&gt; constructor = targetClass.getDeclaredConstructor(String.class, Integer.class, String.class, String.class, String.class); constructor.setAccessible(true); T object = constructor.newInstance(name, Integer.parseInt(age), image, gender, job); list.add(object); &#125; &#125; catch (DocumentException e) &#123;// throw new RuntimeException(e); e.printStackTrace(); &#125; return list; &#125;&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Other_library_其它库","slug":"Devolop/Language/Java-SE/Other-library-其它库","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Other-library-%E5%85%B6%E5%AE%83%E5%BA%93/"}],"tags":[]},{"title":"法律查询网站","slug":"劳动/劳动与法律/法律查询网站","date":"2023-07-02T04:58:15.989Z","updated":"2023-07-02T04:58:40.321Z","comments":true,"path":"page/劳动/劳动与法律/法律查询网站.html","link":"","permalink":"https://rchangl.github.io/page/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/%E6%B3%95%E5%BE%8B%E6%9F%A5%E8%AF%A2%E7%BD%91%E7%AB%99.html","excerpt":"","text":"OpenLaw | 让法律成为一种信仰 中国庭审公开网 庭审视频直播及回放","categories":[{"name":"劳动","slug":"劳动","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/"},{"name":"劳动与法律","slug":"劳动/劳动与法律","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/"}],"tags":[]},{"title":"设计模式","slug":"Devolop/Main/项目开发/设计模式","date":"2023-06-30T16:43:22.328Z","updated":"2023-07-13T05:44:30.900Z","comments":true,"path":"page/Devolop/Main/项目开发/设计模式.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","excerpt":"","text":"二十三种 设计模式六大原则单一职责原则 SRP单一职责原则 SRP：Single responsibility principle","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"项目开发","slug":"Devolop/Main/项目开发","permalink":"https://rchangl.github.io/categories/Devolop/Main/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"句子成分","slug":"English/句子成分","date":"2023-06-30T11:14:20.451Z","updated":"2023-07-08T06:35:32.744Z","comments":true,"path":"page/English/句子成分.html","link":"","permalink":"https://rchangl.github.io/page/English/%E5%8F%A5%E5%AD%90%E6%88%90%E5%88%86.html","excerpt":"","text":"缺宾语的情况 Vt 介 Vt2 + IO （双宾语） 被动即完整（间宾被动除外）被动句子结构已经完整，不需要再接宾语 但间接宾语的被动除外，需要接直接宾语","categories":[{"name":"English","slug":"English","permalink":"https://rchangl.github.io/categories/English/"}],"tags":[]},{"title":"定于从句","slug":"English/从句/定于从句","date":"2023-06-30T10:36:10.453Z","updated":"2023-07-11T04:01:37.512Z","comments":true,"path":"page/English/从句/定于从句.html","link":"","permalink":"https://rchangl.github.io/page/English/%E4%BB%8E%E5%8F%A5/%E5%AE%9A%E4%BA%8E%E4%BB%8E%E5%8F%A5.html","excerpt":"","text":"先行词：主句中 被修饰的名词 从属&#x2F;连接&#x2F;引导&#x2F; 关系词：从句中的特殊词 判断定从主句完整 从句修饰主句里的名词 关系词 作的成分 关系词 主 宾 表 (关系代词) that which who whom as 状 (关系副词) when where why &#x2F; 介词+which 定 (关系形容词) whose &#x3D; of whom &#x2F; of which 关系代词 （主 宾 表）that which who whom as that 人&#x2F;物which 物who 人，作主语、宾语时whom 人，仅作宾语时as 表语 指人，一般不用 who whom ，用 that 关系代词作宾语 可选省略关系副词从句成分完整，被修饰的词带入从句作副词 先行词作：when 时间where 地点why 原因 介词+which：相当于在从句接介宾短语 in which at which for which after which …… 关系形容词whose &#x3D; of whom 或 of which 从句成分完整，先行词作为形容词 修饰从句中的名词 从句名词：有the用 of whom/which (因为后置定语)无the用 which (因为前置定语)为 不定代词 或 数词，只用 of whom/which","categories":[{"name":"English","slug":"English","permalink":"https://rchangl.github.io/categories/English/"},{"name":"从句","slug":"English/从句","permalink":"https://rchangl.github.io/categories/English/%E4%BB%8E%E5%8F%A5/"}],"tags":[]},{"title":"修复 Windows 电脑引导（UEFI）","slug":"Computer Use/Windows/修复 Windows 电脑引导（UEFI）","date":"2023-06-29T04:54:41.952Z","updated":"2023-06-29T05:04:28.468Z","comments":true,"path":"page/Computer Use/Windows/修复 Windows 电脑引导（UEFI）.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/Windows/%E4%BF%AE%E5%A4%8D%20Windows%20%E7%94%B5%E8%84%91%E5%BC%95%E5%AF%BC%EF%BC%88UEFI%EF%BC%89.html","excerpt":"","text":"分两种情况，一种是系统引导没有放在BIOS第一位，未能正确载入引导。还有一种情况就是引到分区损坏，这时需要重新建立一遍引导分区就好了。 引导分区正常，但电脑没能正确读取引导进入BIOS界面，Windows 引导不在第一位，将他放在第一位 重新建立引导分区如果分区损坏的话，需要重新建立引导分区，再进行上面一步的操作。 进入PE系统，打开分区工具（DiskGenius，图标是橙色背景，中间一个字母G）： 将引导的两个分区删除了（EFI MSR），提交保存 右键空闲的空间，建立EFI分区，提交保存 打开引导修复工具，一般PE系统都有，像微PE就有 选择UEFI，选择系统盘，选择EFI分区，点击修复 修复完成就能正常启动了，如果不行记得再尝试下上一步。","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"},{"name":"Windows","slug":"Computer-Use/Windows","permalink":"https://rchangl.github.io/categories/Computer-Use/Windows/"}],"tags":[]},{"title":"TextView 样式","slug":"Devolop/Secondary/Android/控件样式/TextView 样式","date":"2023-06-28T08:54:46.563Z","updated":"2023-06-29T10:55:18.560Z","comments":true,"path":"page/Devolop/Secondary/Android/控件样式/TextView 样式.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Android/%E6%8E%A7%E4%BB%B6%E6%A0%B7%E5%BC%8F/TextView%20%E6%A0%B7%E5%BC%8F.html","excerpt":"","text":"TextView 文字居中1android:gravity=&quot;center&quot; TextView设置背景色和边框1.在drawable文件夹下面创建 setbar_bg.xml 1234567&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt; &lt;!-- 背景色 --&gt; &lt;solid android:color=&quot;#FFE4B5&quot;/&gt; &lt;!-- 边框色 --&gt; &lt;stroke android:width=&quot;0.5dip&quot; android:color=&quot;#81CE47&quot; /&gt;&lt;/shape&gt; 2.设置TextView顺序 android:background=&quot;@drawable/setbar_bg&quot; 字体颜色textColor 属性","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Android","slug":"Devolop/Secondary/Android","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Android/"},{"name":"控件样式","slug":"Devolop/Secondary/Android/控件样式","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Android/%E6%8E%A7%E4%BB%B6%E6%A0%B7%E5%BC%8F/"}],"tags":[]},{"title":"styles.xml 文件","slug":"Devolop/Secondary/Android/界面/styles.xml 文件","date":"2023-06-28T08:22:28.788Z","updated":"2023-06-28T08:25:18.551Z","comments":true,"path":"page/Devolop/Secondary/Android/界面/styles.xml 文件.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Android/%E7%95%8C%E9%9D%A2/styles.xml%20%E6%96%87%E4%BB%B6.html","excerpt":"","text":"需要在 res/values/ 文件夹下自己创建一个 styles.xml 文件","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Android","slug":"Devolop/Secondary/Android","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Android/"},{"name":"界面","slug":"Devolop/Secondary/Android/界面","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Android/%E7%95%8C%E9%9D%A2/"}],"tags":[]},{"title":"全屏显示","slug":"Devolop/Secondary/Android/界面/全屏显示","date":"2023-06-28T08:06:02.433Z","updated":"2023-06-28T08:28:11.962Z","comments":true,"path":"page/Devolop/Secondary/Android/界面/全屏显示.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Android/%E7%95%8C%E9%9D%A2/%E5%85%A8%E5%B1%8F%E6%98%BE%E7%A4%BA.html","excerpt":"","text":"方法一 AndroidManifest.xmlandroid:theme=&quot;@style/AppTheme&quot; 语句将其修改为 android:theme=&quot;@style/Theme.xxx&quot; 在 styles.xml 中定义 Theme.xxx : 1234&lt;style name=&quot;Theme.NoTitle_FullScreen&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt; &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt; &lt;item name=&quot;android:windowFullscreen&quot;&gt;true&lt;/item&gt;&lt;/style&gt; 方法二 MainActivity12345//去除默认标题栏ActionBar actionBar=getSupportActionBar();if(actionBar!=null)&#123; actionBar.hide();&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Android","slug":"Devolop/Secondary/Android","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Android/"},{"name":"界面","slug":"Devolop/Secondary/Android/界面","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Android/%E7%95%8C%E9%9D%A2/"}],"tags":[]},{"title":"横屏设置","slug":"Devolop/Secondary/Android/界面/横屏设置","date":"2023-06-28T06:55:48.338Z","updated":"2023-06-28T06:59:58.725Z","comments":true,"path":"page/Devolop/Secondary/Android/界面/横屏设置.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Android/%E7%95%8C%E9%9D%A2/%E6%A8%AA%E5%B1%8F%E8%AE%BE%E7%BD%AE.html","excerpt":"","text":"AndroidManifest.xml在指定的要设置的Activity对应的标签中加入 android:screenOrientation 属性 他有下面几个參数： unspecified : 默认值 由系统来推断显示方向.判定的策略是和设备相关的，所以不同的设备会有不同的显示方向。landscape : 横屏显示（宽比高要长）portrait : 竖屏显示(高比宽要长)user : 用户当前首选的方向behind : 和该Activity以下的那个Activity的方向一致(在Activity堆栈中的)sensor : 有物理的感应器来决定。假设用户旋转设备这屏幕会横竖屏切换。nosensor : 忽略物理感应器。这样就不会随着用户旋转设备而更改了（”unspecified”设置除外）。 方法二：在java中代码中进行设置1setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);// 横屏` 一般接着隐藏状态栏： 123//设置窗体全屏，进行全屏显示。否则横屏时，会出现状态栏 this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); 设置竖屏： 1setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);//竖屏","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Android","slug":"Devolop/Secondary/Android","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Android/"},{"name":"界面","slug":"Devolop/Secondary/Android/界面","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Android/%E7%95%8C%E9%9D%A2/"}],"tags":[]},{"title":"骑马与砍杀","slug":"Game/骑马与砍杀","date":"2023-06-27T08:52:50.068Z","updated":"2023-06-27T08:52:55.106Z","comments":true,"path":"page/Game/骑马与砍杀.html","link":"","permalink":"https://rchangl.github.io/page/Game/%E9%AA%91%E9%A9%AC%E4%B8%8E%E7%A0%8D%E6%9D%80.html","excerpt":"","text":"攻略组合A组Alayen 艾雷恩（骑士，战斗英雄），Baheshtur 贝斯图尔 （弓骑，战斗英雄） ，Firentis 法提斯（骑士，战斗英雄） 。 B组Katrin 凯特琳（兼有战斗和后勤技能），Marnid 马尼德（商人），Nizar 尼扎（战斗英雄，太贱了，从没选过）， Z组Ymira 雅米拉（无定向，属后勤类英雄），Deshavi 德赛维 （战斗英雄，鸡肋）Jeremus 杰姆斯（医生），Bunduk 班达克（弩手，战斗英雄），Klethi 克雷斯（斥候）， X组Borcha 么么茶（斥候） ，Lezalit 雷萨里特 （教练，战斗英雄），Artimenner 亚提曼（建筑师），Rolf 罗尔夫 （指挥官，战斗英雄），Matheld 马蒂尔德（骑士，战斗英雄）。 A+Z A+X B+X B+Z 初期开厂建议开厂建议初期：优先在 Veluca(维鲁加) 建造 橄榄油厂Rivacheg(日瓦车则) 建造 weavery(织布) velvet(天鹅绒厂) 实现收益最大化 Veluca(维鲁加) 建造橄榄油厂杰尔喀拉 建造皮革厂或橄榄油厂Suno(苏诺) 建造 tannery(皮革厂) 其他所有城镇建造 weavery velvet(天鹅绒厂) 厂收益最大 (可能)Curaw(库劳) 建造 炼铁厂(tools from iron) scrips.txt村庄任务刷新查找get_quest -11224979098644774938 30 2133 2 1224979098644774939 20 2133 2 1224979098644774922 1224979098644774947 3 0 5 0 31 2 1224979098644774947 504403158265495589 4 0 33 3 1224979098644774917 648518346341351515 648518346341351625 521 3 1224979098644774948 1224979098644774917 205 2147483678 2 1224979098644774948 50 2133 2 1224979098644774924 1224979098644774917 2136 3 1224979098644774931 5 10 2133 2 1224979098644774938 30 2133 2 1224979098644774939 20 2133 2把20 30修改成0,刷新时间最短 领主逃跑率查找cf_check_hero_can_escape_from_player -1 504403158265495639 2133 2 1224979098644774913 1 5 0 2133 2 1224979098644774913 -1 3 0 3 0 2133 2 1224979098644774914 0 4 0 31 2 1224979098644774913 0 2136 3 1224979098644774915 0 100 2147483678 2 1224979098644774915 70 2133 2 1224979098644774914 1 5 0 31 2 70是领主逃跑机率70%,可改0-100.（诺多参战抓不到野怪与此无关） 统御加士气查找get_player_party_morale_values -1144115188075856346 11 31 2 1224979098644774918 360287970189639680 2122 3 144115188075857010 1224979098644774917 20 5 0 2122 3 144115188075857010 1224979098644774917 15 3 0 2133 2 1224979098644774919 144115188075857010 2106 2 1224979098644774919 144115188075857009 2105 2 15为每级统御增加的士气值. 带兵数量修改查找game_get_party_companion_limit -1 35 2133 2 1224979098644774912 360287970189639680 2133 2 1224979098644774913 60 2170 3 1224979098644774914 1369094286720630785 1224979098644774912 2172 3 1224979098644774915 1224979098644774912 3 2107 2 1224979098644774914 20 2105 2 1224979098644774913 1224979098644774914 2105 2 1224979098644774913 1224979098644774915 2171 2 1224979098644774916 1224979098644774912 2107 2 1224979098644774916 2 2105 2 1224979098644774913 1224979098644774916 520 3 1224979098644774917 1224979098644774912 7 2123 3 1224979098644774918 1224979098644774917 15 2105 2 1224979098644774913 1224979098644774918 60队伍基础人数,20每级统御增加的部队上限,15每15声望增加部队上限1人（不影响领主） 俘虏上限game_get_party_prisoner_limit -1 6 2133 2 1224979098644774912 360287970189639680 2133 2 1224979098644774913 0 2170 3 1224979098644774914 1369094286720630786 1224979098644774912 2122 3 1224979098644774913 1224979098644774914 5 2133 2 72057594037927936 1224979098644774913 2075 1 72057594037927936 5是每级俘虏管理增加的可带俘虏上限的人数 npc游走范围打开mod里的scripts文件。搜索 update_companion_candidates_in_taverns -1 22 4 0 31 2 144115188075856163 1 1106 1 216172782113785858 3 0 6 3 1224979098644774912 360287970189639874 360287970189639890 500 3 1224979098644774912 12 -1 540 3 1224979098644774912 150 0 540 3 1224979098644774912 2 0 2147484208 3 1224979098644774912 8 0 2136 3 1224979098644774913 648518346341351445 648518346341351467 4 0 2147484188 3 1224979098644774912 60 1224979098644774913 2147484188 3 1224979098644774912 59 1224979098644774913 500 3 1224979098644774912 12 1224979098644774913 4 0 31 2 144115188075856163 1 2322 2 4 1224979098644774912 2330 2 5 1224979098644774913 1106 1 1585267068834414822 3 0 3 0 3 0 22 4 0 31 2 144115188075856163 1 1106 1 216172782113785858 3 0 6 3 1224979098644774912 360287970189639874 360287970189639890 500 3 1224979098644774912 12 -1 540 3 1224979098644774912 150 0 540 3 1224979098644774912 2 0 2147484208 3 1224979098644774912 8 0 2136 3 1224979098644774913 6485183463413514（45） 6485183463413514（67） 4 0 2147484188 3 1224979098644774912 60 1224979098644774913 2147484188 3 1224979098644774912 59 1224979098644774913 500 3 1224979098644774912 12 1224979098644774913 4 0 31 2 144115188075856163 1 2322 2 4 1224979098644774912 2330 2 5 1224979098644774913 1106 1 1585267068834414822 3 0 3 0 3 0 括号内代表游戏中的城市，NPC游走于这城市范围内，修改的话把范围缩短到1即可 2酒馆Npc集中的话，修改scripts.txt文件即可。 ps:先备份。以免发生不必要的麻烦。【可能修改了之后手一抖会保存，覆盖原文件，如果改的多，或者改了不必要的数据，很麻烦。你可以修改回来，但是如果你修改了之后再次去找修改过的数据时找不到了，那就很尴尬了。】 打开scripts.txt文件，搜索：update_companion_candidates_in_taverns -1 会出现如下数据：update_companion_candidates_in_taverns -122 4 0 31 2 144115188075856163 1 1106 1 216172782113786365 3 0 6 3 1224979098644774912 360287970189640020 360287970189640046 500 3 1224979098644774912 12 -1 540 3 1224979098644774912 146 0 540 3 1224979098644774912 2 0 2147484208 3 1224979098644774912 8 0 2136 3 1224979098644774913 6485183463413514【48】 6485183463413514【90】 4 0 2147484188 3 1224979098644774912 60 1224979098644774913 2147484188 3 1224979098644774912 59 1224979098644774913 500 3 1224979098644774912 12 1224979098644774913 4 0 31 2 144115188075856163 1 2322 2 4 1224979098644774912 2330 2 5 1224979098644774913 1106 1 1585267068834415302 3 0 3 0 3 0 这是某个Mod里面的数据。48就代表了该Mod里面第一个存在酒馆的城镇，后面的90就代表了最后一个。也就是该mod里面，存在了4342个有酒馆的城镇【至于我说4342个，这是我不确认，一般都会将禅达排除，而且这个数据在某些mod里面会有问题，记得备份。ps：很多mod里面，禅达都是隐藏的，但是禅达是默认存在酒馆的，所以如果你将npc刷新在禅达里面的话，呵呵。。】 至于这些城镇所代表的信息的话，打开汉化文件【如果你的汉化没错的话】m&amp;bwarband\\Modules\\mod文件夹\\languages\\cns\\parties可以查看，如果你对你玩的这个mod有一定了解的话，肯定知道哪些是会出现酒馆Npc的城镇。 关于前面一点为什么我会说可能出问题，我说一下。我之前在玩潘德3.8的时候，曾经修改过一次酒馆npc集中杨维克朔【现在叫雾笼城，还不错吧，希望能将所有的城镇名都同类化】，将酒馆里面所有Npc全部招募了之后，发现少了一个莱丝莉【就是那个商业技能比较高的比较黑。。。健康的妹子】，没错，全部招募了就只有19个npc，少了一个。然后就全城镇一个个的找过去，玩了几十天的档，全部用来全图移动了，还是没找到。我觉得我可能不是很了解。因为我将数据改成了杨维克朔所代表的那个数据，两个数据都是。【就像上面的修改，两个数据全是48，这就是代表了npc一开始会出现在杨维克朔的酒馆，以前修改过的所有mod里面都是这样，一开始是全部集体出现在了同一个酒馆，如果人不全的话，说明酒馆刷新npc的位置站满了，招募几个npc再次进一次酒馆就会出现新的了。】我怀疑会不会是当出现这样的情况时，潘德里面是默认全部npc只会出现在杨维克朔酒馆的，如果没有出现的话，那么就是在禅达酒馆，但是潘德是默认屏蔽禅达的，所以莱丝莉是被屏蔽了，游戏里面不会出现。【也许是错觉，我就是这么认为的，总是疑神疑鬼。当然，真相也可能是我在全大陆巡游的时候，莱丝莉机智的跟我玩起了捉迷藏，并且最终将我逼疯删档。】 所以说修改有风险，不备份需谨慎。【不备份的最后都被逼得学会了备份，别不信，我以前也不信。。】 以上，说了这么多，其实最上面的内容才有用。下面都是老生常谈，修改有风险之类的。就是这样。 menus.txt赶牛变领牛搜索mno_cattle_drive_awaymno_cattle_drive_away 0 Drive_the_cattle_onward. 4 501 3 144115188075856228 7 1 1640 2 144115188075856228 11 1641 2 144115188075856228 648518346341351424 2040 0 将11更改为10 module.ini经验获取 player_xp_multiplier &#x3D; 2.0; ←你的经验倍数 hero_xp_multiplier &#x3D; 2.0; ←NPC经验倍数 regulars_xp_multiplier &#x3D; 3.0; ←士兵经验倍数 conversation.txt村庄增加请客选项（基于酒馆请客衍生思路）搜索dlga_tavernkeeper_buy_drinks_end:tavernkeeper_pretalk 整段复制起来 dlga_tavernkeeper_buy_drinks_end:tavernkeeper_pretalk 4095 936 0 Don&#39;t_worry_&#123;sir/madam&#125;._Your_name_will_be_cheered_and_toasted_here_all_night. 931 4 1529 2 360287970189639680 144115188075856007 1 3 936748722493063422 144115188075856213 1 2270 1 1224979098644774912 2133 2 144115188075856113 1224979098644774912 NO_VOICEOVER 上面是网上的这个是我的： dlga_tavernkeeper_buy_drinks_end:tavernkeeper_pretalk 4095 953 0 Don&#39;t_worry_&#123;sir/madam&#125;._Your_name_will_be_cheered_and_toasted_here_all_night. 948 4 1529 2 360287970189639680 144115188075856007 1 3 936748722493063440 144115188075856213 1 2270 1 1224979098644774912 2133 2 144115188075856113 1224979098644774912 NO_VOICEOVER 搜索dlga_village_elder_trade_talk:village_elder_buy_cattle 69631 XXXX（XXXX不要列入搜索范围。）本段代码NO_VOICEOVER结束后，回车，插入粘贴刚才复制的。 并将 dlga_tavernkeeper_buy_drinks_end:tavernkeeper_pretalk 4095 936 替换为dlga_village_elder_trade_talk:village_elder_buy_cattle 69631 XXXXXXXX位置的数字自行替换成上方的。 比如我的是 dlga_village_elder_trade_talk:village_elder_buy_cattle 69631 XXXX 0 Don&#39;t_worry_&#123;sir/madam&#125;._Your_name_will_be_cheered_and_toasted_here_all_night. 931 4 1529 2 360287970189639680 144115188075856007 1 3 936748722493063422 144115188075856213 1 2270 1 1224979098644774912 2133 2 144115188075856113 1224979098644774912 NO_VOICEOVER 2270前面这个数字是加的好感度。 找村长买补给品时会多一个“我想买些牛”的重复的选项，相当于酒馆请喝酒。 （各类mod通用，1为增加的好感度，但是对话完成后会跳入酒馆对话页面，问题不大） 酒店老板买俘虏这里实际操作有问题，按照上面村庄的修改就好 dlga_tavernkeeper_talk:close_window 69631 610 0 I_guess_I_should_leave_now. 6 0 &#x3D;&gt; dlga_tavernkeeper_talk:ransom_broker_sell_prisoners 69631 610 2 2159 1 72057594037927936 30 2 72057594037927936 1 I_have_prisoners_to_sell. 626 0 dlga_tavernkeeper_talk:close_window 69631 610 0 I_guess_I_should_leave_now. 6 0 languages\\cn_s\\dialogs.csv dlga_tavernkeeper_talk:close_window|我 想 我 得 走 了。 &#x3D;&gt; dlga_tavernkeeper_talk:ransom_broker_sell_prisoners|听 说 贵 店 最 近 肉 料 紧 缺。。。 dlga_tavernkeeper_talk:close_window|我 想 我 得 走 了。 领主关系作弊菜单查找dlga_lord_talk:lord_suggest_action_ask 69631 391 2 30 2 144115188075856222 1 2147484208 3 144115188075855994 8 0 {!}CHEAT_-_Take_the_following_action. 575 0 NO_VOICEOVER 1改为0即可,和领主对话有一个选项”作弊”，点”像我这样&#x2F;like me”，点一次加20点好感 item_kinds1.txt文件里搜索食物、物品的英文名可以改属性，如食物数量 simple_triggers.txt地图上领主信息显示领主的性格打开simple_triggers.txt文件。把文件里的第2行数字110改为111。 在文件里的最后一行添加下面一段 1.000000 14 11 1 1224979098644774912 30 2 1224979098644774912 648518346341351664 1605 2 1224979098644774912 216172782113783809 4 0 541 3 1224979098644774912 0 13 1652 3 1224979098644774913 1224979098644774912 0 32 2 1224979098644774913 0 540 3 1224979098644774913 2 2 520 3 1224979098644774914 1224979098644774913 52 2120 3 1224979098644774915 1224979098644774914 216172782113785134 2320 2 0 1224979098644774915 1605 2 1224979098644774912 216172782113783815 3 0 3 0","categories":[{"name":"Game","slug":"Game","permalink":"https://rchangl.github.io/categories/Game/"}],"tags":[]},{"title":"劳动仲裁","slug":"劳动/劳动与法律/劳动仲裁","date":"2023-06-27T06:30:44.136Z","updated":"2023-06-27T14:28:35.147Z","comments":true,"path":"page/劳动/劳动与法律/劳动仲裁.html","link":"","permalink":"https://rchangl.github.io/page/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/%E5%8A%B3%E5%8A%A8%E4%BB%B2%E8%A3%81.html","excerpt":"","text":"劳动仲裁材料 劳动仲裁申请书 写明性别、职业、依据事实、理由 身份证原件及复印件 被诉单位的营业执照复印件 和 企业工商登记的证明材料 去工商局或网站信用中国 证据材料的清单 和 证据说明 提交证据一定要提交复印件，提交原件可能会出现证据遗失的情况","categories":[{"name":"劳动","slug":"劳动","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/"},{"name":"劳动与法律","slug":"劳动/劳动与法律","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/"}],"tags":[]},{"title":"工资","slug":"劳动/劳动与法律/工资","date":"2023-06-26T13:59:13.790Z","updated":"2023-06-26T14:00:30.410Z","comments":true,"path":"page/劳动/劳动与法律/工资.html","link":"","permalink":"https://rchangl.github.io/page/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/%E5%B7%A5%E8%B5%84.html","excerpt":"","text":"试用期结束不涨工资","categories":[{"name":"劳动","slug":"劳动","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/"},{"name":"劳动与法律","slug":"劳动/劳动与法律","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/"}],"tags":[]},{"title":"劳动合同","slug":"劳动/劳动与法律/劳动合同","date":"2023-06-26T12:57:34.840Z","updated":"2023-06-26T13:04:00.999Z","comments":true,"path":"page/劳动/劳动与法律/劳动合同.html","link":"","permalink":"https://rchangl.github.io/page/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/%E5%8A%B3%E5%8A%A8%E5%90%88%E5%90%8C.html","excerpt":"","text":"用人单位不给劳动合同 监察大队 无劳动合同 主张双倍工资，没签的月份都有双倍工资 工资流水作为证据 到期不续签合同","categories":[{"name":"劳动","slug":"劳动","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/"},{"name":"劳动与法律","slug":"劳动/劳动与法律","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/"}],"tags":[]},{"title":"导读拉康","slug":"Phyloshophy/导读拉康","date":"2023-06-26T12:41:10.803Z","updated":"2023-06-26T12:41:42.876Z","comments":true,"path":"page/Phyloshophy/导读拉康.html","link":"","permalink":"https://rchangl.github.io/page/Phyloshophy/%E5%AF%BC%E8%AF%BB%E6%8B%89%E5%BA%B7.html","excerpt":"","text":"想象界现象学源于胡塞尔，涉及 “纯粹现象”(pure phenomenon) 的本质：对象紧密联系于 人的意识，并非分离于 我们对它的知觉 而独立存在。 海德格尔 萨特","categories":[{"name":"Phyloshophy","slug":"Phyloshophy","permalink":"https://rchangl.github.io/categories/Phyloshophy/"}],"tags":[]},{"title":"试用期","slug":"劳动/劳动与法律/试用期","date":"2023-06-25T06:04:07.636Z","updated":"2023-06-25T06:04:17.084Z","comments":true,"path":"page/劳动/劳动与法律/试用期.html","link":"","permalink":"https://rchangl.github.io/page/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/%E8%AF%95%E7%94%A8%E6%9C%9F.html","excerpt":"","text":"","categories":[{"name":"劳动","slug":"劳动","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/"},{"name":"劳动与法律","slug":"劳动/劳动与法律","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/"}],"tags":[]},{"title":"离职","slug":"劳动/劳动与法律/离职","date":"2023-06-24T14:56:35.305Z","updated":"2023-09-04T15:03:54.317Z","comments":true,"path":"page/劳动/劳动与法律/离职.html","link":"","permalink":"https://rchangl.github.io/page/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/%E7%A6%BB%E8%81%8C.html","excerpt":"","text":"非法辞退：2N 合法协商：N 上两者二选一 被迫离职 N 根据工作年限 离职通知书违法解除，盖章了即生效，无需签字可直接走 被迫离职离职通知书，盖章即生效，算违法解除，无需签字可直接走","categories":[{"name":"劳动","slug":"劳动","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/"},{"name":"劳动与法律","slug":"劳动/劳动与法律","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/"}],"tags":[]},{"title":"properties配置","slug":"Devolop/后端/Spring Boot/properties配置","date":"2023-06-24T10:59:41.593Z","updated":"2023-06-24T11:00:39.006Z","comments":true,"path":"page/Devolop/后端/Spring Boot/properties配置.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Spring%20Boot/properties%E9%85%8D%E7%BD%AE.html","excerpt":"","text":"resources\\application.properties 12#设置端口号server.port=8999","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Spring Boot","slug":"Devolop/后端/Spring-Boot","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/"}],"tags":[]},{"title":"炒茄子","slug":"劳动/吃的/炒茄子","date":"2023-06-23T06:45:58.450Z","updated":"2023-06-23T06:50:57.517Z","comments":true,"path":"page/劳动/吃的/炒茄子.html","link":"","permalink":"https://rchangl.github.io/page/%E5%8A%B3%E5%8A%A8/%E5%90%83%E7%9A%84/%E7%82%92%E8%8C%84%E5%AD%90.html","excerpt":"","text":"茄子切片，放盐、醋拌匀（醋为了防止茄子变黑） 准备处理好辣椒、大蒜 五花肉选较肥的，切好 炒猪肉炒出猪油，加入辣椒爆香，加入茄子炒4分钟 加入 盐、味精、白糖（提鲜）、蚝油、生抽（沿着锅边倒入）、 出锅 参考：王刚的炒茄子视频","categories":[{"name":"劳动","slug":"劳动","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/"},{"name":"吃的","slug":"劳动/吃的","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/%E5%90%83%E7%9A%84/"}],"tags":[]},{"title":"Gradle","slug":"Devolop/Secondary/Android/Gradle","date":"2023-06-21T12:02:59.714Z","updated":"2023-06-23T07:13:51.719Z","comments":true,"path":"page/Devolop/Secondary/Android/Gradle.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Android/Gradle.html","excerpt":"","text":"环境变量GRADLE_HOME Path %GRADLE_HOME%\\bin 镜像配置分为全局配置和项目配置 https://www.cnblogs.com/junejs/p/12686834.html 全局配置： .gradle 文件夹，在这个文件夹下面创建一个文本文件 init.gradle 1234567891011121314151617181920212223allprojects&#123; repositories &#123; def ALIYUN_REPOSITORY_URL = &#x27;http://maven.aliyun.com/nexus/content/groups/public&#x27; def ALIYUN_JCENTER_URL = &#x27;http://maven.aliyun.com/nexus/content/repositories/jcenter&#x27; all &#123; ArtifactRepository repo -&gt; if(repo instanceof MavenArtifactRepository)&#123; def url = repo.url.toString() if (url.startsWith(&#x27;https://repo1.maven.org/maven2&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_REPOSITORY_URL.&quot; remove repo &#125; if (url.startsWith(&#x27;https://jcenter.bintray.com/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_JCENTER_URL.&quot; remove repo &#125; &#125; &#125; maven &#123; url ALIYUN_REPOSITORY_URL url ALIYUN_JCENTER_URL &#125; &#125;&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Android","slug":"Devolop/Secondary/Android","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Android/"}],"tags":[]},{"title":"欲望的结构","slug":"Phyloshophy/欲望的结构","date":"2023-06-20T12:31:12.405Z","updated":"2023-06-20T12:45:33.276Z","comments":true,"path":"page/Phyloshophy/欲望的结构.html","link":"","permalink":"https://rchangl.github.io/page/Phyloshophy/%E6%AC%B2%E6%9C%9B%E7%9A%84%E7%BB%93%E6%9E%84.html","excerpt":"","text":"恶（害人）的欲望原则Object 欲望的目的 Obstacle 欲望的障碍 清理 Obstacle 本身带来的快感，会逐渐多于获得 Object 本身。欲望开始不再想要满足自己的欲望，开始想要维持自己的欲望，维持的方法就是把克服 Obstacle 逐渐变成 Object 。 利己就会变成害人：把他人的享乐当成 Obstacle ，我没有满足就是因为他人在享受，我剥夺他人的享乐就会满足自己，“我让别人不爽 &gt; 我自己爽” “我让别人不爽，我心里就爽”。恶 由此产生 参考： 未明子的 “性善性恶” 视频","categories":[{"name":"Phyloshophy","slug":"Phyloshophy","permalink":"https://rchangl.github.io/categories/Phyloshophy/"}],"tags":[]},{"title":"意识形态","slug":"Phyloshophy/意识形态","date":"2023-06-20T10:49:45.469Z","updated":"2023-07-05T07:57:17.036Z","comments":true,"path":"page/Phyloshophy/意识形态.html","link":"","permalink":"https://rchangl.github.io/page/Phyloshophy/%E6%84%8F%E8%AF%86%E5%BD%A2%E6%80%81.html","excerpt":"","text":"虚假的也能够发挥真的作用传说的故事明显是假的，但仍能够在现实当中流传开来，发挥作用。 如：谣言囤货，卫生纸，汉高祖斩白蛇，密谋 武涉已去，齐人蒯通知天下权在韩信，欲为奇策而感动之，以相人说韩信曰：“仆尝受相人之术。”韩信曰：“先生相人何如？”对曰：“贵贱在于骨法，忧喜在于容色，成败在于决断，以此参之，万不失一。”韩信曰：“善。”先生相寡人何如？”对曰：“愿少间。”信曰：“左右去矣。”——《史记·淮阴侯列传》 现代意识形态的运作方式意识形态的作用并不是“洗脑”，改变你的想法；而是虽然自己不相信，知道这是假的，但相信有别人会相信；从而会遵循这一套秩序。 流水线的工人都知道金钱是万恶的，是压迫人的工具； 第一人称的清醒 当相信别人会相信之后，心里就没有道德枷锁了，就可以抛弃共产主义的道德枷锁，心安理得地剥削压迫。意识形态的最终效果是让你在行为上“相信”。 富人以为穷人相信这一套，就给自己穿金戴银；穷人以为富人穿金戴银是因为富人相信这一套，于是假装自己也信这一套，想通过这种方式混上去或者别的怎么样的。最终双方是空对空的，都以为对方是蠢的，结果双方都是蠢的，都被意识形态机制俘获了。 所以现代资本主义意识形态的运作方式 并不是用一个虚假的东西替代真相，而是“让别人也去相信这套谎言，这让才可以让我从中获利”。当你在行动上服从规则时，你的第一人称就已经被俘获了，这时清不清醒已经不重要了，你已经逃不开这个机制了，外表的表现就有一个资本主义景观。所以资本主义意识形态的主宰模式，是以景观的方式来主宰，而不是以第一人称的方式来主宰。 虚构的东西可以产生现实的影响，虚构本身是有现实作用的。资本主义意识形态的虚构是利用一个他者的愚蠢的相信","categories":[{"name":"Phyloshophy","slug":"Phyloshophy","permalink":"https://rchangl.github.io/categories/Phyloshophy/"}],"tags":[]},{"title":"创建 Spring Boot 项目","slug":"Devolop/后端/Spring Boot/创建Spring_Boot项目","date":"2023-06-19T11:16:37.104Z","updated":"2023-09-12T04:28:54.641Z","comments":true,"path":"page/Devolop/后端/Spring Boot/创建Spring_Boot项目.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Spring%20Boot/%E5%88%9B%E5%BB%BASpring_Boot%E9%A1%B9%E7%9B%AE.html","excerpt":"","text":"创建项目官网创建项目并下载 Spring Initializr 创建时添加依赖：Spring Web 会自动添加相应的起步依赖 依赖配置这些依赖在Idea创建时勾选就会添加上去 Web 依赖spring-boot-starter-web Web 开发依赖内嵌了一个Tomcat spring-boot-starter-test 单元测试 其他起步依赖：Spring Boot Reference Documentation SpringBoot 项目有一个父工程，版本号在父工程统一管理。只需要配置 &lt;parent&gt;，依赖不需要配置版本号 spring-boot-devtools ? spring-boot-starter-tomcat ? Mybatis 依赖mybatis MySQL驱动 12345678910111213141516171819202122&lt;dependencies&gt; &lt;!-- mysql驱动 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- mybatis依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter-test&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt;&lt;/dependencies&gt; lombok 工具包简化实体类的定义 配置文件 application.properties引入 mybatis 配置信息 12345678910# 数据库连接spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driverspring.datasource.url=jdbc:mysql://localhost:3306/company_infospring.datasource.username=rootspring.datasource.password=root# mybatis 日志输出 到控制台mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl# mybatis 驼峰命名自动映射 a_column -&gt; aColumnmybatis.configuration.map-underscore-to-camel-case=true 前端静态资源目录resources 下 /static 或 /public 或 /recources 访问时以此为根目录 图","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Spring Boot","slug":"Devolop/后端/Spring-Boot","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/"}],"tags":[]},{"title":"HTTP协议","slug":"Devolop/后端/HTTP协议","date":"2023-06-19T06:06:10.678Z","updated":"2023-10-09T06:59:05.946Z","comments":true,"path":"page/Devolop/后端/HTTP协议.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/HTTP%E5%8D%8F%E8%AE%AE.html","excerpt":"","text":"特点基于TCP协议 基于 请求-响应 模型：一次请求对应一次响应 无状态：每次的 请求-响应 都是独立的，数据不共享 请求GET格式: 请求行 + 请求头POST格式: 请求行 + 请求头 + 空行 + 请求体 请求行： 请求方式 资源路径 协议版本 请求头： key:value 键值对 请求体：JSON对象 请求方式GET 请求大小有限制 POST 请求大小无限制 请求头含义Host 主机名 User-Agent 浏览器版本 Accept 资源类型 如 text/* image/* */* Accept-Language 偏好的语言 如zh-CN Accept-Encoding 可以支持的压缩类型 如 gzip deflate Content-Type 请求主体的数据类型 Content-Length 请求主体的大小（单位Byte） 响应格式： 响应行 + 响应头 + 空行 + 响应体 响应行： 协议 状态码 描述 响应体： 空行后的 （[&#123;id: 1, name: &quot;哈哈&quot;&#125;] 、 .html） 响应状态码1xx 响应中，临时状态码 2xx 成功 3xx 重定向，客户端行为 4xx 客户端错误 5xx 服务器错误 常见响应状态码200 OK 处理成功 302 Found 重定向到Location响应头给定的URL304 Not Modified 未改变，使用本地缓存 400 Bad Request 客户端请求有语法错误403 Forbidden 拒绝提供服务404 Not Found 路径未找到405 Method Not Allowed 请求方式有误，（如必须GET，用了POST）428 Precondition Required 服务器要求有条件的请求，（如必须携带特定的请求头）429 Too Many Requests 定时间内请求过多，配合 Retry-After响应头 使用431 Request Header Fields Too Large 请求头太大，服务器不处理 500 Internal Server Error 服务器端发生不可预期的错误503 Service Unavailable 服务器尚未准备好处理请求 最常见： 200 404 500 响应头Content-Type 响应内容的类型 Content-Length 响应内容的长度 Content-Encoding 该响应的压缩算法（如gzip） Cache-Control 指示客户端应如何缓存（例如max-age&#x3D;300最多缓存300秒） Set-Cookie 当前页面所在的域设置cookie Content-Type 响应类型上传文件之时使用的： 1multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式 常见的媒体格式类型如下： 123456text/html ： HTML格式text/plain ：纯文本格式 text/xml ： XML格式image/gif ：gif图片格式 image/jpeg ：jpg图片格式 image/png：png图片格式 以application开头的媒体格式类型： 12345678application/xhtml+xml ：XHTML格式application/xml ： XML数据格式application/atom+xml ：Atom XML聚合格式 application/json ： JSON数据格式application/pdf ：pdf格式 application/msword ： Word文档格式application/octet-stream ： 二进制流数据（如常见的文件下载）application/x-www-form-urlencoded ： &lt;form encType=””&gt;中默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式） 其余的需要时查询","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"}],"tags":[]},{"title":"个人博客攻略（一） - 搭建个人博客","slug":"Computer Use/Hexo blog/一、搭建个人博客","date":"2023-06-18T11:58:13.545Z","updated":"2023-08-31T19:13:11.876Z","comments":true,"path":"page/Computer Use/Hexo blog/一、搭建个人博客.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/Hexo%20blog/%E4%B8%80%E3%80%81%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html","excerpt":"","text":"本地环境配置软件安装安装如下软件： Node.js Node.js 官网 Git Git 官网 检查是否安装成功，cmd （命令提示符）命令： npm -v git -v npm config set registry https://registry.npm.taobao.org 配置npm的淘宝镜像 安装 Hexonpm install hexo-cli -g（这里-g 是全局安装） hexo -v 检查 Hexo 安装是否成功 npm install hexo-deployer-git --save 安装 hexo-deployer-git 部署发布插件 初始化创建一个空文件夹作为博客根目录，右键空白处点击 Git Bash Here 输入命令： hexo init 初始化 Hexo ，服务器在国外，可能会失败，如果失败了需要多试几次或使用其他手段 Git 初始化配置 设置用户名和密码 git config --global user.name &quot;rchangl&quot; git config --global user.email rchangl@outlook.com –注意邮箱没有双引号 查看用户名和邮箱 git config user.name git config user.email 将本地的博客发布到Github上面已经在本地搭建好了一个可以运行的博客，现在我们把它发布到Github上 首先去 Github 上注册一个账号，然后新建一个仓库 (repository) 仓库名字一定是 username.github.io username 是你 Github 注册的用户名 Github 与本地绑定打开 Windows 用户文件夹（C:\\Users\\用户名），如果有 .ssh 文件夹将他删除 生成 SSH ，输入命令： ssh-keygen -t rsa -C &quot;rchangl@outlook.com&quot; 。（注册Github的电子邮箱地址。）接下来的几个输入提示信息，直接按回车即可 此时，.ssh目录在 Windows 用户文件夹 下被产生，打开文件 id_rsa.pub 复制内容作为 SSH key 打开 Github 项目 -&gt; Setting -&gt; 侧栏下面的 Deploy Keys -&gt; Add deploy key -&gt; SSH and GPG keys -&gt; SSH keys -&gt; New SSH key 在 key 中输入上一步复制的SSH key， Titlle 任意起，Add添加，至此公钥添加完成 Git命令行中，输入命令： ssh -T git@github.com 测试是否绑定成功 如有需要确认的提示，输入yes即可，看到 successfully 字样说明已经成功（因为网络等原因可能会失败，可以多试几次） 常规生成博客hexo cl 清除已生成的文件（避免无用目录残留等） hexo g 生成相关的网页文件 hexo d 将生成好的博客同步到 Github 本地预览服务hexo s 打开本地预览服务，可以在浏览器中打开 http://localhost:4000/访问本地博客 配置 _config.yml 文件上面创建的本地项目文件里有一个 _config.yml 文件，用文本编辑器打开，编辑最后面的部分，改成： 1234deploy: type: git repository: github地址 branch: main github地址 就是项目的git地址 是github项目的网址加上 .git 在Github项目页面可以看得到 注意冒号后面是有一个空格的，这是yaml的语法要求 Git 命令行中，输入命令： hexo g 生成文件 git config --global user.email &quot;电子邮箱地址&quot; 配置email git config --global user.name &quot;rchangl&quot; 配置用户名 设置令牌：进入网页 Github -&gt; Setttings -&gt; Developer settings -&gt; Personal access tokens -&gt; Generate new token Note 随便起一个名字，Expiration 有效期自己看着选，Select scopes 令牌权限全选（有些用不到但是全选也没事），点击生成令牌 成功后跳转的页面有一串字符，一定将他记下，只能看到这一次，再次打开页面后无法再看到 Git 命令行输入命令： hexo d 本地文件上传到Github上面，会弹出一个登录页面，登录即可，密码是上面生成的令牌 （如果报错 ERROR Deployer not found: git ，这是因为没安装 hexo-deployer-git 插件，文章开头的环境配置已说明需要安装） 完成后github上的仓库会有已上传好的文件。这时候可以在互联网访问博客了！网址：用户名.github.io 开始写博客博客已经搭建好了，我们可以开始写博客了！ 博客默认的样式的功能性或美观上有所不足，像是排版不够清晰、有些小功能没有，这时我们可以安装其他的主题。主题是别人已经写好的代码，只需要做一些简单的配置就可以使用，不用自己再去写代码来实现。 网站实例：RC 的博客","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"},{"name":"Hexo blog","slug":"Computer-Use/Hexo-blog","permalink":"https://rchangl.github.io/categories/Computer-Use/Hexo-blog/"}],"tags":[]},{"title":"真情流露-陈慧娴","slug":"音乐/歌词/真情流露-陈慧娴","date":"2023-06-16T02:55:33.960Z","updated":"2023-07-12T13:42:33.266Z","comments":true,"path":"page/音乐/歌词/真情流露-陈慧娴.html","link":"","permalink":"https://rchangl.github.io/page/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/%E7%9C%9F%E6%83%85%E6%B5%81%E9%9C%B2-%E9%99%88%E6%85%A7%E5%A8%B4.html","excerpt":"","text":"——动画《超时空要塞》主题曲歌手：陈慧娴曲：加藤和彦&#x2F;安井一美编曲：卢东尼作词：因葵所属专辑：宝丽金88超白金精选 当天 这世界的空间多冰冷 默默地令我感叹在静静夜晚 长靠于窗边 星光暗淡那晚 我看到漆黑天空星闪过 实在令我惊叹像是在预告 明晚的天际星光灿烂 只想只想真情流露 何时跟他跟他一齐停步欣赏欣赏星河谁造 柔情几许几许铺成长路星光之中仿如迷路 完全只因只因心如迷雾情深到老 今天 我发觉他的心多温暖 像活着在我心间又像未习惯 怀里的拥抱 只恐变幻这晚 我俩到海边相拥 他使我渐渐地觅到璀璨在静静夜晚 呆看他双眼 心轻跳弹路上冰冻 哪怕路上夜静冰冻 来共他相拥抱 多少多少真情流露 随时跟他跟他一齐停步欣赏欣赏星河谁造 柔情几许几许铺成长路星光之中仿如迷路 完全只因只因他来情路来将我抱 多少多少真情流露 随时跟他跟他一齐停步欣赏欣赏星河谁造 柔情几许几许铺成长路星光之中仿如迷路 完全只因只因他来情路来将我抱","categories":[{"name":"音乐","slug":"音乐","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/"},{"name":"歌词","slug":"音乐/歌词","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/"}],"tags":[]},{"title":"流水行云","slug":"音乐/歌词/流水行云","date":"2023-06-16T02:55:33.960Z","updated":"2023-04-02T14:11:07.895Z","comments":true,"path":"page/音乐/歌词/流水行云.html","link":"","permalink":"https://rchangl.github.io/page/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/%E6%B5%81%E6%B0%B4%E8%A1%8C%E4%BA%91.html","excerpt":"","text":"浪去浪复来浪扑近浪叫声彷佛千串追和寻高呼低泣(jap1)的音韵叙述旧人 或有泪但从没有憾浪似他胸襟拥抱风和云真的心不懂怨恨宽敞(cong2)得很他掌管我这一颗心 像风他某天把我遍吻人说错那个他偏说最衬(can3)随心如流水彷如行云错也爱我的他潇洒一生 像海他臂弯把我遍浸人窃笑那个他拥我更近(gan3?)随心如流水彷如行云对与错我的他都交出真 . 路近路或遥没有问没理有几多千里砂和尘高高低低他足印日夜伴行 任责觅自由是放任若要有真的解放不求人天不惊不懂怕地轻松得很他的率性那么清新 像风他某天把我遍吻人说错那个他偏说最衬随心如流水彷如行云错也爱我的他潇洒一生 像海他臂弯把我遍浸人窃笑那个他拥我更近随心如流水彷如行云对与错我的他都交出真 . 像风他某天把我遍吻人说错那个他偏说最衬随心如流水彷如行云错也爱我的他潇洒一生 像海他臂弯把我遍浸人窃笑那个他拥我更近随心如流水彷如行云对与错我的他都交出真","categories":[{"name":"音乐","slug":"音乐","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/"},{"name":"歌词","slug":"音乐/歌词","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/"}],"tags":[]},{"title":"笑红尘","slug":"音乐/歌词/笑红尘","date":"2023-06-16T02:55:33.960Z","updated":"2023-04-10T11:42:46.505Z","comments":true,"path":"page/音乐/歌词/笑红尘.html","link":"","permalink":"https://rchangl.github.io/page/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/%E7%AC%91%E7%BA%A2%E5%B0%98.html","excerpt":"","text":"作词：厉曼婷作曲：李宗盛 红尘多可笑痴情最无聊目空一切也好 此生未了心却已无所扰只想换得半世逍遥 醒时对人笑梦中全忘掉叹天黑得太早 来生难料爱恨一笔勾销对酒当歌我只愿开心到老 风再冷不想逃花再美也不想要任我飘摇 天越高心越小不问因果有多少独自醉倒 今天哭明天笑不求有人能明了一身骄傲 歌在唱舞在跳长夜漫漫不觉晓将快乐寻找 :|| ||: 风再冷不想逃花再美也不想要任我飘摇 天越高心越小不问因果有多少独自醉倒 今天哭明天笑不求有人能明了一身骄傲 歌在唱舞在跳长夜漫漫不觉晓将快乐寻找 :||","categories":[{"name":"音乐","slug":"音乐","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/"},{"name":"歌词","slug":"音乐/歌词","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/"}],"tags":[]},{"title":"隔世感觉 - 刘小慧","slug":"音乐/歌词/隔世感觉","date":"2023-06-16T02:55:33.960Z","updated":"2023-03-07T14:06:51.112Z","comments":true,"path":"page/音乐/歌词/隔世感觉.html","link":"","permalink":"https://rchangl.github.io/page/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/%E9%9A%94%E4%B8%96%E6%84%9F%E8%A7%89.html","excerpt":"","text":"夜长迷样美如雾似烟的空气彷佛你留下气味 但谁人是你疑幻似真的忆记相识某年代某地 梦过我被你掀动着旖旎像隔世感觉情念尚在我心中扑 但这冷夜里影像渐失落何日重遇未知未觉 他世的缘份 一个爱恋我的人心满是疑问 从前是否相爱深今世怎延续 找我他生爱的人冰冷热爱重再温 突然回望你遗憾叹息一口气灯影里忙在暗避 没疑问是你撩动我心底忆记相恋某年代某地 愿再爱着你这梦幻滋味像隔世感觉怀念傍着你的肩膊 但你这夜里影像又失落何日重遇未知未觉 他世的缘份 一个爱恋我的人心满是疑问 从前是否相爱深今世怎延续 找我他生爱的人冰冷热爱重再温 他世的缘份 一个爱恋我的人心满是疑问 从前是否相爱深今世怎延续 找我他生爱的人冰冷热爱重再温","categories":[{"name":"音乐","slug":"音乐","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/"},{"name":"歌词","slug":"音乐/歌词","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/"}],"tags":[]},{"title":"和弦","slug":"音乐/和弦","date":"2023-06-16T02:55:33.945Z","updated":"2023-02-26T03:10:08.258Z","comments":true,"path":"page/音乐/和弦.html","link":"","permalink":"https://rchangl.github.io/page/%E9%9F%B3%E4%B9%90/%E5%92%8C%E5%BC%A6.html","excerpt":"","text":"根音大写字母： A B C D E F G 数字： 1 2 3 4 5 6 7 罗马数字： I II III IV V VI VII 类型大三和弦： 省略* M Maj Major 小三和弦： m* min minor 减三和弦： dim* dimished 希腊字母fai 和弦的作用视频： I 主和弦稳定 明快 开始 完满 V 属和弦属和弦 不安 紧张 缺憾 趋向于I V7 属七和弦属和弦的加强 更紧张、不安 更趋向于I V7 -&gt; I 正格终止 IV 下属和弦过度 沉思 I IV V7 I 开始，可以是 I ，也可以是 IV V7 -&gt; IV 在古典音乐中不被允许 V7 -&gt; IV7 -&gt; I7 蓝调终止 类.. 非专有名词 II 类下属和弦 更为沉思 细思极恐 VI 类主和弦 稍显忧伤 III 类主和弦 莫名伤感 有缺憾但依然完满 I -&gt; VI 可 VI -&gt; I 不行 重复 VI 用来阻碍终止 VII 常用半减七和弦 VII7b5 当属和弦用，许多时候可以直接替代属和弦， 更暗淡 属和弦力量更强 恐惧 不幸 VII7b5 -&gt; V7 可 V7 -&gt; VII7b5 不行， V7 有强烈的回到 I 的趋势 和声大调1 2 3 4 5 b6 7 如果有b6配IV级和弦 和声小调6 7 1 2 3 4 #5","categories":[{"name":"音乐","slug":"音乐","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/"}],"tags":[]},{"title":"网络和安全","slug":"考试/软考/网络和安全","date":"2023-06-16T02:55:33.945Z","updated":"2023-05-26T10:14:59.732Z","comments":true,"path":"page/考试/软考/网络和安全.html","link":"","permalink":"https://rchangl.github.io/page/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/%E7%BD%91%E7%BB%9C%E5%92%8C%E5%AE%89%E5%85%A8.html","excerpt":"","text":"增加时间戳：抵御重放攻击","categories":[{"name":"考试","slug":"考试","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/"},{"name":"软考","slug":"考试/软考","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/"}],"tags":[]},{"title":"计算机组成原理","slug":"考试/软考/计算机组成原理","date":"2023-06-16T02:55:33.945Z","updated":"2023-05-24T14:29:34.431Z","comments":true,"path":"page/考试/软考/计算机组成原理.html","link":"","permalink":"https://rchangl.github.io/page/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.html","excerpt":"","text":"相联存储器以内容为标准存储，一般以地址为标准 按 内容关键字 检索，比较 IO控制方式DMA (Direct Memory Access，直接存储器访问) 硬件处理IO，不需要CPU参与","categories":[{"name":"考试","slug":"考试","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/"},{"name":"软考","slug":"考试/软考","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/"}],"tags":[]},{"title":"软件工程","slug":"考试/软考/软件工程","date":"2023-06-16T02:55:33.945Z","updated":"2023-05-26T04:21:50.269Z","comments":true,"path":"page/考试/软考/软件工程.html","link":"","permalink":"https://rchangl.github.io/page/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html","excerpt":"","text":"开发模型快速原型模型 螺旋模型 RUP 模型 三层C&#x2F;S结构表示层 功能层 数据层 软件测试白盒测试覆盖语句覆盖每条语句至少执行一次。对程序执行逻辑覆盖低（循环可以只跑一遍） 单元测试模块接口 局部数据结构 使用了 未赋值或未初始化的 变量 重要的执行路径 出错处理 边界条件 各种图数据流图环路复杂度 计算： 最小环数 + 1 方法二：V(G)=E-N+2 E是流图中边的条数，N是结点数。 项目进度网络图项目最短工期，就是关键路径是项目中时间最长的活动顺序。 UML 图组件图 组件和组件之间的关系 部署图 唯一能够与硬件建立关系的图 顺序图 （时序图、序列图） 有对象 有顺序清晰 文档高质量文档针对性 （读者是谁） 无二义性 易读性 完整性 灵活性 （根据需要可以进行剪裁） 可追溯性 软件能力成熟度模型 CMM (Capability Maturity Model for Software)1.初始级(initial) 2.可重复级(Repeatable) 3.已定义级(Defined) 4.已管理级(Managed) 5.优化级(Optimizing) 软件质量模型功能性包含安全性 软件开发的7大原则 开闭原则（Open Closed Principle，OCP） 软件实体应当对扩展开放，对修改关闭（Software entities should be open for extension，but closed for modification）。 里氏替换原则（Liskov Substitution Principle，LSP） 有关继承。子类可以扩展父类的功能，但不能改变父类原有的功能。 依赖倒置原则（Liskov Substitution Principle，LSP） 高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象（High level modules shouldnot depend upon low level modules.Both should depend upon abstractions.Abstractions should not depend upon details. Details should depend upon abstractions）。 其核心思想是：要面向接口编程，不要面向实现编程。 单一职责原则（Single Responsibility Principle，SRP） 又称单一功能原则。一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分（There should never be more than one reason for a class to change）。 接口隔离原则（Interface Segregation Principle，ISP） 程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法。 客户端不应该被迫依赖于它不使用的方法（Clients should not be forced to depend on methods they do not use）。该原则还有另外一个定义：一个类对另一个类的依赖应该建立在最小的接口上（The dependency of one class to another one should depend on the smallest possible interface）。 以上两个定义的含义是：要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。 迪米特法则（Law of Demeter，LoD）又叫作最少知识原则 只与你的直接朋友交谈，不跟“陌生人”说话（Talk only to your immediate friends and not to strangers）。其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。 迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。 合成复用原则（Composite Reuse Principle，CRP） 又叫组合&#x2F;聚合复用原则（Composition&#x2F;Aggregate Reuse Principle，CARP）。它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。 如果要使用继承关系，则必须严格遵循里氏替换原则。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。","categories":[{"name":"考试","slug":"考试","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/"},{"name":"软考","slug":"考试/软考","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/"}],"tags":[]},{"title":"Chandelier - Sia","slug":"音乐/歌词/Chandelier","date":"2023-06-16T02:55:33.945Z","updated":"2023-03-14T15:53:29.764Z","comments":true,"path":"page/音乐/歌词/Chandelier.html","link":"","permalink":"https://rchangl.github.io/page/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/Chandelier.html","excerpt":"","text":"Party girls don’t get hurtCan’t feel anything, when will I learnI push it down, push it down I’m the one “for a good time call”Phone’s blowin’ up, they’re ringin’ my doorbellI feel the love, feel the love 1,2,3 1,2,3 drink1,2,3 1,2,3 drink1,2,3 1,2,3 drink Throw em back, till I lose count I’m gonna swing from the chandelier, from the chandelierI’m gonna live like tomorrow doesn’t existLike it doesn’t existI’m gonna fly like a bird through the night, feel my tears as they dryI’m gonna swing from the chandelier, from the chandelier And I’m holding on for dear life, won’t look down won’t open my eyesKeep my glass full until morning light, ‘cause I’m just holding on for tonightHelp me, I’m holding on for dear life, won’t look down won’t open my eyesKeep my glass full until morning light, ‘cause I’m just holding on for tonightOn for tonight Sun is up, I’m a messGotta get out now, gotta run from thisHere comes the shame, here comes the shame 1,2,3 1,2,3 drink1,2,3 1,2,3 drink1,2,3 1,2,3 drink Throw ‘em back till I lose count I’m gonna swing from the chandelier, from the chandelierI’m gonna live like tomorrow doesn’t existLike it doesn’t existI’m gonna fly like a bird through the night, feel my tears as they dryI’m gonna swing from the chandelier, from the chandelier And I’m holding on for dear life, won’t look down won’t open my eyesKeep my glass full until morning light, ‘cause I’m just holding on for tonightHelp me, I’m holding on for dear life, won’t look down won’t open my eyesKeep my glass full until morning light, ‘cause I’m just holding on for tonightOn for tonight, on for tonightAs I’m just holding on for tonightNo I’m I’m just holding on for tonightOn for tonight, on for tonightAs I’m just holding on for tonightAs I’m just holding on for tonightNo I’m I’m just holding on for tonightOn for tonight, on for tonight","categories":[{"name":"音乐","slug":"音乐","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/"},{"name":"歌词","slug":"音乐/歌词","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/"}],"tags":[]},{"title":"做个真的我","slug":"音乐/歌词/做个真的我","date":"2023-06-16T02:55:33.945Z","updated":"2023-04-10T11:47:12.963Z","comments":true,"path":"page/音乐/歌词/做个真的我.html","link":"","permalink":"https://rchangl.github.io/page/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/%E5%81%9A%E4%B8%AA%E7%9C%9F%E7%9A%84%E6%88%91.html","excerpt":"","text":"作词 : 潘伟源作曲 : 李宗盛 愿那风是我愿那月是我柳底飞花是我 对酒当歌做个洒脱的我不理世界说我是何 只要做个真我在笑声里度过懒管它功或过 对酒当歌莫计一切因果风里雨里也快活赏心地过 重做个真的我回问那假的我半生为何 眠后醉醉后眠眠后再醉又眠岂求什么 重做个真的我回望那假的我笑痴又傻 谁是我我是谁无谓理我是谁更加好过 :|| ||: 重做个真的我回问那假的我半生为何 眠后醉醉后眠眠后再醉又眠岂求什么 重做个真的我回望那假的我笑痴又傻 谁是我我是谁无谓理我是谁更加好过 重做个真的我回问那假的我半生为何 眠后醉醉后眠眠后再醉又眠岂求什么 重做个真的我回望那假的我笑痴又傻 谁是我我是谁无谓理我是谁更加好过 :||","categories":[{"name":"音乐","slug":"音乐","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/"},{"name":"歌词","slug":"音乐/歌词","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/"}],"tags":[]},{"title":"早班火车 - Beyond","slug":"音乐/歌词/早班火车","date":"2023-06-16T02:55:33.945Z","updated":"2023-03-14T16:03:07.029Z","comments":true,"path":"page/音乐/歌词/早班火车.html","link":"","permalink":"https://rchangl.github.io/page/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/%E6%97%A9%E7%8F%AD%E7%81%AB%E8%BD%A6.html","excerpt":"","text":"天天清早最欢喜在这火车中再重逢你迎着你那似花气味难定下梦醒日期 玻璃窗把你反映让眼睛可一再缠绵你无奈你哪会知我在凝望着万千传奇 愿永不分散祈求路轨当中永没有终站 WOO-OH盼永不分散仍然幻想一天我是你终站你轻倚我臂弯 火车呜呜那声响在耳边偏偏似柔柔唱难道你教世间漂亮和默令梦境漫长 愿永不分散祈求路轨当中永没有终站 WOO-OH盼永不分散仍然幻想一天我是你终站你轻倚我臂弯 多渴望告诉你知心里面我那意思多渴望可得到你的那注视又再等一个站看你意思三个站盼你会知千个站你却似仍未曾知 愿永不分散祈求路轨当中永没有终站 WOO-OH盼永不分散仍然幻想一天我是你终站你轻倚我臂弯","categories":[{"name":"音乐","slug":"音乐","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/"},{"name":"歌词","slug":"音乐/歌词","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/"}],"tags":[]},{"title":"开发方法（结构化于面向对象）","slug":"考试/软考/开发方法","date":"2023-06-16T02:55:33.929Z","updated":"2023-05-25T16:50:16.180Z","comments":true,"path":"page/考试/软考/开发方法.html","link":"","permalink":"https://rchangl.github.io/page/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95.html","excerpt":"","text":"耦合类型数据耦合单个数据传递 标记耦合多个数据传递（数据结构) 外部耦合共享简单的数据 公共耦合共享复杂的数据 设计模式单一责任原则 SRP(Single Responsibility Principle)又称单一功能原则，面向对象五个基本原则（SOLID）之一。x 对类来说，即一个类应该只负责一项职责。 如类A负责两个不同职责：职责1，职责2。当职责1需求变更而改变A时，可能造成职责2执行错误，所以需要将类A的粒度分为A1，A2 原型化 开发方法先开发个1.0，再迭代开发。 适用于需求不明确的软件开发 原型和增量的区别原型：根本不知道做什么 增量：知道要做的太多了。所以先把核心的先做了","categories":[{"name":"考试","slug":"考试","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/"},{"name":"软考","slug":"考试/软考","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/"}],"tags":[]},{"title":"操作系统","slug":"考试/软考/操作系统","date":"2023-06-16T02:55:33.929Z","updated":"2023-05-25T10:08:16.634Z","comments":true,"path":"page/考试/软考/操作系统.html","link":"","permalink":"https://rchangl.github.io/page/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.html","excerpt":"","text":"进程调度方式有更高优先级的进程到来时 如何分配CPU 可剥夺方式： 优先级更高的程序进程 到来时，强行中断当前，将CPU分配给更高优先级的进程 不可剥夺方式： 必须等待正在运行进程的自动释放占用的CPU 前趋图 PV操作控制进程的同步与互斥。 进程执行前，P操作。进程执行后，V操作。 箭头前有几个进程，就有几个P。箭头后有几个进程，就有几个V。不同进程PV括号内按图相接。 段页式存储管理系统地址结构： 段号、段内页号、页内地址 页的大小固定，段的大小不固定 硬盘的存取时间寻道时间 旋转延迟（旋转达起时间) 读写操作时间 校验码码距（相邻为1），因为这样的编码不存在无效的编码，所以任意的编码都是合法的，也就是说无法发现错误。 码距一个编码系统中两个合法编码，两个二进制当中，不同的位数。如 [1100,1010]码距为2 最小码距为1，无法检错，（因为为1时 没有额外的空间提供 检错，只能表现两个编码的差异） 循环冗余校验码 CRC(Cyclic Redundancy Check)只能检错，不能纠错 海明码m个数据位 （即报文）和r个冗余位（校验位）构成 总长度为n 则 n&#x3D; m+r 文件管理系统 位示图字长 ：一次性能够处理的 比特位数量，每个比特表示一块，0为 未使用， 1为 已使用 物理块 ：每块的大小 容量位 ：总容量，一般需要多个字 (字长 * 物理块) * 字的个数 &#x3D; 容量位 并发共享资源R，R有n个，R的可用数为m。 PV操作，S取值范围为 m-n ~ n 信号量S 表示的是 资源数","categories":[{"name":"考试","slug":"考试","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/"},{"name":"软考","slug":"考试/软考","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/"}],"tags":[]},{"title":"数值表示","slug":"考试/软考/数值表示","date":"2023-06-16T02:55:33.929Z","updated":"2023-05-23T15:17:11.260Z","comments":true,"path":"page/考试/软考/数值表示.html","link":"","permalink":"https://rchangl.github.io/page/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/%E6%95%B0%E5%80%BC%E8%A1%A8%E7%A4%BA.html","excerpt":"","text":"原码 反码 补码 移码原码 首位符号位 负数为1 反码 正数同原码；负数，符号位不变，其余取反 补码 正数同原码；负数，反码加一 移码 补码的符号位取反 浮点数浮点数表示：1N = M * R^e M 是尾数 R 为基数 e 是指数 浮点数运算：对阶 将e转化成一样的，一般往大的靠 尾数计算 M进行运算 结果格式化 结果的N使其在[1,10)之内","categories":[{"name":"考试","slug":"考试","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/"},{"name":"软考","slug":"考试/软考","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/"}],"tags":[]},{"title":"数据库","slug":"考试/软考/数据库","date":"2023-06-16T02:55:33.929Z","updated":"2023-05-26T09:59:56.891Z","comments":true,"path":"page/考试/软考/数据库.html","link":"","permalink":"https://rchangl.github.io/page/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/%E6%95%B0%E6%8D%AE%E5%BA%93.html","excerpt":"","text":"关系模式候选关键字：根据给出的候选关键字，能够推出所有属性 无损连接：两个小的能推出大的，（共同部分能推出任意一边） 保持函数依赖：其中一个分解，能够推出一个函数依赖值。 SQL语句GRANT 授予 授权语句 命令netstat 网络状态 基础IPV4 32bit IPV6 128bit MAC 长度48位","categories":[{"name":"考试","slug":"考试","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/"},{"name":"软考","slug":"考试/软考","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/"}],"tags":[]},{"title":"数据结构","slug":"考试/软考/数据结构","date":"2023-06-16T02:55:33.929Z","updated":"2023-05-25T13:08:17.011Z","comments":true,"path":"page/考试/软考/数据结构.html","link":"","permalink":"https://rchangl.github.io/page/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","excerpt":"","text":"哈夫曼树 （最优二叉树）每层进行二进制编码，第二层码长为1，第三层码长为2","categories":[{"name":"考试","slug":"考试","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/"},{"name":"软考","slug":"考试/软考","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/"}],"tags":[]},{"title":"程序语言","slug":"考试/软考/程序语言","date":"2023-06-16T02:55:33.929Z","updated":"2023-05-25T17:30:14.365Z","comments":true,"path":"page/考试/软考/程序语言.html","link":"","permalink":"https://rchangl.github.io/page/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80.html","excerpt":"","text":"函数调用函数调用执行时，栈顶 创建并临时保留 一段存储空间（栈帧）中。 栈帧存放 返回地址、形参变量、局部变量。 全局变量存放在 静态存储区 语法分析递归子程序分析确定的 自上而下 移近-规约经典的 自下而上 面向对象的继承具体实现 多态特点是动态绑定","categories":[{"name":"考试","slug":"考试","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/"},{"name":"软考","slug":"考试/软考","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/"}],"tags":[]},{"title":"法律","slug":"考试/软考/法律","date":"2023-06-16T02:55:33.929Z","updated":"2023-05-26T10:35:18.756Z","comments":true,"path":"page/考试/软考/法律.html","link":"","permalink":"https://rchangl.github.io/page/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/%E6%B3%95%E5%BE%8B.html","excerpt":"","text":"实用新型专利 保护期为10年发明 20年 注册商标 保护期10年，允许延长","categories":[{"name":"考试","slug":"考试","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/"},{"name":"软考","slug":"考试/软考","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/"}],"tags":[]},{"title":"PHP","slug":"考试/23年上期末/PHP","date":"2023-06-16T02:55:33.913Z","updated":"2023-06-15T00:41:21.726Z","comments":true,"path":"page/考试/23年上期末/PHP.html","link":"","permalink":"https://rchangl.github.io/page/%E8%80%83%E8%AF%95/23%E5%B9%B4%E4%B8%8A%E6%9C%9F%E6%9C%AB/PHP.html","excerpt":"","text":"运算符负数模运算正负号 同 前面的数（被除数），按正数算 三目运算符简写：$res = $a?:&#39;1&#39;; 新简写：$res = $a??&#39;1&#39;; 逻辑运算符&amp;&amp; || ! AND OR NOT XOR 位运算符&lt;&lt; &gt;&gt; &amp; | ^ 数据类型标量类型bool 、 int 、 float 、 string 没有数组 字符串的隐式类型转换12345$str1 = &quot;123aasdf6666&quot;; //开头有数字，为数字内容$v1 = $str1 + 1; // int(124)$str2 = &quot;asdf1234&quot;; // 开头没数组 为0$v2 = $str2 + 1; // int(1) 并且有 Warning: A non-numeric value encountered in 运算转换3&#x2F;2 -&gt; 1.5 预定义常量__LINE__ 当前代码行号 use 使用命名空间数组数组的key为纯数字string时，会转隐式换成int类型 追加数组的下标，已有的最大整数下标+1 array_keys()返回数组中部分的或所有的键名 第一个参数是数组 array_chunk() 分割数组配置1extension=php_gd2.dll ; 绘图扩展 enctype 文件上传将此属性设置为 multipart/form-data 日志log_error 是否记录日志 logError 指定日志写入的文件路径 数学函数rand(min,max) 随机整数 闭区间 sqrt() 平方根 round() — 对浮点数进行四舍五入 函数函数名不区分大小写 array_merge 合并数组1array_merge(array ...$arrays): array 将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。 如果输入的数组中有相同的字符串键名，则该键名后面的值将覆盖前一个值。然而，如果数组包含数字键名，后面的值将 不会 覆盖原来的值，而是附加到后面。 unset($var) 删除数据删除数组的其中一个值时，其余的下标不变，不会往前移 date(&quot;y/m/d&quot;) 格式化输出日期y 2 位数字表示的年份Y 4 位数字完整表示的年份 m 数字表示的月份，有前导零M 三个字母缩写表示的月份 d 月份中的第几天，有前导零的 2 位数字D 星期中的第几天，文本表示，3 个字母 unlink(string $filename, ?resource $context = null): bool 删除文件字符串函数basename 返回路径中的文件名部分默认返回的是带后缀的 第二个参数指定后缀，返回后没有后缀 strcmp 二进制安全字符串比较1strcmp(string $string1, string $string2): int ‘A’ &gt; ‘B’ &gt; ‘Z’ &gt; ‘a’ &gt; ‘b’ &gt; ‘z’ 如果 string1 小于 string2 返回 -1；如果 string1 大于 string2 返回 1；如果两者相等，返回 0。 旧版本返回负数或正数 implode 数组 转 字符串1234implode( string $separator = &#x27;&#x27;, array $array): string 参数 separator 为分割符 explode将字符串转换为数组，第一个参数separator为分隔符 preg_match 正则表达式匹配第三个参数，保存匹配结果，可选 Cookiesetcookie() 创建cookie 图像imagecopy 拷贝图像的一部分imagecopymerge 可添加半透明水印 拷贝并合并图像的一部分当 最后一个参数为 100 时，同 imagecopy $_SERVER 数组HTTP_HOST 获取Web服务器地址信息 流程替代语法其基本形式就是把if，while，for，foreach 和 switch的左花括号（{）换成冒号（:），把右花括号（}）分别换成 “endif;”，“endwhile;”，“endfor;”，“endforeach;”和“endswitch;”。 文件fopen 文件指针123456fopen( string $filename, string $mode, bool $use_include_path = false, ?resource $context = null) mode 指定指针位置和读写方式 ctime 属性windows 修改文件名 不变 linux 修改文件权限、内容、路径 会改变","categories":[{"name":"考试","slug":"考试","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/"},{"name":"23年上期末","slug":"考试/23年上期末","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/23%E5%B9%B4%E4%B8%8A%E6%9C%9F%E6%9C%AB/"}],"tags":[]},{"title":"操作系统","slug":"考试/23年上期末/操作系统","date":"2023-06-16T02:55:33.913Z","updated":"2023-06-14T01:15:32.021Z","comments":true,"path":"page/考试/23年上期末/操作系统.html","link":"","permalink":"https://rchangl.github.io/page/%E8%80%83%E8%AF%95/23%E5%B9%B4%E4%B8%8A%E6%9C%9F%E6%9C%AB/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.html","excerpt":"","text":"调度算法概念 提交时间（到达时间） 开始时间 运行时间（服务时间、需运行时间） 周转时间 &#x3D; 完成时间-提交时间 完成时间 &#x3D; 开始时间+运行时间 平均周转时间：周转时间&#x2F;进程数 带权周转时间：周转时间&#x2F;运行时间 平均带权周转时间：带权周转时间&#x2F;进程数 甘特图：横轴时间，纵轴项目 先来先服务按 提交时间 顺序 开始 开始时间 为 上一个的完成时间 短进程优先 &#x2F; 短作业优先 （SJF）已经提交的进程里，运行时间短的优先 时间片轮转给定时间片时长 已提交的进程 轮流执行 刚提交的放在Ready队列最前（立马执行），然后按队列轮流执行 优先权一般数字越大，优先级越高 在已提交的进程里，优先级高的先执行 存储管理逻辑地址 物理地址 逻辑页号 物理块大小 &#x3D; 页大小 页和物理块的大小是一致的，所以 页内地址&#x3D;块内地址 页式存储管理页号 &#x3D; (int)(逻辑地址&#x2F;页大小) 偏移 &#x3D; 逻辑地址 mod 页大小 页号 映射 物理块号的地址映射 物理地址 &#x3D; 块号 * 块大小 + 偏移 页号超出作业的表内，会发生 地址越界 分页虚拟存储管理系统的 缺页次数、缺页中断率 存储块中选一个替换 重复跳过 最佳 置换算法 OPT替换右边没有的。 有多个页是右边没有的，任意选一个替换。有多个页是右边有的，替换整表最右边的一个。 先进先出 页面置换算法 FIFO轮流替换，重复的不计 最近久未使用 页面置换算法 LRU最近久未使用的一个替换 选择题进程状态：等待、就绪、执行 阻塞 &#x3D;&#x3D; 等待 进程状态至少有三态，也有五态模型 建立进程：建立进程控制块 CPU 原语是硬件处理器能够直接执行的机器指令。 原语对进程 管理和控制 进程：动态程序：静态 临界资源：共享资源临界区：访问临界资源的那段程序 死锁预防死锁 必须保留互斥条件 死锁产生的条件： 互斥条件临界资源是独占资源，进程应互斥且排他的使用这些资源。 占有和等待条件（请求与保持）进程在请求资源得不到满足而等待时，不释放已占有资源。 不剥夺条件（不可抢占）已获资源只能由进程自愿释放，不允许被其他进程剥夺。 循环等待条件（环路条件）等待资源的环路，有序的分配资源策略可以解决 死锁只有在这四个条件同时满足时出现。 内存&#x2F;存储 管理页式管理、段式管理和段页式管理 页式管理：优点：没有外碎片，每个内碎片不超过页的大小。缺点：增加了机器成本和系统开销。 段式管理：优点：方便编程、保护、共享。有利于动态链接缺点：会产生碎片，不方便管理。逻辑地址一部分表示段号，其余表示每个段的长度 段页式管理：不存在碎片问题 可变分区分配算法：从空闲块列表中查找最小的足够大的空闲块并将其分配给进程。首次适应汸： 按地址递增排序减少碎片化问题，但需要更多的计算资源。合并空闲区 固定分区存储管理设置上下限寄存器 重定位：逻辑地址 -&gt; 物理地址 虚拟存储器最大实际容量&#x3D; min (计算机地址，内存+辅存) 请页式存储管理：缺页中断属于程序中断，发生缺页中断继续执行被中断的指令页的大小与缺页率成反比 虚拟存储器（虚拟地址）理论基础：局部性原理 硬件缓冲空间换时间 通道I&#x2F;O 专用处理机 文件系统文件属性+管理软件+文件系统接？ 位示图是利用二进制的一位来表示磁盘中的一个盘块的使用情况。 填空临界区是个准则：空闲让进 （忙则等待、有限等待、让权等待）","categories":[{"name":"考试","slug":"考试","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/"},{"name":"23年上期末","slug":"考试/23年上期末","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/23%E5%B9%B4%E4%B8%8A%E6%9C%9F%E6%9C%AB/"}],"tags":[]},{"title":"如何了解一家公司","slug":"劳动/劳动与法律/如何了解一家公司","date":"2023-06-16T02:55:33.913Z","updated":"2023-03-23T14:03:56.773Z","comments":true,"path":"page/劳动/劳动与法律/如何了解一家公司.html","link":"","permalink":"https://rchangl.github.io/page/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/%E5%A6%82%E4%BD%95%E4%BA%86%E8%A7%A3%E4%B8%80%E5%AE%B6%E5%85%AC%E5%8F%B8.html","excerpt":"","text":"省事花钱的方法：天眼查、企查查…… 信息来源： 全国企业信用信息公示系统：http://www.gsxt.gov.cn/index.html 中国裁判文书的官网：http://wenshu.court.gov.cn/ 中国执行信息公开网： http://zxgk.court.gov.cn/ 工商信息全国企业信用信息公示系统 可以查到法人、机构号、股东等等几乎大部分企业信息。 直接搜索公司名，如果搜不到结果，说明这个“公司”没有登记注册。 点进去查看详细信息，可以看到营业执照的详细信息，留意登记状态，如果是注销、吊销、停业、清算，也是风险比较大的一个公司。 页面往下，可以看到年报信息，企业年度报告不仅可以看到企业的地址、联系方式，还可以看到主营业务活动和社保信息。社保信息里，如果缴纳人数非常少或者为0，那么除非公司本身人少，否则可能是个空壳公司或者不交社保。 风险信息中国裁判文书网 在高级搜索里，全文检索输入公司名称，案由选择民事案由（劳务纠纷属于民事）。 通过判决信息，有可能可以知道公司的业务信息，是否和员工有劳务纠纷。 企业法人的风险信息中国执行信息公开网 综合查询被执行人，看看是否有债务风险，降低欠薪概率。 官网和负面新闻的查找看看官网的关于我们，是否有公司的介绍信息。接着利用搜索引擎，搜一下有没有其他公司相关的负面新闻，可以使用关键词： 【公司名】 裁员 （或者其他你想找的关键词） 岗位看看这家公司所招的岗位，要是一堆，二、三十个的那种，而且好多岗位重复的，那肯定不靠谱。 需要了解的信息薪资情况 薪资构成 底薪是有责还是无责的（特别是销售岗位，有些底薪是和业绩挂钩） 绩效考核周期按月还是按照季度 工资几号发？年终奖什么时候发 有没有年终奖或13薪 试用期情况 试用期多长时间（这和劳动合同期限挂钩，劳动法规定最长不超过6个月） 试用期工资多少（最低不能低于当地最低工资标准） 试用期有提成吗 试用期考核绩效吗 福利待遇 五险一金什么时候缴纳（大部分公司有个时间节点，月初入职交当月，月底入职次月交） 五险一金按什么基数缴纳（问清楚按照最低工资标准还是实际工资缴纳） 还有其他什么福利（体检、饭堂、班车等） 有的公司并不在当地缴纳五险一金，也要问清楚。 工作时间 上下班时间、休息时间是怎么样的 法定节假日正常休息吗 加班是调休还是给加班费 平时忘记打卡、迟到、请假等是怎么扣钱的 公司有没有带薪年休假 合同情况 入职后多久签订劳动合同 合同签的是几年 是按照实际工资标准签订的吗（可以看出公司福利，好的公司会按照实际工资签订和购买五险一金） 是否有敬业限制协议 工作情况 我们部门是负责什么工作的 部门有几个人？大家的分工情况如何 我应聘的岗位主要是负责什么的 岗位有无考试、考证等要求 要不要出差的 工作的地点在哪里，是否有外派可能 岗位发展 入职后会有什么培训 平时有什么学习机会 本岗位的晋升路径是什么 是否有透明的涨薪和调薪制度 公司前景（可以通过其他途径自己了解） 公司人员规模（小于20人的公司慎重！） 公司经营方向 成立时间 注册资本 业界的知名度和口碑如何 行业前景如何 网上是否有关公司的新闻 面试时看看公司的办公环境、员工氛围 部分参考：如何搜集一家公司的信息？ - 普通人OP的回答 - 知乎","categories":[{"name":"劳动","slug":"劳动","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/"},{"name":"劳动与法律","slug":"劳动/劳动与法律","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/"}],"tags":[]},{"title":"劳动法","slug":"劳动/劳动与法律/劳动法","date":"2023-06-16T02:55:33.913Z","updated":"2023-07-02T04:58:37.900Z","comments":true,"path":"page/劳动/劳动与法律/劳动法.html","link":"","permalink":"https://rchangl.github.io/page/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/%E5%8A%B3%E5%8A%A8%E6%B3%95.html","excerpt":"","text":"维护权益途径12333 劳动监察大队举报 劳动仲裁 三方协议三方协议是民事协议，需要双方公平，如果学生需要付违约金，则企业也需要付违约金，否则为不公平条款。还有一些十多万的违约金，明显超出了公司实际的损失，不会受到支持。目前比较认可的金额是5000左右，超出的都不支持 三方协议在入职后失效，可以里职 …外卖员，要穿制服，有检查，是人格从属属性 常见劳动监察大队仲裁发起离职后一年内 仲裁申请书，五四劳委群 3~3.5年 算 3.5年 （四十四条） 每个月工资不一样，平均工资 请求裁决 被申请人 向 申请人 支付经济补偿 XXX 元 证据劳动合同（所有） 工资转帐记录 时长一般一次就出结果 工资按实际发放工资算 加班费不太好主张 终裁劳动法第四十七条 终局裁决后，企业方立即生效，劳动者不 劳务合同可以立即终止 ？ 辞退硬：要公司离职通知，盖章。与公司签订的合同，而不是领导。 软：要申请失业保险，要辞退书。 赔偿额度：2N(工作年限x月工资) 拖欠的工资 应休 未休年休假 工资 （5天 * 日工资 * 300%）。一般单位不安排，可以主张申请 非法克扣算到拖欠工资里","categories":[{"name":"劳动","slug":"劳动","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/"},{"name":"劳动与法律","slug":"劳动/劳动与法律","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/"}],"tags":[]},{"title":"租房","slug":"劳动/劳动与法律/租房","date":"2023-06-16T02:55:33.913Z","updated":"2022-12-04T14:11:50.549Z","comments":true,"path":"page/劳动/劳动与法律/租房.html","link":"","permalink":"https://rchangl.github.io/page/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/%E7%A7%9F%E6%88%BF.html","excerpt":"","text":"床、窗户、柜子、桌子、门禁时间 混住 安全 通勤 地铁 共享 假房东 证明资料 语气态度","categories":[{"name":"劳动","slug":"劳动","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/"},{"name":"劳动与法律","slug":"劳动/劳动与法律","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/"}],"tags":[]},{"title":"Photoshop 使用Note","slug":"Tools/Photoshop 使用Note","date":"2023-06-16T02:55:33.898Z","updated":"2022-11-07T13:38:06.878Z","comments":true,"path":"page/Tools/Photoshop 使用Note.html","link":"","permalink":"https://rchangl.github.io/page/Tools/Photoshop%20%E4%BD%BF%E7%94%A8Note.html","excerpt":"","text":"磁性索套工具按 Del 键撤销最后一个节点。 选中非透明区域CTRL + 鼠标点击图层 反相图像 &gt; 调整 &gt; 反相] Ctrl i 黑色变白色、白色变黑色","categories":[{"name":"Tools","slug":"Tools","permalink":"https://rchangl.github.io/categories/Tools/"}],"tags":[]},{"title":"费曼学习法","slug":"Tools/费曼学习法","date":"2023-06-16T02:55:33.898Z","updated":"2022-12-18T13:56:08.316Z","comments":true,"path":"page/Tools/费曼学习法.html","link":"","permalink":"https://rchangl.github.io/page/Tools/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95.html","excerpt":"","text":"费曼是个物理学家，得过诺贝尔奖，教育学上也有很大名气。 方法主要就是通过给他人讲解来学习巩固自己的知识 公式化的操作分为四步： 在纸上写下概念的名字 自己用语言独立地将其表述 发现问题，查找资料再次学习 找出难理解的词，再次简化对难词的表述","categories":[{"name":"Tools","slug":"Tools","permalink":"https://rchangl.github.io/categories/Tools/"}],"tags":[]},{"title":"数字编码","slug":"Tools/数字编码","date":"2023-06-16T02:55:33.898Z","updated":"2023-08-28T18:10:52.114Z","comments":true,"path":"page/Tools/数字编码.html","link":"","permalink":"https://rchangl.github.io/page/Tools/%E6%95%B0%E5%AD%97%E7%BC%96%E7%A0%81.html","excerpt":"","text":"数字编码是………… 65 礼物","categories":[{"name":"Tools","slug":"Tools","permalink":"https://rchangl.github.io/categories/Tools/"}],"tags":[]},{"title":"新型冠状病毒肺炎 COVID-19","slug":"T/COVID-19","date":"2023-06-16T02:55:33.898Z","updated":"2022-12-02T17:09:37.153Z","comments":true,"path":"page/T/COVID-19.html","link":"","permalink":"https://rchangl.github.io/page/T/COVID-19.html","excerpt":"","text":"以下为原文摘录，没有删改和添加 湖北专家：新冠肺炎是自限性疾病 不必过分恐慌 2020-02-10 武汉市金银潭医院党委副书记、院长张定宇：“目前在我们医院的治愈率还是很高的，目前我们医院收治的新冠肺炎的患者累计超过了1500余例，绝大部分患者，包括重症及危重症患者，经过各种氧疗、对症治疗和免疫调节治疗以后，均可以顺利出院，市民不必过分恐慌。” 河南：不能长期无差别封控！郑州卫健委发文：新冠肺炎不可怕，可防可治 2022年11月01日 郑州市卫健委官方微信公众号“健康郑州”10月31日发布《新冠肺炎不可怕，可防可治，郑州权威专家来解答》一文介绍， 郑州市卫健委邀请郑州市第一人民医院、郑州市疾病预防控制中心以及郑州市中医院专家，就新冠肺炎疫情防控有关问题进行解答。 针对感染新冠后如何用药？专家表示，新冠病毒感染是自限性疾病，大家不用过于惊慌。感染后根据病情、症状等情况，在专科医生指导下可选择口服中成药藿香正气胶囊(口服液)、连花清瘟颗粒(胶囊)、金花清感颗粒、疏风解毒胶囊(颗粒)等进行治疗。同时保证充足睡眠，多饮开水，保持心情舒畅，规律饮食，有助于疾病的快速恢复。 新冠感染死亡率到底是多少呢？ - 知乎专栏 2021-04-09 美国新冠感染死亡率 &#x3D; 死亡人数 &#x2F; 感染人数 &#x3D; 560620 &#x2F; 95400000 &#x3D; 0.587% 综上笔者得出的结论是，新冠感染死亡率的真实数据虽然极难把握，但是应该是在2.36‰的中偏下的水平，也就是在2.33‰之间，或者说大约在千分之2~3之间。随着抗体阳性率检测的大规模的进行和各种数据的完善，我们将会得到更加正确的死亡率的数值。 流行性感冒 - 病毒病预防控制所 2015-06-07 人群对流感病毒普遍易感。流感病毒常常发生变异，例如甲型流感病毒在人群免疫压力下，每隔2～3年就会有流行病学上重要的抗原变异株出现，感染率最高的通常是青少年。发病率高但死亡率低（季节性流感病死率一般为0.003～0.03%）。死亡者大多为年迈体衰、年幼多病、晚期孕产妇或有慢性基础疾病者。流感病毒变异也会导致流感出现暴发或大流行，如2009年发生的甲型H1N1流感就是由一种变异的新型流感病毒引起的。 中国新冠奥密克戎死亡率和重症率 2022-11-19 国内8月以来新冠阳性数十万，死亡零例，大家都知道。死亡率零。什么？你不信？国内官方数字都不信？ 死亡率零，重症率千分之零点五。从个别地区公布的重症信息，都是高龄基础病患者，没新冠已是重症。 Self-limiting (biology) - Wikipedia 自限性 (医学) - 维基百科 在临床医学中，自限性指的是其病程不需要治疗就能缓解[1]的疾病。许多病毒性疾病都是自限性疾病；例如上呼吸道感染，病人无需服用任何药物也可痊愈。不过虽然自限性疾病会自己消失，但服用药物能让疾病更早痊愈；并且若病情加重或症状会使病人虚弱，病人依旧需要治疗[2][3]。 https://link.springer.com/article/10.1186/s12879-021-06670-y","categories":[{"name":"T","slug":"T","permalink":"https://rchangl.github.io/categories/T/"}],"tags":[]},{"title":"敏感词List","slug":"T/敏感词List","date":"2023-06-16T02:55:33.898Z","updated":"2023-06-13T07:04:29.994Z","comments":true,"path":"page/T/敏感词List.html","link":"","permalink":"https://rchangl.github.io/page/T/%E6%95%8F%E6%84%9F%E8%AF%8DList.html","excerpt":"","text":"马克思 宗教 死","categories":[{"name":"T","slug":"T","permalink":"https://rchangl.github.io/categories/T/"}],"tags":[]},{"title":"关于鸿蒙","slug":"T/鸿蒙","date":"2023-06-16T02:55:33.898Z","updated":"2023-09-19T08:21:00.832Z","comments":true,"path":"page/T/鸿蒙.html","link":"","permalink":"https://rchangl.github.io/page/T/%E9%B8%BF%E8%92%99.html","excerpt":"","text":"2019年5月17日，由任正非领导的华为操作系统团队开发自主产权操作系统——鸿蒙。2019年5月24日，国家知识产权局商标局网站显示，华为已申请“华为鸿蒙”商标，申请日期是2018年8月24日，注册公告日期是2019年5月14日，专用权限期是从2019年5月14日到2029年5月13日。2019年8月9日，华为正式发布鸿蒙系统。同时余承东也表示，鸿蒙OS实行开源。 声称自主研发 但暴露了： “此应用专为旧版鸿蒙打造”是什么意思？ - 知乎 如何看待华为鸿蒙系统切换英文变安卓？ - 知乎 如何看待鸿蒙os里全是android痕迹? - 知乎 开发者模式可看到ADB 为什么鸿蒙系统里已经找不到Android字样了，部分网友依然认为鸿蒙是安卓套壳？ - 素直流光的回答 - 知乎 （华为p50，更换cpu套件之后可以安装安卓专用的Magisk，甚至可以开机加载安卓的zygote实现功能。也可以连接Android Debug Bridge。） 为啥鸿蒙3.0谷歌能删东西? - 知乎 2023-04-01 拼多多事件，谷歌play可以删除应用软件 为什么很多人在质疑鸿蒙（Harmony OS 3.0）？ - 黑爵士的回答 - 知乎发布于 2023-04-24 19:15可用adb命令：禁止鸿蒙组件，仍然可用鸿蒙；把 android 禁止（pm disable-user android）， 为什么华为官方把鸿蒙系统在国外标注的是EMUI？ - 知乎 鸿蒙可被root","categories":[{"name":"T","slug":"T","permalink":"https://rchangl.github.io/categories/T/"}],"tags":[]},{"title":"结构体 struct - Rust","slug":"Devolop/Main/Rust/结构体 struct","date":"2023-06-16T02:55:33.882Z","updated":"2022-11-23T16:07:00.751Z","comments":true,"path":"page/Devolop/Main/Rust/结构体 struct.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/%E7%BB%93%E6%9E%84%E4%BD%93%20struct.html","excerpt":"","text":"1234struct Rectangle &#123; width: u32, height: u32,&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"}],"tags":[]},{"title":"软件开发流程","slug":"Devolop/Main/项目开发/软件开发流程","date":"2023-06-16T02:55:33.882Z","updated":"2023-04-04T15:00:01.457Z","comments":true,"path":"page/Devolop/Main/项目开发/软件开发流程.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B.html","excerpt":"","text":"需求 需求文档 -&gt; 业务流程图 设计 开发 测试 投入运行","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"项目开发","slug":"Devolop/Main/项目开发","permalink":"https://rchangl.github.io/categories/Devolop/Main/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"Cargo - Rust","slug":"Devolop/Main/Rust/项目配置管理/Cargo","date":"2023-06-16T02:55:33.882Z","updated":"2023-09-29T13:23:30.425Z","comments":true,"path":"page/Devolop/Main/Rust/项目配置管理/Cargo.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/Cargo.html","excerpt":"","text":"创建项目12$ cargo new world_hello$ cd world_hello Rust 项目主要分为两个类型： bin 可运行的项目， lib 依赖库项目。 早期 cargo 在创建项目时，需要添加 --bin 参数： cargo new world_hello --bin ，现在已不再需要，默认就是 bin 项目 项目结构： 1234567$ tree.├── .git├── .gitignore├── Cargo.toml└── src └── main.rs 运行项目cargo runcargo run 默认是运行 debug 模式，有额外的输出，添加 --release 以发布版本编译运行 手动编译和运行项目编译 cargo build 12$ cargo build Finished dev [unoptimized + debuginfo] target(s) in 0.00s 运行 ./xxx 12$ ./target/debug/world_helloHello, world! cargo check 检查项目123$ cargo check Checking world_hello v0.1.0 (/Users/sunfei/development/rust/world_hello) Finished dev [unoptimized + debuginfo] target(s) in 0.06s 比 cargo run 和 cargo build 更快地检查项目代码，常用 Cargo add 添加依赖1.62 版本新增 可以使用 cargo add 直接从命令行添加新的依赖项 123$ cargo add log$ cargo add serde --features derive$ cargo add nom@5","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"},{"name":"项目配置管理","slug":"Devolop/Main/Rust/项目配置管理","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"}],"tags":[]},{"title":"Rust 输入输出","slug":"Devolop/Main/Rust/Rust 输入输出","date":"2023-06-16T02:55:33.867Z","updated":"2022-08-30T18:11:51.112Z","comments":true,"path":"page/Devolop/Main/Rust/Rust 输入输出.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/Rust%20%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA.html","excerpt":"","text":"从命令行&#x2F;标准输入流 stdin() 中读取数据fn main()&#123; let mut line = String::new(); println!(&quot;请输入你的名字:&quot;); let b1 = std::io::stdin().read_line(&amp;mut line).unwrap(); println!(&quot;你好 , &#123;&#125;&quot;, line); println!(&quot;读取的字节数为：&#123;&#125;&quot;, b1); &#125; 标准库提供的 `std::io::stdin()` 会返回返回当前进程的标准输入流 `stdin` 的句柄。 而 `read_line()` 则是标准入流 `stdin` 的句柄上的一个方法，用于从标准输入流读取一行的数据。 `read_line()` 方法的返回值值一个 `Result` 枚举，而 `unwrap()` 则是一个帮助方法，用于简化可恢复错误的处理。它会返回 `Result` 中存储的实际值。 `read_line()` 方法会自动删除行尾的换行符 `\\n`","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"}],"tags":[]},{"title":"Rust Crate","slug":"Devolop/Main/Rust/Rust Crate","date":"2023-06-16T02:55:33.867Z","updated":"2022-09-05T13:24:17.273Z","comments":true,"path":"page/Devolop/Main/Rust/Rust Crate.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/Rust%20Crate.html","excerpt":"","text":"crate 是个独立的功能模块。 在 crates.io 可以找到全部 crate 使用 cargo 命令搜索 crate : $ cargo search crate_name 在 Cargo.toml 文件下，[dependencies] 下添加 参考： Rust 入门指南（crate 管理） - 知乎文章","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"}],"tags":[]},{"title":"range - Rust","slug":"Devolop/Main/Rust/range","date":"2023-06-16T02:55:33.867Z","updated":"2022-11-27T15:32:24.485Z","comments":true,"path":"page/Devolop/Main/Rust/range.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/range.html","excerpt":"","text":"1..3 表示1到2 1..=3 表示1到3","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"}],"tags":[]},{"title":"Rust 内置枚举","slug":"Devolop/Main/Rust/内置枚举","date":"2023-06-16T02:55:33.867Z","updated":"2023-06-18T13:48:12.669Z","comments":true,"path":"page/Devolop/Main/Rust/内置枚举.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/%E5%86%85%E7%BD%AE%E6%9E%9A%E4%B8%BE.html","excerpt":"","text":"Option 枚举内置的一个枚举 12345678910111213141516enum Option&lt;T&gt; &#123; Some(T), // 有值 None // 无值&#125;## match 枚举```rustmatch car &#123; CarType::Sedan =&gt; &#123; // 内容 &#125;, CarType::SUV =&gt; &#123; // 内容 &#125;&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"}],"tags":[]},{"title":"Rust 数据类型","slug":"Devolop/Main/Rust/数据类型","date":"2023-06-16T02:55:33.867Z","updated":"2023-06-18T13:48:29.302Z","comments":true,"path":"page/Devolop/Main/Rust/数据类型.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Rust/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","excerpt":"","text":"Integer 整数类型 Length Signed Unsigned 8-bit i8 u8 16-bit i16 u16 32-bit i32 u32 64-bit i64 u64 128-bit i128 u128 arch isize usize 不同进制的表示 Number literals Example Decimal 98_222 Hex 0xff Octal 0o77 Binary 0b1111_0000 Byte (u8 only) b&#39;A&#39; Floating-Point Types 浮点类型f64 f32 默认 64位 12345fn main() &#123; let x = 2.0; // f64 let y: f32 = 3.0; // f32&#125; 数值运算加、减、乘 同其他语言的一样表示 let floored = 2 / 3; // Results in 0 除 let remainder = 43 % 5; 取余 Boolean 布尔bool true false The Character 字符支持 Unicode 字符，可以是各种语言文字和表情符号 12345fn main() &#123; let c = &#x27;z&#x27;; let z: char = &#x27;ℤ&#x27;; // with explicit type annotation let heart_eyed_cat = &#x27;😻&#x27;;&#125; Tuple 元组符合数据类型 123fn main() &#123; let tup: (i32, f64, u8) = (500, 6.4, 1);&#125; 空元组叫做 unit 。 () 拆解元组1234567fn main() &#123; let tup = (500, 6.4, 1); let (x, y, z) = tup; println!(&quot;The value of y is: &#123;y&#125;&quot;);&#125; 读取元组的元素. 123456789fn main() &#123; let x: (i32, f64, u8) = (500, 6.4, 1); let five_hundred = x.0; let six_point_four = x.1; let one = x.2;&#125; 数组固定长度，索引从0开始，编译时会检查简单的数组越界 123fn main() &#123; let a = [1, 2, 3, 4, 5];&#125; 制定数据类型和长度： 1let a: [i32; 5] = [1, 2, 3, 4, 5]; 简写: let a = [3; 5]; 等价于 let a = [3, 3, 3, 3, 3]; enum 枚举12345678// 定义：enum 枚举名 &#123; variant1, variant2&#125;// 使用枚举：枚举名::variant Debug 模式输出枚举定义枚举的上一行加上 #[derive(Debug)] 实现trait std::fmt::Debug println!(&quot;&#123;:?&#125;&quot;, val)","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"}],"tags":[]},{"title":"Python搭建HTTP文件共享","slug":"Devolop/Secondary/Python/Python搭建HTTP文件共享","date":"2023-06-16T02:55:33.867Z","updated":"2023-01-03T03:27:05.435Z","comments":true,"path":"page/Devolop/Secondary/Python/Python搭建HTTP文件共享.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Python/Python%E6%90%AD%E5%BB%BAHTTP%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB.html","excerpt":"","text":"Python3 快速创建局域网 HTTP 文件共享服务器 其中 8888 为端口(默认端口也就是8000)，可以根据自己的来改动，只要不被占用就好。 1python -m http.server 8888","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Python","slug":"Devolop/Secondary/Python","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Python/"}],"tags":[]},{"title":"Pdb Python debugger","slug":"Devolop/Secondary/Python/Pdb Python debugger","date":"2023-06-16T02:55:33.867Z","updated":"2023-04-07T12:22:40.674Z","comments":true,"path":"page/Devolop/Secondary/Python/Pdb Python debugger.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Python/Pdb%20Python%20debugger.html","excerpt":"","text":"Python 自带的命令行 debugger 基本用法 在需要调试的地方添加： 1breakpoint() Pdb 命令执行到断点后显示 (Pdb) 即进入 debugger p x 打印变量 x w while 查看调用栈 l lst 查看当前位置附近的源代码 （当前行前后的11行代码）再输入 l 会往下再翻11行l. 回到当前的行数 ll 显示当前函数的全部代码 u up d down 上调 下调 当前帧（打印变量时，会从当前局部变量查找） n next 运行一行程序 s step 进入函数，当当前行没有函数时，效果等同于 n until 运行到比当前行数大为止until 10 运行到行数大于等于10为止 r return 停在函数返回之前 c continue 让程序恢复正常运行 q quit 退出 debug 以 pdb 方式运行python -m pdb example.py 会在第一个可以停下来的地方停下 pdb 设置断点b 5 break 5 在第五行设置断点b break 列出所有的 breakpointb 函数名 在函数里设下断点 clear 1 删除编号为 1 的 breakpointclear 删除所有 breakpoint","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Python","slug":"Devolop/Secondary/Python","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Python/"}],"tags":[]},{"title":"yt-dlp","slug":"Devolop/Secondary/Python/yt-dlp","date":"2023-06-16T02:55:33.867Z","updated":"2022-11-28T14:09:37.480Z","comments":true,"path":"page/Devolop/Secondary/Python/yt-dlp.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Python/yt-dlp.html","excerpt":"","text":"环境安装配置ffmpeg aria2 下载、配置环境变量 yt-dlp 安装pip install yt-dlp 使用yt-dlp -F [视频链接] 12-F #查看视频格式构成--proxy [系统代理] #填写你的系统代理设置，如果使用全局模式可不使用此语句。 yt-dlp -f [下载ID] [代理配置] [视频链接] [合并语句] [外部下载器选择] [下载器参数] 12345-f [id] #选择下载内容，注意和 -F 区分。例子中使用137+140，如果你只下载720p则填写22就好，后面的合并语句可不填写。--proxy #代理配置 见前文--merge-output-format [合并输出格式] #例子中选择mp4作为输出格式--external-downloader [下载器名称] #下载器选择 例子中选择aria2c--downloader-args [下载器名称]:&quot;[下载器配置]&quot; #下载器配置语句 例子中 x 16 代表16线程下载 -k 1M 代表块大小为1M 但youtube不支持分块故此句可忽略 yt-dlp -f 137+140 --proxy socks5://127.0.0.1:8080 https://video_url --merge-output-format mp4 --external-downloader aria2c --downloader-args aria2c:&quot;-x 16 -k 1M&quot; yt-dlp -f 137+140 --proxy https://video_url --merge-output-format mp4 --external-downloader aria2c --downloader-args aria2c:&quot;-x 4 -k 1M&quot;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Python","slug":"Devolop/Secondary/Python","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Python/"}],"tags":[]},{"title":"Clion Debug模式输出顺序问题","slug":"Devolop/Secondary/C/Clion Debug模式输出顺序问题","date":"2023-06-16T02:55:33.851Z","updated":"2022-11-27T03:18:20.820Z","comments":true,"path":"page/Devolop/Secondary/C/Clion Debug模式输出顺序问题.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/C/Clion%20Debug%E6%A8%A1%E5%BC%8F%E8%BE%93%E5%87%BA%E9%A1%BA%E5%BA%8F%E9%97%AE%E9%A2%98.html","excerpt":"","text":"Windows，Clion在debug的时候，printf不会实时输出，在程序结束后才会输出。 解决：在程序开始时候禁用缓冲区：setbuf(stdout, 0); 1setbuf(stdout, 0);","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"C","slug":"Devolop/Secondary/C","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/C/"}],"tags":[]},{"title":"结构体 - C 语言","slug":"Devolop/Secondary/C/结构体","date":"2023-06-16T02:55:33.851Z","updated":"2022-10-30T08:05:14.897Z","comments":true,"path":"page/Devolop/Secondary/C/结构体.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/C/%E7%BB%93%E6%9E%84%E4%BD%93.html","excerpt":"","text":"定义结构体结构体名 和 其实例变量名 至少出现其一 12345678struct SIMPLE&#123; int a; char b; double c;&#125;;struct SIMPLE t1, t2[20], *t3; 123456struct &#123; int a; char b; double c;&#125; s1; 使用 typedef ： 12345678typedef struct&#123; int a; char b; double c; &#125; Simple2;Simple2 u1, u2[20], *u3; 如果两个结构体互相包含，则需要对其中一个结构体进行不完整声明： 123456789101112131415struct B; //对结构体B进行不完整声明 //结构体A中包含指向结构体B的指针struct A&#123; struct B *partner; //other members;&#125;; //结构体B中包含指向结构体A的指针，在A声明完后，B也随之进行声明struct B&#123; struct A *partner; //other members;&#125;; 初始化定义时指定初始值： 1234567struct Books&#123; char title[50]; char author[50]; char subject[100]; int book_id;&#125; book = &#123;&quot;C 语言&quot;, &quot;RUNOOB&quot;, &quot;编程语言&quot;, 123456&#125;; 访问结构成员变量.成员","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"C","slug":"Devolop/Secondary/C","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/C/"}],"tags":[]},{"title":"C语言Clion Windows控制台乱码问题","slug":"Devolop/Secondary/C/C语言Clion Windows控制台乱码问题","date":"2023-06-16T02:55:33.851Z","updated":"2022-11-27T03:16:18.225Z","comments":true,"path":"page/Devolop/Secondary/C/C语言Clion Windows控制台乱码问题.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/C/C%E8%AF%AD%E8%A8%80Clion%20Windows%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98.html","excerpt":"","text":"Windows 控制台默认GBK&#x2F;GB2312的编码，乱码的话需要设置为UTF-8 1system(&quot;chcp 65001&quot;); // 设置为UTF-8","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"C","slug":"Devolop/Secondary/C","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/C/"}],"tags":[]},{"title":"","slug":"Devolop/Secondary/Nework/OSI分层模型","date":"2023-06-16T02:55:33.851Z","updated":"2023-04-04T13:04:02.215Z","comments":true,"path":"page/Devolop/Secondary/Nework/OSI分层模型.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Nework/OSI%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B.html","excerpt":"","text":"title: OSI TCP&#x2F;IP 分层模型 OSI TCP&#x2F;IP 分层模型 OSI TCP&#x2F;IP 协议 应用层 应用层 HTTPS HTTP Telnet FTP DNS SMTP 表示层 - - 会话层 - - 传输层 传输层 数据段segment TCP UDP 网络层 路由器 防火墙 IP 多层交换机 网络层 数据包packet IPv4&#x2F;v6 ICMP RIP IGMP OSPF 数据链路层 网卡 网桥 二层交换机 数据链路层 帧frame Ethernet &#x2F; Token Ring &#x2F; PPP &#x2F; PPTP &#x2F; L2TP &#x2F; ARP 物理层 集线器 网线 RJ-45 物理层 bit 物理线路 光纤 无线电","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Nework","slug":"Devolop/Secondary/Nework","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Nework/"}],"tags":[]},{"title":"HTTP 响应状态码","slug":"Devolop/Secondary/Nework/HTTP/HTTP 响应状态码","date":"2023-06-16T02:55:33.851Z","updated":"2023-03-29T07:36:17.103Z","comments":true,"path":"page/Devolop/Secondary/Nework/HTTP/HTTP 响应状态码.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Nework/HTTP/HTTP%20%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81.html","excerpt":"","text":"405错误 方法不被允许 (Method not allowed)","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Nework","slug":"Devolop/Secondary/Nework","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Nework/"},{"name":"HTTP","slug":"Devolop/Secondary/Nework/HTTP","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Nework/HTTP/"}],"tags":[]},{"title":"HTML响应头","slug":"Devolop/Secondary/Nework/HTTP/响应头 response-header","date":"2023-06-16T02:55:33.851Z","updated":"2023-03-07T14:13:43.148Z","comments":true,"path":"page/Devolop/Secondary/Nework/HTTP/响应头 response-header.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Nework/HTTP/%E5%93%8D%E5%BA%94%E5%A4%B4%20response-header.html","excerpt":"","text":"Refresh浏览器应该在多少时间之后刷新文档 第二个参数可选 &quot;5; URL=http://host/path&quot; 让浏览器读取指定的页面","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Nework","slug":"Devolop/Secondary/Nework","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Nework/"},{"name":"HTTP","slug":"Devolop/Secondary/Nework/HTTP","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Nework/HTTP/"}],"tags":[]},{"title":"HTTP","slug":"Devolop/前端/HTTP","date":"2023-06-16T02:55:33.835Z","updated":"2023-10-09T06:44:59.461Z","comments":true,"path":"page/Devolop/前端/HTTP.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/HTTP.html","excerpt":"","text":"HTTP客户端与服务端之间的连续交互。 无状态、单向 Session 会话生成一个 SessionID 给客户端。服务端通过数据库存储，客户端通过Cookie存储 请求类型 enctypex-www-form- 默认 multipart&#x2F;form-data 可传输文件","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"}],"tags":[]},{"title":"XML","slug":"Devolop/环境配置/XML","date":"2023-06-16T02:55:33.835Z","updated":"2023-03-06T14:33:06.949Z","comments":true,"path":"page/Devolop/环境配置/XML.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/XML.html","excerpt":"","text":"用途: 数据传输 配置文件 发明目的是为了 传输和存储数据 优点解析快，缺点占用空间大，现在多用 JSON YAML 替代 类似HTML，XML标签必须自定义 基础 Grammer属性无序 XML必须有一个根节点 头声明，可选： 12&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; 所有XML都必须是成对标签 大小写敏感 注视和HTML一样 &lt;!-- --&gt; 转义字符也和HTML一样 属性 ： 增加解析复杂度 CDATACDATA区域不解析 123456789101112131415&lt;script&gt;&lt;![CDATA[function matchwo(a,b)&#123; if (a &lt; b &amp;&amp; a &lt; 0) then &#123; return 1; &#125; else &#123; return 0; &#125;&#125;]]&gt;&lt;/script&gt; 命名空间前缀123456789101112&lt;h:table&gt; &lt;h:tr&gt; &lt;h:td&gt;Apples&lt;/h:td&gt; &lt;h:td&gt;Bananas&lt;/h:td&gt; &lt;/h:tr&gt;&lt;/h:table&gt;&lt;f:table&gt; &lt;f:name&gt;African Coffee Table&lt;/f:name&gt; &lt;f:width&gt;80&lt;/f:width&gt; &lt;f:length&gt;120&lt;/f:length&gt;&lt;/f:table&gt; xmlns 属性当在 XML 中使用前缀时，一个所谓的用于前缀的命名空间必须被定义。 命名空间是在元素的开始标签的 xmlns 属性中定义的。 命名空间声明的语法：xmlns:前缀=&quot;URI&quot;。 12345678910111213141516&lt;root&gt;&lt;h:table xmlns:h=&quot;http://www.w3.org/TR/html4/&quot;&gt; &lt;h:tr&gt; &lt;h:td&gt;Apples&lt;/h:td&gt; &lt;h:td&gt;Bananas&lt;/h:td&gt; &lt;/h:tr&gt;&lt;/h:table&gt;&lt;f:table xmlns:f=&quot;http://www.w3cschool.cc/furniture&quot;&gt; &lt;f:name&gt;African Coffee Table&lt;/f:name&gt; &lt;f:width&gt;80&lt;/f:width&gt; &lt;f:length&gt;120&lt;/f:length&gt;&lt;/f:table&gt;&lt;/root&gt; 命名空间，可以在他们被使用的元素中或者在 XML 根元素中声明： 1234567891011121314151617&lt;root xmlns:h=&quot;http://www.w3.org/TR/html4/&quot;xmlns:f=&quot;http://www.w3cschool.cc/furniture&quot;&gt;&lt;h:table&gt; &lt;h:tr&gt; &lt;h:td&gt;Apples&lt;/h:td&gt; &lt;h:td&gt;Bananas&lt;/h:td&gt; &lt;/h:tr&gt;&lt;/h:table&gt;&lt;f:table&gt; &lt;f:name&gt;African Coffee Table&lt;/f:name&gt; &lt;f:width&gt;80&lt;/f:width&gt; &lt;f:length&gt;120&lt;/f:length&gt;&lt;/f:table&gt;&lt;/root&gt; 命名空间 URI 不会被解析器用于查找信息。 默认的命名空间省去前缀 语法： xmlns=&quot;namespaceURI&quot; 123456&lt;table xmlns=&quot;http://www.w3.org/TR/html4/&quot;&gt; &lt;tr&gt; &lt;td&gt;Apples&lt;/td&gt; &lt;td&gt;Bananas&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"环境配置","slug":"Devolop/环境配置","permalink":"https://rchangl.github.io/categories/Devolop/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}],"tags":[]},{"title":"海明码","slug":"Devolop/Secondary/信息安全/海明码","date":"2023-06-16T02:55:33.835Z","updated":"2023-03-30T14:09:05.948Z","comments":true,"path":"page/Devolop/Secondary/信息安全/海明码.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E6%B5%B7%E6%98%8E%E7%A0%81.html","excerpt":"","text":"编码 确定校验码的位数x 设数据有n位，校验码有x位。则校验码一共有2x种取值方式。其中需要一种取值方式表示数据正确，剩下2x-1种取值方式表示有一位数据出错。因为编码后的二进制串有n+x位，因此x应该满足 2^x-1 ≥ n+x","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"信息安全","slug":"Devolop/Secondary/信息安全","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"}],"tags":[]},{"title":"Pinia","slug":"Devolop/Secondary/Vue/组件/Pinia","date":"2023-06-16T02:55:33.835Z","updated":"2023-05-04T06:58:39.000Z","comments":true,"path":"page/Devolop/Secondary/Vue/组件/Pinia.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/%E7%BB%84%E4%BB%B6/Pinia.html","excerpt":"","text":"替代 vuex ，官方支持，相当于 Vuex5 核心概念State Getter Actions","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"},{"name":"组件","slug":"Devolop/Secondary/Vue/组件","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/%E7%BB%84%E4%BB%B6/"}],"tags":[]},{"title":"Element 安装引入","slug":"Devolop/Secondary/Vue/组件/Element","date":"2023-06-16T02:55:33.835Z","updated":"2023-05-03T09:12:21.590Z","comments":true,"path":"page/Devolop/Secondary/Vue/组件/Element.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/%E7%BB%84%E4%BB%B6/Element.html","excerpt":"","text":"安装在工程目录下： npm install element-ui 引入import ElementUI from &#39;element-ui&#39;; import &#39;element-ui/lib/theme-chalk/index.css&#39;; Vue.use(ElementUI); ## Icon https://element-plus.org/en-US/component/icon.html","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"},{"name":"组件","slug":"Devolop/Secondary/Vue/组件","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/%E7%BB%84%E4%BB%B6/"}],"tags":[]},{"title":"computed 计算属性","slug":"Devolop/Secondary/Vue/Bascal/computed 计算属性","date":"2023-06-16T02:55:33.820Z","updated":"2023-06-02T08:41:03.988Z","comments":true,"path":"page/Devolop/Secondary/Vue/Bascal/computed 计算属性.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/Bascal/computed%20%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7.html","excerpt":"","text":"通过已有的属性得来 计算属性 最终在 vm 上，像 data属性 一样，可直接使用 选项式：123456789101112131415161718new Vue(&#123; el: , data: , computed: &#123; p1: &#123; // 属性被读取时，getter执行。 // 所依赖的数据发生变化时，getter执行 get()&#123; // ... &#125;, // 属性被修改时，set执行， set(value)&#123; // value 为修改后的值 // ... &#125; &#125; &#125;&#125;) 简写只读取，不修改时使用简写 123456789new Vue(&#123; el: , data: , computed: &#123; p1()&#123; // 函数当getter用 &#125; &#125;&#125;)","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"},{"name":"Bascal","slug":"Devolop/Secondary/Vue/Bascal","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/Bascal/"}],"tags":[]},{"title":"Creating a Vue Application 创建 Vue 应用","slug":"Devolop/Secondary/Vue/Bascal/Creating a Vue Application 创建 Vue 应用","date":"2023-06-16T02:55:33.820Z","updated":"2023-06-02T09:15:50.433Z","comments":true,"path":"page/Devolop/Secondary/Vue/Bascal/Creating a Vue Application 创建 Vue 应用.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/Bascal/Creating%20a%20Vue%20Application%20%E5%88%9B%E5%BB%BA%20Vue%20%E5%BA%94%E7%94%A8.html","excerpt":"","text":"The application instance 应用实例12345import &#123; createApp &#125; from &#x27;vue&#x27;const app = createApp(&#123; /* root component options */&#125;) The Root Component 根组件单文件式的引入： 12345import &#123; createApp &#125; from &#x27;vue&#x27;// import the root component App from a single-file component.import App from &#x27;./App.vue&#x27;const app = createApp(App) —https://vuejs.org/guide/essentials/application.html","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"},{"name":"Bascal","slug":"Devolop/Secondary/Vue/Bascal","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/Bascal/"}],"tags":[]},{"title":"reactive","slug":"Devolop/Secondary/Vue/Bascal/reactive","date":"2023-06-16T02:55:33.820Z","updated":"2023-04-19T07:59:57.653Z","comments":true,"path":"page/Devolop/Secondary/Vue/Bascal/reactive.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/Bascal/reactive.html","excerpt":"","text":"reactive: 更改可以触发更新 Optionsdeclare reactive state (using the data component option): 1234567export default &#123; data() &#123; return &#123; message: &#x27;Hello World!&#x27; &#125; &#125;&#125; The message property will be made available(可获得的) in the template: 1234&lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;&lt;!-- we can use any valid JavaScript expression: --&gt;&lt;h1&gt;&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;&lt;/h1&gt; Composition&lt;script setup&gt;declare reactive state using Vue’s reactive() API: 12345678import &#123; reactive &#125; from &#x27;vue&#x27;const counter = reactive(&#123; count: 0&#125;)console.log(counter.count) // 0counter.count++ reactive() 只适用于对象（包括数组和 Map 和 Set 等内置类型） ref() 可以采用任何值类型，并创建一个对象 that exposes the inner value under a .value property: 123456import &#123; ref &#125; from &#x27;vue&#x27;const message = ref(&#x27;Hello World!&#x27;)console.log(message.value) // &quot;Hello World!&quot;message.value = &#x27;Changed&#x27; 更多关于 reactive() and ref() ：https://vuejs.org/guide/essentials/reactivity-fundamentals.html template","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"},{"name":"Bascal","slug":"Devolop/Secondary/Vue/Bascal","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/Bascal/"}],"tags":[]},{"title":"watch 监视属性","slug":"Devolop/Secondary/Vue/Bascal/watch 监视属性","date":"2023-06-16T02:55:33.820Z","updated":"2023-06-02T10:10:52.459Z","comments":true,"path":"page/Devolop/Secondary/Vue/Bascal/watch 监视属性.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/Bascal/watch%20%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7.html","excerpt":"","text":"12345678910111213141516171819new Vue(&#123; el: &#x27;#root&#x27;, data:&#123; isHot: true &#125;, methods:&#123;&#125;, computed:&#123;&#125;, watch:&#123; // 监视属性 isHot:&#123; // 当isHot发生改变时，调用 handler() handler(newValue, oldValue)&#123; // ... &#125;, // 配置监视 immediate:true // 初始化时让 handle() 运行，省略默认 false &#125; &#125;&#125;) 计算属性 也能监视 监视没有的属性不会报错，也能初始化执行一次 API 方式123456789101112131415161718const vm = new Vue(&#123; el: &#x27;#root&#x27;, data:&#123; isHot: true &#125;, methods:&#123;&#125;, computed:&#123;&#125;&#125;)vm.$watch(&#x27;isHot&#x27;, &#123; // 当isHot发生改变时，调用 handler() handler(newValue, oldValue)&#123; // ... &#125;, // 配置监视 immediate:true // 初始化时让 handle() 运行，省略默认 false&#125;) 深度监听默认不检测对象内部值的改变 123456789101112131415161718new Vue(&#123; el: &#x27;#root&#x27;, data:&#123; numbers: &#123; a:1, b:1 &#125; &#125;, methods:&#123;&#125;, computed:&#123;&#125;, watch:&#123; &#x27;numbers.a&#x27;:&#123; // 检测多级属性中 某个 属性的变化 handler() &#123; //... &#125; &#125; &#125;&#125;) 12345678910111213141516171819new Vue(&#123; el: &#x27;#root&#x27;, data:&#123; numbers: &#123; a:1, b:1 &#125; &#125;, methods:&#123;&#125;, computed:&#123;&#125;, watch:&#123; deep: true, // 检测所有内部属性的变化，默认 false numbers:&#123; // 检测多级属性中 所有 属性的变化 handler() &#123; //... &#125; &#125; &#125;&#125;)","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"},{"name":"Bascal","slug":"Devolop/Secondary/Vue/Bascal","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/Bascal/"}],"tags":[]},{"title":"模板语法","slug":"Devolop/Secondary/Vue/Bascal/模板语法","date":"2023-06-16T02:55:33.820Z","updated":"2023-06-01T01:54:39.758Z","comments":true,"path":"page/Devolop/Secondary/Vue/Bascal/模板语法.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/Bascal/%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95.html","excerpt":"","text":"文本插值使用的是 Mustache 语法 (双大括号) 1&lt;span&gt;Message: &#123;&#123; msg &#125;&#125;&lt;/span&gt; 双大括号标签会被替换为相应组件实例中 msg 属性的值，并双向同步更新 使用v-once指令可以使后续更改时不再继续更新 原始HTML插入使用指令 v-html ，插入将解析为html，而不只是文本 1&lt;p&gt;Using v-html directive: &lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;&lt;/p&gt;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"},{"name":"Bascal","slug":"Devolop/Secondary/Vue/Bascal","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/Bascal/"}],"tags":[]},{"title":"Vue 环境配置和创建项目","slug":"Devolop/Secondary/Vue/Bascal/环境配置和创建项目","date":"2023-06-16T02:55:33.820Z","updated":"2023-07-12T07:09:48.388Z","comments":true,"path":"page/Devolop/Secondary/Vue/Bascal/环境配置和创建项目.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/Bascal/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.html","excerpt":"","text":"CDN(JS File)CDN (Content delivery network) 借助 script 标签直接通过 CDN 来使用 Vue： 1&lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt; 安装 vue-cli (Vue脚手架)npm install -g @vue/cli vue --version 创建：1npm init vue@latest 直接 npm init vue 也行 运行： 12345cd &lt;your-project-name&gt;npm installnpm run dev Vue Devtools官网： https://devtools.vuejs.org/ Chrome插件商店： https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"},{"name":"Bascal","slug":"Devolop/Secondary/Vue/Bascal","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/Bascal/"}],"tags":[]},{"title":"指令 - Vue","slug":"Devolop/Secondary/Vue/Bascal/指令","date":"2023-06-16T02:55:33.820Z","updated":"2023-04-10T03:59:17.575Z","comments":true,"path":"page/Devolop/Secondary/Vue/Bascal/指令.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/Bascal/%E6%8C%87%E4%BB%A4.html","excerpt":"","text":"官网介绍： 内置指令 | Vue.js &lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt; 以 HTML attribute 的形式，由 v- 作为前缀 v-bind绑定 属性(attribute) 、 组件的 prop(property) 缩写： : .prop 缩写： . 1234567891011121314151617181920212223242526272829&lt;!-- 绑定 attribute --&gt;&lt;img v-bind:src=&quot;va&quot; /&gt;&lt;!-- 缩写形式 --&gt;&lt;img :src=&quot;imageSrc&quot; /&gt;&lt;!-- 动态 attribute 名 --&gt;&lt;button v-bind:[key]=&quot;value&quot;&gt;&lt;/button&gt;&lt;!-- class 绑定 --&gt;&lt;div :class=&quot;&#123; red: isRed &#125;&quot;&gt;&lt;/div&gt;&lt;div :class=&quot;[classA, classB]&quot;&gt;&lt;/div&gt;&lt;div :class=&quot;[classA, &#123; classB: isB, classC: isC &#125;]&quot;&gt;&lt;/div&gt;&lt;!-- style 绑定 --&gt;&lt;div :style=&quot;&#123; fontSize: size + &#x27;px&#x27; &#125;&quot;&gt;&lt;/div&gt;&lt;div :style=&quot;[styleObjectA, styleObjectB]&quot;&gt;&lt;/div&gt;&lt;!-- 绑定对象形式的 attribute --&gt;&lt;div v-bind=&quot;&#123; id: someProp, &#x27;other-attr&#x27;: otherProp &#125;&quot;&gt;&lt;/div&gt;&lt;!-- prop 绑定。“prop” 必须在子组件中已声明。 --&gt;&lt;MyComponent :prop=&quot;someThing&quot; /&gt;&lt;!-- 传递子父组件共有的 prop --&gt;&lt;MyComponent v-bind=&quot;$props&quot; /&gt;&lt;!-- XLink --&gt;&lt;svg&gt;&lt;a :xlink:special=&quot;foo&quot;&gt;&lt;/a&gt;&lt;/svg&gt; v-html&lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt; 将此元素的 innerHTML 与 rawHtml 属性保持同步。 v-once仅渲染元素和组件一次，并跳过之后的更新。（后续更改不再继续更新） 这可以用来优化更新时的性能。 12345678910111213&lt;!-- 单个元素 --&gt;&lt;span v-once&gt;This will never change: &#123;&#123;msg&#125;&#125;&lt;/span&gt;&lt;!-- 带有子元素的元素 --&gt;&lt;div v-once&gt; &lt;h1&gt;comment&lt;/h1&gt; &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;&lt;/div&gt;&lt;!-- 组件 --&gt;&lt;MyComponent v-once :comment=&quot;msg&quot; /&gt;&lt;!-- `v-for` 指令 --&gt;&lt;ul&gt; &lt;li v-for=&quot;i in list&quot; v-once&gt;&#123;&#123;i&#125;&#125;&lt;/li&gt;&lt;/ul&gt; v-for可选的第二个参数表示当前项的位置索引。 123456data() &#123; return &#123; parentMessage: &#x27;Parent&#x27;, items: [&#123; message: &#x27;Foo&#x27; &#125;, &#123; message: &#x27;Bar&#x27; &#125;] &#125;&#125; 12345&lt;!-- template --&gt;&lt;li v-for=&quot;(item, index) in items&quot;&gt; &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;&lt;/li&gt;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"},{"name":"Bascal","slug":"Devolop/Secondary/Vue/Bascal","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/Bascal/"}],"tags":[]},{"title":"响应式","slug":"Devolop/Secondary/Vue/Bascal/响应式","date":"2023-06-16T02:55:33.820Z","updated":"2023-04-03T08:34:15.263Z","comments":true,"path":"page/Devolop/Secondary/Vue/Bascal/响应式.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/Bascal/%E5%93%8D%E5%BA%94%E5%BC%8F.html","excerpt":"","text":"响应式： 能在改变时触发更新的状态。（对象数据改变时，前端绑定数据更新） 可以使用 Vue 的 reactive() API 来声明 响应式状态。 12345678import &#123; reactive &#125; from &#x27;vue&#x27;const counter = reactive(&#123; count: 0&#125;)console.log(counter.count) // 0counter.count++ 12345678910111213141516171819202122232425262728&lt;template&gt; &lt;div&gt; &#123;&#123; objData &#125;&#125; &lt;button @click=&quot;submitHander&quot;&gt;改变数据&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; reactive &#125; from &#x27;vue&#x27;export default &#123; setup () &#123; let objData=reactive(&#123; name:&#x27;林漾&#x27;, age:31, sex:&#x27;女&#x27; &#125;) function submitHander()&#123; objData.name=&#x27;林漾1&#x27;; objData.name=&#x27;31&#x27;; objData.name=&#x27;女nv&#x27;; &#125; return &#123; objData, submitHander &#125; &#125;&#125;&lt;/script&gt;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"},{"name":"Bascal","slug":"Devolop/Secondary/Vue/Bascal","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/Bascal/"}],"tags":[]},{"title":"Vue 结构","slug":"Devolop/Secondary/Vue/0-Vue结构","date":"2023-06-16T02:55:33.804Z","updated":"2023-06-02T09:38:17.309Z","comments":true,"path":"page/Devolop/Secondary/Vue/0-Vue结构.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/0-Vue%E7%BB%93%E6%9E%84.html","excerpt":"","text":"绑定方式 选项式1234567new Vue(&#123; el: &#x27;#root&#x27;, data:&#123;&#125;, // 做了数据代理，双向绑定用 methods:&#123;&#125;, // 不作数据代理，事件方法用 computed:&#123;&#125;, // 计算属性，计算后得到的属性 watch:&#123;&#125;&#125;) 单文件1234567export default &#123; data() &#123; return &#123; 属性: 值 &#125; &#125; &#125; 模板语法 文本插值 Mustache 语法 (双大括号) &#123;&#123; 表达式 &#125;&#125; 可以使用vm里的属性 直接以变量形式，不能直接用window 指令（v-属性） v-bind:属性=&quot;表达式&quot; :属性=&quot;表达式&quot; 属性绑定，单向绑定 v-model: 双向绑定，只能用在输入类元素上（表单） v-on:属性=&quot;点击事件函数&quot; 默认传递事件对象 解析 任何数据发生变化时，模板都会重新解析一遍，用到的函数也会随着运行一遍 事件 点击事件 函数调用 可以替换成语句 @click=&quot;f1&quot; 默认传递一个event对象，相当于 @click=&quot;f1($event)&quot; @click=&quot;f2(123)&quot; 传递了一个参数，此时接收不到event对象 @click=&quot;f3($event, 123) 传递参数，并保留event对象，占位符$event 顺序可变 prevent @click.prevent=&quot;f()&quot; 阻止 默认事件 stop 内层，阻止事件冒泡 once 只触发一次 capture 捕获模式，有线触发外层，与冒泡模式相反 self 冒泡不触发，只有事件target是当前元素才触发 @wheel.passive=&quot;f()&quot; 默认行为立即执行 计算属性 computed(() =&gt; &#123;&#125;) 引用内部值变化时 跟着变化","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"}],"tags":[]},{"title":"mainjs文件","slug":"Devolop/Secondary/Vue/mainjs文件","date":"2023-06-16T02:55:33.804Z","updated":"2022-12-14T13:13:06.264Z","comments":true,"path":"page/Devolop/Secondary/Vue/mainjs文件.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/mainjs%E6%96%87%E4%BB%B6.html","excerpt":"","text":"main.js12345// main.jsimport &#123; createApp &#125; from &#x27;vue&#x27;// 创建应用，传入配置对象，mount进行挂载关联页面元素createApp(App).mount(&#x27;#app&#x27;) 直接导入了方法，不需要像单文件一样使用Vue调用方法 数据的双向绑定，数据对象属性改变，页面数据也会跟着改变 组件实例data 里定义的 property ，通过组件实例来访问 123456const app = createApp(App);const vm = mount(&#x27;#app&#x27;);vm.name // data对象的属性","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"}],"tags":[]},{"title":"Vue基础","slug":"Devolop/Secondary/Vue/Vue基础","date":"2023-06-16T02:55:33.804Z","updated":"2023-03-29T01:54:10.248Z","comments":true,"path":"page/Devolop/Secondary/Vue/Vue基础.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/Vue%E5%9F%BA%E7%A1%80.html","excerpt":"","text":"Vue前端框架 免除原始JS中的DOM操作 MVVM(Model-View-ViewModel) 双向绑定 视图+脚本视图：123&lt;div id=&quot;app&quot;&gt; &#123;&#123;message&#125;&#125;， &#123;&#123;name&#125;&#125;&lt;/div&gt; &#123;&#123;name&#125;&#125; 变量，替换数据 脚本：123456789101112&lt;script type=&quot;text/javascript&quot;&gt; var vm = new Vue(&#123; el : &#x27;#app&#x27;, data: &#123; message: &quot;Hello Vue!&quot;, name: &quot;666!&quot; &#125; &#125;); vm.message = 100; vm.$data.name = &#x27;yuyu&#x27;;&lt;/script&gt; el 选择器 #选择id data 传递参数（数据），定义一个对象或指定一个已有的对象。data内容更改时，前端数据随着更改 vm.message= 使用data的参数 vm.$data.name 使用Vue实例的属性 $watch 观察变量变化过程观察data属性的值 开发调试用 1234567891011121314var data = &#123;message:1,name:&#x27;hello&#x27;&#125;var vm= new Vue(&#123; el : &#x27;#app&#x27;, data: data&#125;);vm.message = 100vm.$watch(&#x27;name&#x27;, function(newVal,oldVal)&#123; console.log(newVal,oldVal)&#125;)vm.$data.name = &#x27;zhangsan&#x27;; $watch(&#39;观察变量名（data属性名）&#39;, 回调函数) 回调函数： newVal变化后的值， oldVal变化前的值 生命周期钩子Vue实例被创建时需要经历一系列初始化过程，我们可以用生命周期钩子进行初始化操作 beforeCreate: 整个页面创建之前调用 created: 实例创建完成后调用 beforeMount: 挂载之前 mounted: 挂载成功之后，相当于页面中的元素被vm.$el替换 beforeUpdate: 数据变化之前 updated: 数据变化之后 123456789101112131415161718192021222324252627var vm = new Vue(&#123; el: &#x27;#app&#x27;, data: &#123; message: &quot;hi Vue&quot;, &#125;, beforeCreate: function() &#123; console.log(&quot;beforeCreate&quot;) &#125;, created: function() &#123; console.log(&quot;created&quot;) &#125;, beforeMount: function() &#123; console.log(&quot;beforeMount&quot;) &#125;, mounted: function() &#123; console.log(&quot;mounted&quot;) &#125;, beforeUpdate: function() &#123; console.log(&quot;beforeUpdate&quot;) &#125;, updated: function() &#123; console.log(&quot;updated&quot;) &#125;&#125;);setTimeout(function() &#123; vm.message = &quot;changed...&quot;&#125;, 3000); 使用JS表达式123&lt;p&gt;&#123;&#123;num+1&#125;&#125;&lt;/p&gt;&lt;p&gt;&#123;&#123;ok? &#x27;YES&#x27;:&#x27;NO&#x27;&#125;&#125;&lt;/p&gt;&lt;p&gt;&#123;&#123;msg.split(&quot;&quot;).reverse().join(&quot;&quot;)&#125;&#125;&lt;/p&gt; 指令v-once指令 v-html属性，并将其赋值为一个变量，则可以在该标签内部插入HTML元素 v-bind:标签属性&#x3D;”变量名”:用变量名的值赋值给标签属性","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"}],"tags":[]},{"title":"生命周期","slug":"Devolop/Secondary/Vue/生命周期","date":"2023-06-16T02:55:33.804Z","updated":"2023-04-10T08:27:17.908Z","comments":true,"path":"page/Devolop/Secondary/Vue/生命周期.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html","excerpt":"","text":"生命周期图示 生命周期钩子组合式 API：生命周期钩子 最常用的是 mounted, updated, and unmounted. mounted() 一般在初始化页面完成后，再对dom节点进行相关操作。 12345export default &#123; mounted() &#123; console.log(`the component is now mounted.`) &#125;&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"}],"tags":[]},{"title":"组件 - Vue","slug":"Devolop/Secondary/Vue/组件","date":"2023-06-16T02:55:33.804Z","updated":"2023-03-01T13:54:11.099Z","comments":true,"path":"page/Devolop/Secondary/Vue/组件.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/%E7%BB%84%E4%BB%B6.html","excerpt":"","text":"注册全局注册局部注册","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"}],"tags":[]},{"title":"Vue3 项目的 创建 运行 打包","slug":"Devolop/Secondary/Vue/0开始之前/Vue3 项目","date":"2023-06-16T02:55:33.804Z","updated":"2023-04-03T08:15:34.340Z","comments":true,"path":"page/Devolop/Secondary/Vue/0开始之前/Vue3 项目.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/0%E5%BC%80%E5%A7%8B%E4%B9%8B%E5%89%8D/Vue3%20%E9%A1%B9%E7%9B%AE.html","excerpt":"","text":"创建运行Web开发构建工具，相对CLI创建会更快。需要安装Node 创建项目： &#96;&#96; 123456&gt; npm init vue@latest&gt; cd &lt;your-project-name&gt;&gt; npm install&gt; npm run dev 生产环境发布版本： npm run build 打包npm run build 会在 Vue 项目下会生成一个 dist 目录","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"},{"name":"0开始之前","slug":"Devolop/Secondary/Vue/0开始之前","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/0%E5%BC%80%E5%A7%8B%E4%B9%8B%E5%89%8D/"}],"tags":[]},{"title":"单文件组件","slug":"Devolop/Secondary/Vue/0开始之前/单文件组件","date":"2023-06-16T02:55:33.804Z","updated":"2023-04-03T12:08:40.586Z","comments":true,"path":"page/Devolop/Secondary/Vue/0开始之前/单文件组件.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/0%E5%BC%80%E5%A7%8B%E4%B9%8B%E5%89%8D/%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6.html","excerpt":"","text":"","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"},{"name":"0开始之前","slug":"Devolop/Secondary/Vue/0开始之前","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/0%E5%BC%80%E5%A7%8B%E4%B9%8B%E5%89%8D/"}],"tags":[]},{"title":"vue后缀文件","slug":"Devolop/Secondary/Vue/0开始之前/vue后缀文件","date":"2023-06-16T02:55:33.804Z","updated":"2023-04-03T07:57:59.064Z","comments":true,"path":"page/Devolop/Secondary/Vue/0开始之前/vue后缀文件.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/0%E5%BC%80%E5%A7%8B%E4%B9%8B%E5%89%8D/vue%E5%90%8E%E7%BC%80%E6%96%87%E4%BB%B6.html","excerpt":"","text":"script&lt;script setup&gt;setup 代表使用 组合式api export 导出123456789101112131415&lt;script&gt; export default&#123; data()&#123; return&#123; // 定义 data 的 property username:&quot;RC&quot; &#125; &#125;, methods:&#123; // 定义 function changeUsername: function() &#123; // this 指向 vue 实例 this.username &#125; &#125; &#125;&lt;/script&gt; template 标签1234&lt;template&gt; &lt;div&gt; &lt;/div&gt;&lt;/template&gt; 旧的插件必须要只有一个根元素，最新不需要","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"},{"name":"0开始之前","slug":"Devolop/Secondary/Vue/0开始之前","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/0%E5%BC%80%E5%A7%8B%E4%B9%8B%E5%89%8D/"}],"tags":[]},{"title":"挂载到网页 - Vue","slug":"Devolop/Secondary/Vue/0开始之前/挂载到网页","date":"2023-06-16T02:55:33.804Z","updated":"2023-04-03T08:37:43.814Z","comments":true,"path":"page/Devolop/Secondary/Vue/0开始之前/挂载到网页.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Vue/0%E5%BC%80%E5%A7%8B%E4%B9%8B%E5%89%8D/%E6%8C%82%E8%BD%BD%E5%88%B0%E7%BD%91%E9%A1%B5.html","excerpt":"","text":"12345678910111213141516171819&lt;div id=&quot;app&quot;&gt; &lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;&lt;/div&gt;&lt;script src=&quot;https://unpkg.com/vue@next&quot;&gt;&lt;/script&gt;&lt;script&gt; let Root = &#123; data() &#123; return &#123; message: &#x27;Hello Vue!&#x27; &#125;; &#125; &#125;; // 创建一个Vue应用 const app = Vue.createApp(Root); // 挂载 const vm = app.mount(&quot;#app&quot;);&lt;/script&gt;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"},{"name":"0开始之前","slug":"Devolop/Secondary/Vue/0开始之前","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/0%E5%BC%80%E5%A7%8B%E4%B9%8B%E5%89%8D/"}],"tags":[]},{"title":"PHP标记","slug":"Devolop/Secondary/PHP/PHP标记","date":"2023-06-16T02:55:33.788Z","updated":"2023-05-11T13:41:15.758Z","comments":true,"path":"page/Devolop/Secondary/PHP/PHP标记.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/PHP/PHP%E6%A0%87%E8%AE%B0.html","excerpt":"","text":"&lt;?php ?&gt; 一般的完整写法 如果文件内容仅包含 PHP 代码可以省略 ?&gt; ，最好在文件末尾删除 PHP 结束标记。这可以避免在 PHP 结束标记之后万一意外加入了空格或者换行符，会导致 PHP 开始输出这些空白，而脚本中此时并无输出的意图。 &lt;?= ，是 &lt;?php echo 的缩写 &lt;? ?&gt; 短标记，默认开启，可以关闭","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"PHP","slug":"Devolop/Secondary/PHP","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/PHP/"}],"tags":[]},{"title":"PHP 变量作用域","slug":"Devolop/Secondary/PHP/变量作用域","date":"2023-06-16T02:55:33.788Z","updated":"2023-05-11T13:36:46.546Z","comments":true,"path":"page/Devolop/Secondary/PHP/变量作用域.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/PHP/%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F.html","excerpt":"","text":"local 局部作用域global 全局作用域static 静态作用域parameter 函数参数作用域 local12345678910&lt;?phpfunction test()&#123; $a = 15; echo &quot;内部输出结果：&quot; . $a;&#125;echo &quot;外部输出结果：&quot; . $a; // 无法访问变量 aecho PHP_EOL;test();?&gt; global","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"PHP","slug":"Devolop/Secondary/PHP","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/PHP/"}],"tags":[]},{"title":"PHP 类型转换","slug":"Devolop/Secondary/PHP/类型转换","date":"2023-06-16T02:55:33.788Z","updated":"2023-06-12T09:31:56.173Z","comments":true,"path":"page/Devolop/Secondary/PHP/类型转换.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/PHP/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html","excerpt":"","text":"1234&lt;?php$foo = 10; // $foo 是 int$bar = (bool) $foo; // $bar 是 bool?&gt; (int) ——转换为 int(bool) ——转换为 bool(float) ——转换为 float(string) ——转换为 string(array) ——转换为 array(object) ——转换为 object(unset) ——转换为 NULL 隐式转换","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"PHP","slug":"Devolop/Secondary/PHP","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/PHP/"}],"tags":[]},{"title":"PHP 字符串操作","slug":"Devolop/Secondary/PHP/字符串操作","date":"2023-06-16T02:55:33.788Z","updated":"2023-05-29T03:07:41.178Z","comments":true,"path":"page/Devolop/Secondary/PHP/字符串操作.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/PHP/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C.html","excerpt":"","text":"字符串表示： 12$str1 = &#x27;Hello World&#x27;;$str2 = &quot;Hello World&quot;; 字符串连接 . .= : 1234567$str1 = &#x27;Hello&#x27;;$str2 = &#x27;World&#x27;;echo $str1 . $str2; // 输出HelloWorld$str1 = &#x27;Hello&#x27;;$str1 .= &#x27; World&#x27;;echo $str1; // 输出Hello World 截取字符串 在PHP中，可以使用substr()函数来截取字符串。该函数接受三个参数：字符串、开始位置和长度。例如： 1 2 $str &#x3D; ‘Hello World’; echo substr($str, 0, 5); &#x2F;&#x2F; 输出Hello 还可以使用substr()函数来获取一个字符串的最后几个字符。例如： 1 2 $str &#x3D; ‘Hello World’; echo substr($str, -5); &#x2F;&#x2F; 输出World 替换字符串 在PHP中，可以使用str_replace()函数来替换字符串中的一些字符。该函数接受三个参数：需要替换的字符串、替换成的字符串和源字符串。例如： 1 2 $str &#x3D; ‘Hello World’; echo str_replace(‘World’, ‘Universe’, $str); &#x2F;&#x2F; 输出Hello Universe 搜索字符串 在PHP中，可以使用strpos()函数来搜索字符串中的一个子字符串。该函数接受两个参数：需要搜索的字符串和源字符串。例如： 1 2 $str &#x3D; ‘Hello World’; echo strpos($str, ‘World’); &#x2F;&#x2F; 输出6 格式化字符串 在PHP中，可以使用sprintf()函数来格式化字符串。该函数接受一个格式字符串和一组参数，并返回一个格式化后的字符串。例如： 1 2 3 4 $name &#x3D; ‘John Smith’; $age &#x3D; 30; echo sprintf(‘My name is %s and I am %d years old.’, $name, $age); &#x2F;&#x2F; 输出 My name is John Smith and I am 30 years old.","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"PHP","slug":"Devolop/Secondary/PHP","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/PHP/"}],"tags":[]},{"title":"PHP 控制流","slug":"Devolop/Secondary/PHP/控制流","date":"2023-06-16T02:55:33.788Z","updated":"2023-05-12T01:46:01.752Z","comments":true,"path":"page/Devolop/Secondary/PHP/控制流.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/PHP/%E6%8E%A7%E5%88%B6%E6%B5%81.html","excerpt":"","text":"foreach 循环用于遍历数组 1234foreach ($array as $value)&#123; 要执行代码;&#125; 1234foreach ($array as $key =&gt; $value)&#123; 要执行代码;&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"PHP","slug":"Devolop/Secondary/PHP","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/PHP/"}],"tags":[]},{"title":"表单","slug":"Devolop/Secondary/PHP/表单","date":"2023-06-16T02:55:33.788Z","updated":"2023-05-19T00:34:36.053Z","comments":true,"path":"page/Devolop/Secondary/PHP/表单.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/PHP/%E8%A1%A8%E5%8D%95.html","excerpt":"","text":"1echo $_POST[&quot;name（表单name属性）&quot;]; checkbox 复选框： 1234567891011121314151617181920212223&lt;?php$q = isset($_POST[&#x27;q&#x27;])? $_POST[&#x27;q&#x27;] : &#x27;&#x27;;if(is_array($q)) &#123; $sites = array( &#x27;RUNOOB&#x27; =&gt; &#x27;菜鸟教程: http://www.runoob.com&#x27;, &#x27;GOOGLE&#x27; =&gt; &#x27;Google 搜索: http://www.google.com&#x27;, &#x27;TAOBAO&#x27; =&gt; &#x27;淘宝: http://www.taobao.com&#x27;, ); foreach($q as $val) &#123; // PHP_EOL 为常量，用于换行 echo $sites[$val] . PHP_EOL; &#125; &#125; else &#123;?&gt;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;checkbox&quot; name=&quot;q[]&quot; value=&quot;RUNOOB&quot;&gt; Runoob&lt;br&gt; &lt;input type=&quot;checkbox&quot; name=&quot;q[]&quot; value=&quot;GOOGLE&quot;&gt; Google&lt;br&gt; &lt;input type=&quot;checkbox&quot; name=&quot;q[]&quot; value=&quot;TAOBAO&quot;&gt; Taobao&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;&lt;?php&#125;?&gt;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"PHP","slug":"Devolop/Secondary/PHP","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/PHP/"}],"tags":[]},{"title":"运算符","slug":"Devolop/Secondary/PHP/运算符","date":"2023-06-16T02:55:33.788Z","updated":"2023-06-11T08:17:10.562Z","comments":true,"path":"page/Devolop/Secondary/PHP/运算符.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/PHP/%E8%BF%90%E7%AE%97%E7%AC%A6.html","excerpt":"","text":"负数的模运算正负符号取前面的数，直接按正数的方式算结果 三目运算符","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"PHP","slug":"Devolop/Secondary/PHP","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/PHP/"}],"tags":[]},{"title":"PHP输出","slug":"Devolop/Secondary/PHP/输出","date":"2023-06-16T02:55:33.788Z","updated":"2023-06-12T14:56:11.358Z","comments":true,"path":"page/Devolop/Secondary/PHP/输出.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/PHP/%E8%BE%93%E5%87%BA.html","excerpt":"","text":"echo后接字符串 printprint_r() 输出，且带格式 可以在print_r()输出语句前添加一段代码 echo &#39;&lt;pre&gt;&#39;; ，可将输出格式化 1234&lt;?echo &#x27;&lt;pre&gt;&#x27;;print_r($array);?&gt; var_dump($val)输出类型和值 语句前添加一段代码 echo &#39;&lt;pre&gt;&#39;; ，可将输出格式化","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"PHP","slug":"Devolop/Secondary/PHP","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/PHP/"}],"tags":[]},{"title":"PHP 错误信息","slug":"Devolop/Secondary/PHP/错误信息","date":"2023-06-16T02:55:33.788Z","updated":"2023-05-11T13:36:53.156Z","comments":true,"path":"page/Devolop/Secondary/PHP/错误信息.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/PHP/%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF.html","excerpt":"","text":"输出所有错误信息全局配置修改 php.ini ： 123456;显示错误信息display_errors = On;显示php开始错误信息display_startup_errors = On;日志记录错误信息log_errors = On 局部配置php文件首行中加入： 1234ini_set(&#x27;display_errors&#x27;,1); //错误信息ini_set(&#x27;display_startup_errors&#x27;,1); //php启动错误信息error_reporting(-1); //打印出所有的 错误信息ini_set(&#x27;error_log&#x27;, dirname(__FILE__) . &#x27;/error_log.txt&#x27;); //将出错信息输出到一个文本文件","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"PHP","slug":"Devolop/Secondary/PHP","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/PHP/"}],"tags":[]},{"title":"npm","slug":"Devolop/Main/nodejs/npm","date":"2023-06-16T02:55:33.773Z","updated":"2023-04-28T16:33:37.524Z","comments":true,"path":"page/Devolop/Main/nodejs/npm.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/nodejs/npm.html","excerpt":"","text":"cnpm配置安装npm后，每次我们安装包时，我们的电脑都要和npm服务器进行对话，去npm仓库获取包。npm默认的仓库地址为：http://registry.npmjs.org查看当前npm仓库地址命令：npm config get registry 安装淘宝提供的cnpm命令： 1npm install -g cnpm --registry=https://registry.npm.taobao.org 以后安装直接采用cnpm替代npm， 例如原生npm命令为：npm install uniq --save，cnpm命令为：cnpm install uniq --save 模块管理查看npm list 查看已安装的模块 install 安装npm install &lt;name&gt; 安装 --save 等同于 -S把依赖包名称添加到 package.json 文件 dependencies 下 --save-dev 等同于 -D添加到 package.json 文件 devDependencies 下 npm install --force 大概是依赖修复 npm uninstall &lt;name&gt; 删除有关&lt;name&gt;的包和依赖","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"nodejs","slug":"Devolop/Main/nodejs","permalink":"https://rchangl.github.io/categories/Devolop/Main/nodejs/"}],"tags":[]},{"title":"环境配置","slug":"Devolop/Main/nodejs/环境配置","date":"2023-06-16T02:55:33.773Z","updated":"2023-06-04T09:52:56.955Z","comments":true,"path":"page/Devolop/Main/nodejs/环境配置.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/nodejs/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html","excerpt":"","text":"默认路径查看路径npm config ls 查看 npm 路径配置 全局模块路径npm config set prefix &quot;D:\\aa\\my_data\\node_global&quot; 环境变量NODE_PATH 变量值：D:\\soft\\nodejs\\node_global\\node_modulespath 将默认的 C 盘下 APPData&#x2F;Roaming\\npm 修改为 D:\\soft\\nodejs\\node_global 参考： nodejs安装及环境变量配置 - 知乎","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"nodejs","slug":"Devolop/Main/nodejs","permalink":"https://rchangl.github.io/categories/Devolop/Main/nodejs/"}],"tags":[]},{"title":"模块化","slug":"Devolop/Main/nodejs/模块化","date":"2023-06-16T02:55:33.773Z","updated":"2023-06-04T14:38:06.197Z","comments":true,"path":"page/Devolop/Main/nodejs/模块化.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/nodejs/%E6%A8%A1%E5%9D%97%E5%8C%96.html","excerpt":"","text":"import &#123; router &#125; from &#39;./router&#39; router 文件夹作为一个模块导入 require12345678// test.jsfunction test()&#123; console.log(test);&#125;export.test = test;// result.jsconst test = require(&quot;./test&quot;)","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"nodejs","slug":"Devolop/Main/nodejs","permalink":"https://rchangl.github.io/categories/Devolop/Main/nodejs/"}],"tags":[]},{"title":"Nodejs npm 镜像","slug":"Devolop/Main/nodejs/镜像","date":"2023-06-16T02:55:33.773Z","updated":"2023-06-04T09:53:19.098Z","comments":true,"path":"page/Devolop/Main/nodejs/镜像.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/nodejs/%E9%95%9C%E5%83%8F.html","excerpt":"","text":"设置镜像npm config set registry https://registry.npm.taobao.org 将npm设置为淘宝镜像 cnpm config get registry 查看cnpm镜像 cnpmcnpm 模块路径不一致，会有些奇怪的 bug ，不要使用 cnpm 安装： npm install -g cnpm --registry=https://registry.npm.taobao.org 一些命令会出现bug，不建议使用","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"nodejs","slug":"Devolop/Main/nodejs","permalink":"https://rchangl.github.io/categories/Devolop/Main/nodejs/"}],"tags":[]},{"title":"PHP 结构","slug":"Devolop/Secondary/PHP/0-PHP结构","date":"2023-06-16T02:55:33.773Z","updated":"2023-06-01T02:52:28.526Z","comments":true,"path":"page/Devolop/Secondary/PHP/0-PHP结构.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/PHP/0-PHP%E7%BB%93%E6%9E%84.html","excerpt":"","text":"程序控制 exit include ‘xxx.php’ 输出 &lt;?php ?&gt; &lt;? ?&gt; 简写 &lt;?= ?&gt; &lt;? echo ; ?&gt; 控制流语句 数据类型 请求接收 数据库操作 mysqli mysqli_fetch_assoc(a) mysqli_fetch_array($dbs),MYSQLI_NUM) mysqli_fetch_all($a, MYSQLI_ASSOC) mysqli_free_result($dbs) 销毁 define(str,boolean)","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"PHP","slug":"Devolop/Secondary/PHP","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/PHP/"}],"tags":[]},{"title":"MySQL 外键","slug":"Devolop/后端/MySQL/MySQL 外键","date":"2023-06-16T02:55:33.773Z","updated":"2022-09-18T14:56:37.554Z","comments":true,"path":"page/Devolop/后端/MySQL/MySQL 外键.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/MySQL/MySQL%20%E5%A4%96%E9%94%AE.html","excerpt":"","text":"一个表中的字段，被另一个表引用。 主表 的值给 从表 引用。 从表添加值，必须在主表中找到相应的存在。创建时先创建主表，删表时先删从表。 主表被引用的必须保证唯一，添加唯一约束或主键约束 阿里禁用外键在阿里开发规范当中是禁用外键的，一切外键的概念都必须在应用层解决。 外键不好的地方：每次做DELETE或者UPDATE都必须考虑外键约束，会导致开发时更困难，测试数据极为不方便 外键的优点：保证数据的完整性和一致性，级联操作方便，数据一致性交给数据库，代码量小 使用外键后会产生的问题：性能问题，额外的数据一致性校验查询。 并发问题，外键约束会启用行级锁，主表写入时会进入阻塞。 级联删除问题，多层级联删除会上数据变得不可控，触发器也严格被禁用。 数据耦合，数据库层面数据关系产生耦合，数据迁移维护困难 阿里开发规范解读：为啥禁用外键约束？ - Bilibili","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"MySQL","slug":"Devolop/后端/MySQL","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/"}],"tags":[]},{"title":"","slug":"Devolop/后端/MySQL/存储过程","date":"2023-06-16T02:55:33.773Z","updated":"2022-10-05T11:28:39.444Z","comments":true,"path":"page/Devolop/后端/MySQL/存储过程.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html","excerpt":"","text":"存储过程 - MySQLSQL语句集，一次编译永久有效。（相当于编程语言中的函数） 高效率，高安全性 分为5类： 系统存储过程 本地～ 临时～ 远程～ 扩展～ 系统存储过程是改系统配置的，存放数据的是本地存储过程","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"MySQL","slug":"Devolop/后端/MySQL","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/"}],"tags":[]},{"title":"字段数据类型","slug":"Devolop/后端/MySQL/数据类型","date":"2023-06-16T02:55:33.773Z","updated":"2023-10-10T07:24:37.713Z","comments":true,"path":"page/Devolop/后端/MySQL/数据类型.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/MySQL/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","excerpt":"","text":"默认有符号，无符号为 INT UNSIGNED 数值类型整数： 类型 大小 范围 INT 4 Bytes [0, 255] TINYINT 1 B [0, 65535] SMALLINT 2 B [0, 1677 7215] MEDIUMINT 3 B [0, 42 9496 7295] BIGINT 8 B 浮点数： 整个数字长度&#x3D;整数位数+小数位数精度更高的小数，金额类计算 类型 大小 FLOAT(整个数字长度, 小数位数) 4 B DOUBLE(整个数字长度, 小数位数) 8 B DECIMAL(整个数字长度, 小数位数) 定点小数 DECIMAL不会像浮点数一样容易产生误差，适合精度要求较高的地方使用 DECIMAL(A,B) 占用 A+2 个字节 A表示有效数字精度。范围是1~65。缺省值10 B表示小数点后的位数。 B &lt;= A。缺省值0 12345column_name DECIMAL(A,B )column_name DECIMAL(A)column_name DECIMAL 字符串类型字符串用单引号或双引号包括，两者一样 CHAR(长度) 定长 0255 BytesVARCHAR(长度) 变长 065535 Bytes BLOB 二进制数据TEXT 长文本数据TINYBLOBTINYTEXTMEDIUMBLOBMEDIUMTEXTLONGBLOBLONGTEXT 日期类型DATA DATATIME 常用 类型 描述 范围 DAT 年月日 1000~9999 DATATIME 年月日 时分秒 1000~9999 TIME 时分秒 -838~838 YEAR 年份 1901~2155 TIMESTAMP 年月日 时分秒 1970~2038","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"MySQL","slug":"Devolop/后端/MySQL","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/"}],"tags":[]},{"title":"DOM - JS","slug":"Devolop/前端/JavaScript/DOM/DOM","date":"2023-06-16T02:55:33.757Z","updated":"2023-03-28T06:26:58.373Z","comments":true,"path":"page/Devolop/前端/JavaScript/DOM/DOM.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/DOM/DOM.html","excerpt":"","text":"全称： document object model DOM 对象将HTML文档的各个组成部分解为对应的对象： Document 整个文档对象 Element 元素对象 Attribute 属性对象 Text 文本对象 Comment 注释对象 对象分别对应着HTML文档的树状结构 Document 对象可以直接从 window 对象的属性获得 获取 Element 对象Element 对象是实时更新的 123456789// 返回对象：let element = document.getElementById(id); // 不存在则返回 null// 返回对象数组：let element = document.getElementByTagName(name); //特殊字符 &quot;*&quot; 代表了所有元素。let element = document.getElementsByName(name); // 根据name属性值 获取let element = document.getElementById(id); // getElementsByClassName(names);let elements = rootElement.getElementsByClassName(names); 修改方法removeChild()children() innerHTML 属性HTMLElementObject.innerHTML=text 修改网页标签元素内部的内容，可以放HTML代码","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"DOM","slug":"Devolop/前端/JavaScript/DOM","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/DOM/"}],"tags":[]},{"title":"Element - JS DOM","slug":"Devolop/前端/JavaScript/DOM/Element","date":"2023-06-16T02:55:33.757Z","updated":"2023-02-25T08:23:18.842Z","comments":true,"path":"page/Devolop/前端/JavaScript/DOM/Element.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/DOM/Element.html","excerpt":"","text":"https://www.w3school.com.cn/jsref/dom_obj_all.asp","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"DOM","slug":"Devolop/前端/JavaScript/DOM","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/DOM/"}],"tags":[]},{"title":"document - JS DOM","slug":"Devolop/前端/JavaScript/DOM/document","date":"2023-06-16T02:55:33.757Z","updated":"2023-02-25T08:39:19.675Z","comments":true,"path":"page/Devolop/前端/JavaScript/DOM/document.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/DOM/document.html","excerpt":"","text":"获取文档中 class&#x3D;”example” 的所有元素: document.querySelectorAll(“.example”);","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"DOM","slug":"Devolop/前端/JavaScript/DOM","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/DOM/"}],"tags":[]},{"title":"异步编程","slug":"Devolop/前端/JavaScript/异步/异步编程","date":"2023-06-16T02:55:33.757Z","updated":"2023-04-10T07:56:59.308Z","comments":true,"path":"page/Devolop/前端/JavaScript/异步/异步编程.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/%E5%BC%82%E6%AD%A5/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B.html","excerpt":"","text":"JavaScript &#x3D; ECMAScript + 宿主API 同步API可以获取返回值 12const fs = require(&#x27;fs&#x27;);const fsd = readFileSync(&#x27;fs1.txt&#x27;,&#x27;utf8&#x27;); 异步API不可获取返回值，需要使用回调函数来获取结果 回调 123setTimeout(function time1()&#123; console.log(&quot;task&quot;)&#125;,2000) 先执行宏任务（同步的代码），后执行异步代码 Ajax 原生123456789101112let xmlHttpRequest = new XMLHttpRequest();xmlHttpRequest.open(&#x27;GET&#x27;, &#x27;url&#x27;);xmlHttpRequest.send(); // 发送请求// 获取服务响应数据，监测 xmlHttpRequest 的状态xmlHttpRequest.onreadystatechange = function() &#123; if (xmlHttpRequest.readyState == 4 &amp;&amp; xmlHttpRequest.status == 200) &#123; // 此时 xmlHttpRequest.responseText 有数据了 document.getElementById(&#x27;div1&#x27;).innerHTML = xmlHttpRequest.responseText; &#125;&#125; AJAX - XMLHttpRequest 对象 Axios对原生 Ajax 进行了封装 网站： https://www.axios-http.cn/ 见本站前端分类下 Axios","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"异步","slug":"Devolop/前端/JavaScript/异步","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/%E5%BC%82%E6%AD%A5/"}],"tags":[]},{"title":"Axios","slug":"Devolop/前端/JavaScript/异步/Axios","date":"2023-06-16T02:55:33.757Z","updated":"2023-04-10T08:01:05.852Z","comments":true,"path":"page/Devolop/前端/JavaScript/异步/Axios.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/%E5%BC%82%E6%AD%A5/Axios.html","excerpt":"","text":"安装使用 npm: 1$ npm install axios 使用 CDN: 12345&lt;!-- jsDelivr CDN --&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;&lt;!-- unpkg CDN --&gt;&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt; 其他： https://www.axios-http.cn/docs/intro 使用123456789// 发起一个post请求axios(&#123; method: &#x27;post&#x27;, url: &#x27;/user/12345&#x27;, data: &#123; firstName: &#x27;Fred&#x27;, lastName: &#x27;Flintstone&#x27; &#125;&#125;); .then() 内的函数是 成功回调函数 123456789// 在 node.js 用GET请求获取远程图片axios(&#123; method: &#x27;get&#x27;, url: &#x27;http://bit.ly/2mTM3nY&#x27;, responseType: &#x27;stream&#x27;&#125;) .then(function (response) &#123; // 请求成功后执行的函数（成功回调函数） response.data.pipe(fs.createWriteStream(&#x27;ada_lovelace.jpg&#x27;)) &#125;); 请求方式别名axios(url[, config]) 默认 GET 请求 axios.get(url[, config]) GET axios.post(url[, data[, config]]) POST 其他： https://www.axios-http.cn/docs/api_intro","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"异步","slug":"Devolop/前端/JavaScript/异步","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/%E5%BC%82%E6%AD%A5/"}],"tags":[]},{"title":"Promise","slug":"Devolop/前端/JavaScript/异步/Promise","date":"2023-06-16T02:55:33.757Z","updated":"2023-06-18T10:34:17.382Z","comments":true,"path":"page/Devolop/前端/JavaScript/异步/Promise.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/%E5%BC%82%E6%AD%A5/Promise.html","excerpt":"","text":"","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"异步","slug":"Devolop/前端/JavaScript/异步","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/%E5%BC%82%E6%AD%A5/"}],"tags":[]},{"title":"MySQL 基本命令和代码","slug":"Devolop/后端/MySQL/环境配置和命令行命令/命令","date":"2023-06-16T02:55:33.757Z","updated":"2023-09-08T12:54:35.714Z","comments":true,"path":"page/Devolop/后端/MySQL/环境配置和命令行命令/命令.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/MySQL/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%91%BD%E4%BB%A4/%E5%91%BD%E4%BB%A4.html","excerpt":"","text":"SQL创建数据库CREATE DATABASE 数据库名; 删除数据库drop database 数据库名; 选择数据库use 数据库名; 创建数据表CREATE TABLE table_name (column_name column_type); 1234567CREATE TABLE IF NOT EXISTS `runoob_tbl`( `runoob_id` INT UNSIGNED AUTO_INCREMENT, `runoob_title` VARCHAR(100) NOT NULL, `runoob_author` VARCHAR(40) NOT NULL, `submission_date` DATE, PRIMARY KEY ( `runoob_id` ))ENGINE=InnoDB DEFAULT CHARSET=utf8; 类型后面是属性 UNSIGNED 数字类型无符号化 AUTO_INCREMENT 自动增长 NOT NULL 不能为空 PRIMARY KEY ( ) 主键 主键PRIMARY KEY ( ) 主键。每张表只有一个、值唯一、NOT NULL 实际上主键就是作为id使用的column，自然而然的就会有上面的限制 PRIMARY KEY 主键可以以属性方式加在column后方，但是这样不够显眼 PRIMARY KEY(user_id,role_id) 主键可以由多个列组成 查看 描述 describedesc table_name; 查看表 INSERT 插入数据12INSERT INTO &lt;表名&gt; ( &lt;列名1&gt; [ , … &lt;列名n&gt;] )VALUES (值1 [… , (值n) ]); SELECT 查询1234SELECT column_name,column_nameFROM table_name[WHERE Clause][LIMIT N][ OFFSET M] UPDATE 更新数据12UPDATE table_name SET field1=new-value1, field2=new-value2[WHERE Clause] 数据库结构的操作数据的操作删除数据1DELETE FROM &lt;表名&gt; [WHERE 子句] [ORDER BY 子句] [LIMIT 子句] 语法说明如下：&lt;表名&gt;：指定要删除数据的表名。ORDER BY 子句：可选项。表示删除时，表中各行将按照子句中指定的顺序进行删除。WHERE 子句：可选项。表示为删除操作限定删除条件，若省略该子句，则代表删除该表中的所有行。LIMIT 子句：可选项。用于告知服务器在控制命令被返回到客户端前被删除行的最大值。 例： 1DELETE FROM tb_courses WHERE course_id=4;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"MySQL","slug":"Devolop/后端/MySQL","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/"},{"name":"环境配置和命令行命令","slug":"Devolop/后端/MySQL/环境配置和命令行命令","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%91%BD%E4%BB%A4/"}],"tags":[]},{"title":"BOM对象 - JS","slug":"Devolop/前端/JavaScript/BOM/BOM对象","date":"2023-06-16T02:55:33.742Z","updated":"2023-03-23T04:13:28.998Z","comments":true,"path":"page/Devolop/前端/JavaScript/BOM/BOM对象.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/BOM/BOM%E5%AF%B9%E8%B1%A1.html","excerpt":"","text":"允许JS 与浏览器对话 主要有5个对象： Window 浏览器窗口对象 Navigator 浏览器对象浏览器的应用、版本、内核等信息 Screen 屏幕对象 History 历史记录对象 Location 地址栏对象 Java程序员重点需要了解 Window Location","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"BOM","slug":"Devolop/前端/JavaScript/BOM","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/BOM/"}],"tags":[]},{"title":"Window - JS BOM","slug":"Devolop/前端/JavaScript/BOM/Window","date":"2023-06-16T02:55:33.742Z","updated":"2023-03-23T14:28:35.100Z","comments":true,"path":"page/Devolop/前端/JavaScript/BOM/Window.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/BOM/Window.html","excerpt":"","text":"获取可以直接使用 windows.可以省略 alert(&quot;Hello Window&quot;) 属性history 对History对象的只读引用 location 用于窗口或框架的Location对象 navigator 对Navigator对象的只读引用 Locationlocation.href 地址栏的url location.href = &quot;https://www.itcast.cn&quot; 浏览器会直接跳转到网址 methodalert(message); 一个警告框，有 一段消息和一个确认按钮message 是要显示在对话框中的文本字符串，如果传入其他类型的值，会转换成字符串。 confirm()对话框，一段消息、两个按钮（确认、取消） result = window.confirm(message); result: true（确认） false（取消） setInterval()指定周期（单位毫秒）重复地，调用函数或计算表达式 12345678910// SyntaxsetInterval(code)setInterval(code, delay)setInterval(func)setInterval(func, delay)setInterval(func, delay, arg0)setInterval(func, delay, arg0, arg1)setInterval(func, delay, arg0, arg1, /* … ,*/ argN) delay 默认0 arg1, ..., argN 可选当计时结束的时候，将被传递给 func 函数的附加参数。 setTimeout()指定的延迟后（单位毫秒），调用函数或计算表达式 12345678// Syntaxvar timeoutID = scope.setTimeout(function[, delay, arg1, arg2, ...]);var timeoutID = scope.setTimeout(function[, delay]);var timeoutID = scope.setTimeout(code[, delay]);// 不推荐，原因和使用 eval()一样，有安全风险// 可选语法，可以使用字符串而不是function。 delay 默认0 arg1, ..., argN 可选附加参数，一旦定时器到期，它们会作为参数传递给function","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"BOM","slug":"Devolop/前端/JavaScript/BOM","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/BOM/"}],"tags":[]},{"title":"Audio - JavaScript","slug":"Devolop/前端/JavaScript/Basic Use/Audio","date":"2023-06-16T02:55:33.742Z","updated":"2023-05-30T03:15:33.234Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic Use/Audio.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic%20Use/Audio.html","excerpt":"","text":"Audio 对象HTML DOM Audio 对象 | 菜鸟教程 12345const music = new Audio(&#x27;adf.wav&#x27;);music.play();music.loop =true; // 将音频设为 循环播放music.playbackRate = 2;music.pause();qqazszdgfbgtyj Audio API12// 补充let data; 12345678910111213141516// 获取指定音源文件的二进制数据var xml = new XMLHttpRequest();xml.responseType = &#x27;arraybuffer&#x27;;xml.open(&#x27;GET&#x27;, &#x27;media/piano.wav&#x27;, true);xml.onload = function() &#123; // 获取二进制数据并解码 ctx.decodeAudioData( xml.response, function(_data) &#123; data = _data; &#125;, function(err) &#123; // error &#125; );&#125;; 12345// 初始化AudioContextvar ctx = new AudioContext();// AudioBufferSourceNode: 处理一次性短音的AudioNodevar bufferSource = ctx.createBufferSource(); 12345678910// 保存音源bufferSource.buffer = data; // 与最后输出的音源连接// AudioDestinationNode: 表示最后的输出// 可以参考AudioContext的destination属性bufferSource.connect(ctx.destination); // 播放音源bufferSource.start(0); 12345bufferSource.buffer = data;// 设定为2倍的播放速度，频率会变为之前的2倍，音调会升高bufferSource.playbackRate.value = 2;bufferSource.connect(ctx.destination);bufferSource.start(0);","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic Use","slug":"Devolop/前端/JavaScript/Basic-Use","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic-Use/"}],"tags":[]},{"title":"Math - JavaScript","slug":"Devolop/前端/JavaScript/Basic Use/Math","date":"2023-06-16T02:55:33.742Z","updated":"2022-10-13T06:36:27.096Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic Use/Math.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic%20Use/Math.html","excerpt":"","text":"methodramdom: 生成区间 [0～1) 的随机数 ceil: 向上取整，取值较大的（负数也是）floor: 向下取整round(num): 就近取整，.5取大 max: 找最大数min: 找最小数pow: 幂运算abs: 绝对值 属性Math.PI 圆周率 ramdom 生成一个随机数12// 区间 [A,B] 的随机整数A + Math.floor(Math.random() * (B + 1 - A))","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic Use","slug":"Devolop/前端/JavaScript/Basic-Use","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic-Use/"}],"tags":[]},{"title":"document 对象","slug":"Devolop/前端/JavaScript/Basic Use/document 对象","date":"2023-06-16T02:55:33.742Z","updated":"2022-10-24T14:41:29.595Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic Use/document 对象.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic%20Use/document%20%E5%AF%B9%E8%B1%A1.html","excerpt":"","text":"write输出内容到网页 12a = &#x27;hahaha&#x27;;document.write(a); 获取网页元素1let a = document.getElementsByClassName(&quot;example&quot;); Return a NodeList 对象","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic Use","slug":"Devolop/前端/JavaScript/Basic-Use","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic-Use/"}],"tags":[]},{"title":"window - JavaScript","slug":"Devolop/前端/JavaScript/Basic Use/window","date":"2023-06-16T02:55:33.742Z","updated":"2022-10-24T14:32:32.221Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic Use/window.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic%20Use/window.html","excerpt":"","text":"setInterval() 循环执行123setInterval(function()&#123; alert(&quot;Hello&quot;); &#125;, 3000);setInterval(&#x27;alert(&quot;Hello&quot;);&#x27;, 3000); 12setInterval(code, milliseconds);setInterval(function, milliseconds, param1, param2, ...) code &#x2F; function 必需。要调用一个代码串，也可以是一个函数。milliseconds 必须。周期性执行或调用 code&#x2F;function 之间的时间间隔，以毫秒计。param1, param2, ... 可选。 传给执行函数的其他参数（IE9 及其更早版本不支持该参数）。","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic Use","slug":"Devolop/前端/JavaScript/Basic-Use","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic-Use/"}],"tags":[]},{"title":"object 对象","slug":"Devolop/前端/JavaScript/Basic/object 对象","date":"2023-06-16T02:55:33.726Z","updated":"2023-06-01T11:22:10.394Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic/object 对象.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/object%20%E5%AF%B9%E8%B1%A1.html","excerpt":"","text":"无序 1let a = &#123;&#125;; attribute 属性123456789let a = &#123; name: &#x27;Andy&#x27;, age: 18&#125;;a.name;a[&#x27;name&#x27;];a[&#x27;sex&#x27;]; method 方法12345678910111213let a = &#123; name: &#x27;Andy&#x27;, age: 18, sayHi: function() &#123; console.log(&#x27;Hi!&#x27;); &#125;, sayHello: function() &#123; console.log(&#x27;Hello!&#x27;); &#125;&#125;;a.sayHi();a.sayHello(); 新增属性或方法123456789let a = &#123; name: &#x27;Andy&#x27;&#125;;a.age = 18; // 新增了一个属性 agea.sayHello = function() &#123; // 新增了一个属性 sayHello console.log(&#x27;Hello!&#x27;);&#125; 删除对象的属性123456let a = &#123; name: &#x27;Andy&#x27;, age: 18&#125;;delete obj.name; // 删除 name 属性 for infor…in 语句以任意顺序迭代一个对象的除Symbol以外的可枚举属性，包括继承的可枚举属性。 1234for (k in obj) &#123; // k 是对象的属性、方法名，string类型 obj[k];&#125; for in 最好不要用来遍历数组，其获得的k变量是string类型 属性操作删除属性1delete person.age Object.defineProperty 添加属性123456789101112131415Object.defineProperty(person, &#x27;prop1&#x27;, &#123; value: 18, enumerable: true, // 控制属性 是否可以枚举，省略默认 false writeble: true, // 控制属性 是否可以被修改，省略默认 false configurable: true // 控制属性 是否可以被删除，省略默认 false get:function()&#123; // 属性被读取时，get函数(getter)会被调用，返回值被调用 return &#x27;hello&#x27; &#125; set(value)&#123; // 属性被修改时，函数被执行，收到被修改后的值value n = value console.log(value) &#125;&#125;)","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"}],"tags":[]},{"title":"String 字符串 - JavaScript","slug":"Devolop/前端/JavaScript/Basic/String 字符串","date":"2023-06-16T02:55:33.726Z","updated":"2023-03-30T11:38:52.155Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic/String 字符串.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/String%20%E5%AD%97%E7%AC%A6%E4%B8%B2.html","excerpt":"","text":"string类型： var str1 = &#39;apple&#39; 字符串对象： var str2 = new String(&#39;apple&#39;) 字符串对象 等价于 string类型 ： str instanceof String true 十六进制 表示字符\\x## ASCII字符\\u#### Unicode字符 1&#x27;\\u4e2d\\u6587&#x27;; // 完全等同于 &#x27;中文&#x27; 多行字符串最新的ES6标准新增了一种多行字符串的表示方法，用反引号`…`表示： 123`这是一个多行字符串`; 模板字符串ES6新增了一种模板字符串，会自动替换字符串中的变量 123var name = &#x27;小明&#x27;;var age = 20;var message = `你好, $&#123;name&#125;, 你今年$&#123;age&#125;岁了!`; indexOfstr.charAt(index) str.charCodeAt(index) 方法.slice(1,3); .substr(3).substring(1[,3]); str.toLowerCase();str.toUpperCase(); str.split(&#39;l&#39;[, 3]);","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"}],"tags":[]},{"title":"JavaScript prototype（原型对象）","slug":"Devolop/前端/JavaScript/Basic/prototype（原型对象）","date":"2023-06-16T02:55:33.726Z","updated":"2023-05-28T03:02:56.898Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic/prototype（原型对象）.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/prototype%EF%BC%88%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%EF%BC%89.html","excerpt":"","text":"JavaScript 中所有的对象都有一个内置属性，称为它的 prototype（原型）。它本身是一个对象，故原型对象也会有它自己的原型，逐渐构成了原型链。原型链终止于拥有 null 作为其原型的对象上。 Object.prototype ，它是最基础的原型，所有对象默认都拥有它。 Object.prototype 的原型是 null ，所以它位于原型链的终点。 当你试图访问一个对象的属性时：如果在对象本身中找不到该属性，就会在原型中搜索该属性。如果仍然找不到该属性，那么就搜索原型的原型，以此类推，直到找到该属性；或者到达链的末端，在这种情况下，返回 undefined 。 获取原型Object.getPrototypeOf(obj) 标准方式 obj.__proto__ 所有浏览器中，对象都会有这个属性，指向原型 设置原型Object.create() 设置原型12345678910const personPrototype = &#123; greet() &#123; console.log(&quot;hello!&quot;); &#125;,&#125;;const carl = Object.create(personPrototype);carl.greet(); // hello!// 用 Object.create() 来创建一个以 personPrototype 为原型的新对象。 构造函数 设置原型所有函数都有 prototype 属性 将函数调用为 构造函数 时，此属性指向的对象 被设置为新建对象的原型 123456789const personPrototype = &#123; greet() &#123; console.log(`hello, my name is $&#123;this.name&#125;!`); &#125;,&#125;;function Person(name) &#123; this.name = name;&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"}],"tags":[]},{"title":"this 关键字 - JavaScript","slug":"Devolop/前端/JavaScript/Basic/this 关键字","date":"2023-06-16T02:55:33.726Z","updated":"2022-10-29T06:17:07.192Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic/this 关键字.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/this%20%E5%85%B3%E9%94%AE%E5%AD%97.html","excerpt":"","text":"对象方法中，表示方法所属的对象。 单独使用，指向全局（Global）对象 函数，默认也是所属对象绑定到this上的，严格模式没有绑定，this是undefined 事件中，this指向接收事件的HTML元素","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"}],"tags":[]},{"title":"JavaScript 的一些函数","slug":"Devolop/前端/JavaScript/Basic/一些函数","date":"2023-06-16T02:55:33.726Z","updated":"2022-10-11T18:05:54.887Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic/一些函数.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0.html","excerpt":"","text":"window.prompt弹出对话框，获取用户输入的值 1result = window.prompt(text, value); result 用来存储用户输入文字的字符串，或者是 null。text 用来提示用户输入文字的字符串，如果没有任何提示内容，可以省略。value 文本输入框中的默认值，可以省略。不过在 Internet Explorer 7 和 8 中，省略该参数会导致输入框中显示默认值”undefined”。 console.log()控制台输出 12let a = &#x27;hahaha&#x27;;console.log(a); window.alert显示一个警告对话框，上面显示有指定的文本内容以及一个”确定”按钮。 1window.alert(message); message 是要显示在对话框中的文本字符串，如果传入其他类型的值，会转换成字符串。 parseInt字符串解析为数字 1parseInt(string, radix); radix 可选从 2 到 36 的整数，表示进制的基数。如果超出这个范围，将返回 NaN。假如指定 0 或未指定，基数将会根据字符串的值进行推算。未制定0开头可能转为8进制","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"}],"tags":[]},{"title":"严格模式","slug":"Devolop/前端/JavaScript/Basic/严格模式","date":"2023-06-16T02:55:33.726Z","updated":"2023-02-24T04:57:40.394Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic/严格模式.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html","excerpt":"","text":"开启严格模式开头 &quot;use strict&quot;; 使用变量之前必须声明禁止自定义的函数中的 this 指向 window","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"}],"tags":[]},{"title":"伪数组（类数组）","slug":"Devolop/前端/JavaScript/Basic/伪数组","date":"2023-06-16T02:55:33.726Z","updated":"2023-04-19T08:11:14.324Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic/伪数组.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/%E4%BC%AA%E6%95%B0%E7%BB%84.html","excerpt":"","text":"一种按照索引存储数据且具有 length 属性的对象。因为是对象，所以不能调用数组的方法，比如 forEach()、push() 等。 123456let a = &#123; 0: &quot;x&quot;, 1: &quot;y&quot;, 2: &quot;z&quot;, length: 3,&#125;; 常见的伪数组函数中的 arguments123456test(1, 2, 3, 4);function test() &#123; console.log(arguments); // expected output: [Arguments] &#123; &#x27;0&#x27;: 1, &#x27;1&#x27;: 2, &#x27;2&#x27;: 3, &#x27;3&#x27;: 4 &#125; console.log(arguments.length); // expected output: 4&#125; document.querySelectorAll() 等批量选择元素的方法的返回值12const elements = document.querySelectorAll(&quot;div&quot;);console.log(elements); // expected output: NodeList(4) [div, div, div, div] &lt;input/&gt; 文件上传后的 files1234567891011&lt;html&gt; &lt;body&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;input&quot; onchange=&quot;fileChange()&quot; /&gt; &lt;/body&gt; &lt;script&gt; // 选择文件后触发 function fileChange() &#123; console.log(document.querySelector(&quot;#input&quot;).files); // expeced output: FileList &#123;0: File, length: 1&#125; &#125; &lt;/script&gt;&lt;/html&gt; 伪数组 转换成 数组ES2015 新增的 Array.from() 方法123456789let a = &#123; 0: &quot;x&quot;, 1: &quot;y&quot;, 2: &quot;z&quot;, length: 3,&#125;;let b = Array.from(a);console.log(b); // expected output: [ &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27; ] 数组的 slice() 方法1Array.prototype.slice.call(fakeArray) 1234567891011let a = &#123; 0: &quot;x&quot;, 1: &quot;y&quot;, 2: &quot;z&quot;, length: 3,&#125;;let b = [].slice.call(a);let c = [].slice.apply(a);console.log(b); // expected output: [ &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27; ]console.log(c); // expected output: [ &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27; ] 数组的 concat() 方法123456789let a = &#123; 0: &quot;x&quot;, 1: &quot;y&quot;, 2: &quot;z&quot;, length: 3,&#125;;let b = [].concat.apply([], a);console.log(b); // expected output: [ &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27; ] 遍历伪数组的每一项，将其添加到一个新的数组123456789101112let a = &#123; 0: &quot;x&quot;, 1: &quot;y&quot;, 2: &quot;z&quot;, length: 3,&#125;;let b = [];for (let i = 0; i &lt; a.length; i++) &#123; b.push(a[i]);&#125;console.log(b); // expected output: [ &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27; ]","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"}],"tags":[]},{"title":"变量 - JavaScript","slug":"Devolop/前端/JavaScript/Basic/变量","date":"2023-06-16T02:55:33.726Z","updated":"2023-03-02T16:26:24.311Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic/变量.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/%E5%8F%98%E9%87%8F.html","excerpt":"","text":"字面量 literal值 1000 &#39;字符串&#39; [] &#123;&#125; 命名组成_ 数字 字母 $ 数字不能开头，命名不能冲突 变量var 声明变量 let 声明变量（ES2015），取代 var ，更规范更易理解不易出错 letES2015 新增 禁止重复声明（同一作用域内）： 12let a = 1;let a = 2; // err 错误 声明多个变量： 1let a = 1, b = &#x27;2&#x27;; 块级作用域： 1234&#123; let x = 2;&#125;// 这里不能使用 x 变量 1234567let x = 10; // var 一样// 这里输出 x 为 10&#123; let x = 2; // 这里输出 x 为 2&#125;// 这里输出 x 为 10 constES2015 新增 不可更改 12const a = 1;a = 2; //err const 静态，无法修改的变量（ES2015） const a = 11","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"}],"tags":[]},{"title":"数据类型 - JavaScript","slug":"Devolop/前端/JavaScript/Basic/数据类型","date":"2023-06-16T02:55:33.726Z","updated":"2022-10-06T15:44:08.225Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic/数据类型.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","excerpt":"","text":"值类型(基本类型)：字符串（string）、数字(number)、布尔(boolean)、空（null）、未定义（undefined）、Symbol。 引用数据类型（对象类型）：对象(Object)、数组(Array)、函数(Function)，还有两个特殊的对象：正则（RegExp）和日期（Date）。 number正数 负数 小数 NaN 不等于任何值，包括自身 string单引号或双引号12let a = &quot;Hello&quot;;let b = &#x27;World&#x27;; 转义：12let a = &quot;\\&quot;&quot;;let b = &#x27;\\&#x27;&#x27;; 拼接：1234567let a = &quot;Hello&quot;;let b = &#x27;World&#x27;;let c = a + b; // &#x27;HelloWorld&#x27;let d = 666;let e = a + d; // 字符串 + 数字 仍是字符串let f = d + a; // 数字 + 字符串 也是 模板字符串：ES2015 字符串插值： 123let a = 18;`我今年$&#123;a&#125;岁了``我今年$&#123;a - 10&#125;岁了` 多行字符串： 12345`hahahahahahhahahah` undefined只声明，没赋值 1let a; null空类型（赋值了，undefined是没赋值的） 1let obj = null; typeof 检测类型12let a = 18;console.log(typeof a); 数据类型转换隐式转换+ 其中一边为字符串，转换成字符串 - * / 转换成数字类型 + 作为正号可以转换为数字类型 显式转换Number() 转为数字类型，NaN也是数字类型 parseInt() 只保留整数 parseFloat() 浮点数 Number() 遇到字母会NaN parset 仅在以数字开头时，遇到字母会忽视，常用于过滤单位 String() 变量.toString() 转换为字符串 toString(num) 转换成 num进制 少用","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"}],"tags":[]},{"title":"模块化 - JavaScript","slug":"Devolop/前端/JavaScript/Basic/模块化","date":"2023-06-16T02:55:33.726Z","updated":"2023-04-15T02:30:37.758Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic/模块化.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/%E6%A8%A1%E5%9D%97%E5%8C%96.html","excerpt":"","text":"ES6 导出声明时导出123456789101112// 导出数组export let months = [&#x27;Jan&#x27;, &#x27;Feb&#x27;, &#x27;Mar&#x27;,&#x27;Apr&#x27;, &#x27;Aug&#x27;, &#x27;Sep&#x27;, &#x27;Oct&#x27;, &#x27;Nov&#x27;, &#x27;Dec&#x27;];// 导出 const 声明的变量export const MODULES_BECAME_STANDARD_YEAR = 2015;// 导出类export class User &#123; constructor(name) &#123; this.name = name; &#125;&#125; 注意导出函数后面没有分号 单独导出123456789// say.jsfunction sayHi(user) &#123; alert(`Hello, $&#123;user&#125;!`);&#125;function sayBye(user) &#123; alert(`Bye, $&#123;user&#125;!`);&#125;export &#123;sayHi, sayBye&#125;; // 导出变量列表 导出为（export as）as 起别名，同导出一样 123// say.js...export &#123;sayHi as hi, sayBye as bye&#125;; 导入一般导入12345// main.jsimport &#123;sayHi, sayBye&#125; from &#x27;./say.js&#x27;;sayHi(&#x27;John&#x27;); // Hello, John!sayBye(&#x27;John&#x27;); // Bye, John! 导入所有（import *）12345// main.jsimport * as say from &#x27;./say.js&#x27;;say.sayHi(&#x27;John&#x27;);say.sayBye(&#x27;John&#x27;); 明确列出我们需要导入的内容 现在的构建工具（webpack 或者其他的）把模块打包到一起，然后对其进行优化以获得更快的加载速度，并且还会删除无用的代码。 明确列出要导入的内容会使得名称较短：sayHi() 取代 lib.sayHi()。 显示导入可以更好的概述代码结构：在哪里使用了什么。它使得代码阅读和重构更容易。 导入为（import as）as 起别名 12345// main.jsimport &#123;sayHi as hi, sayBye as bye&#125; from &#x27;./say.js&#x27;;hi(&#x27;John&#x27;); // Hello, John!bye(&#x27;John&#x27;); // Bye, John! 默认导出（export default）默认导出只能有一个，导入时没有括号： 123456789101112// user.jsexport default class User &#123; // 只要添加“default”即可 constructor(name) &#123; this.name = name; &#125;&#125;// main.jsimport User from &#x27;./user.js&#x27;; // 不需要花括号 &#123;User&#125;, 仅仅是 User 就可以了new User(&#x27;John&#x27;); export default可以没有名字，因为每个文件只有一个export default。而export不行，省略命名会出错： 12345678910export default class &#123; // 没有类名 constructor() &#123; ... &#125;&#125;export default function(user) &#123; // 没有函数名 alert(`Hello, $&#123;user&#125;!`);&#125;// 导出一个值而不使用变量export default [&#x27;Jan&#x27;, &#x27;Feb&#x27;, &#x27;Mar&#x27;,&#x27;Apr&#x27;, &#x27;Aug&#x27;, &#x27;Sep&#x27;, &#x27;Oct&#x27;, &#x27;Nov&#x27;, &#x27;Dec&#x27;]; 先定义再导出export default： 12345function sayHi(user) &#123; alert(`Hello, $&#123;user&#125;!`);&#125;export &#123;sayHi as default&#125;; // 和我们在函数前添加“export default”一样 export default可以和export一起用（少见）： 123456789101112131415// user.jsexport default class User &#123; constructor(name) &#123; this.name = name; &#125;&#125;export function sayHi(user) &#123; alert(`Hello, $&#123;user&#125;!`);&#125;// 同时导入：// main.jsimport &#123;default as User, sayHi&#125; from &#x27;./user.js&#x27;;new User(&#x27;John&#x27;); 要把 * 作为对象导入，那么 default 属性就是默认导出： 1234// main.jsimport * as user from &#x27;./user.js&#x27;;let User = user.default;new User(&#x27;John&#x27;); 谨慎使用 export default Re-export12export &#123;sayHi&#125; from &#x27;./say.js&#x27;;export &#123;default as User&#125; from &#x27;./user.js&#x27;; 直接导出同时导入的内容，一般用于包管理 跨域问题Chromium浏览器本地文件导入会有跨域问题，需要安装一个VSCode插件： Live Server 参考：完全弄懂JavaScript模块化(导出和导入) - 知乎","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"}],"tags":[]},{"title":"运算符 - JavaScript","slug":"Devolop/前端/JavaScript/Basic/运算符","date":"2023-06-16T02:55:33.726Z","updated":"2022-09-29T02:33:05.777Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic/运算符.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/%E8%BF%90%E7%AE%97%E7%AC%A6.html","excerpt":"","text":"== 不用，问题太多，用 === 就好","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"}],"tags":[]},{"title":"Array 数组","slug":"Devolop/前端/JavaScript/Basic/Array","date":"2023-06-16T02:55:33.710Z","updated":"2023-05-27T14:54:23.636Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic/Array.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/Array.html","excerpt":"","text":"[] 字面量 下标从0开始 123let a = []let b = [1, 2, 3, &#x27;hahaha&#x27;] length 属性长度 12let a = [1, 2, 3];a.length method.push() 数个元素增加到末尾，并返回添加后的长度unshift() 数个元素增加到开头，并返回添加后的长度 .pop() 删除最后一个，并返回删除的.shift() 删除第一个，并返回删除的 splice(下标, 个数) 增加、删除、替换 12var fruits = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;];fruits.splice(2, 0, &quot;X&quot;, &quot;Y&quot;); // A,B,X,Y,C,D forEach()1234567const array1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];array1.forEach(element =&gt; console.log(element));// Expected output: &quot;a&quot;// Expected output: &quot;b&quot;// Expected output: &quot;c&quot; 1forEach(callbackFn) callbackFn (element, index, array) =&gt; &#123;&#125;为数组中每个元素执行的函数。并会丢弃它的返回值。该函数被调用时将传入以下参数： element数组中正在处理的当前元素。 index数组中正在处理的当前元素的索引。 array调用了 forEach() 的数组本身。 1forEach(callbackFn, thisArg) thisArg 可选执行 callbackFn 时用作 this 的值。 Array.prototype.slice.call()Array.prototype.slice() call() 改变this指向。 call() 方法的作用和 apply() 方法类似，区别就是 call() 方法接受的是参数列表，而 apply() 方法接受的是一个参数数组。","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"}],"tags":[]},{"title":"Destructuring assignment 解构赋值","slug":"Devolop/前端/JavaScript/Basic/Destructuring assignment 解构赋值","date":"2023-06-16T02:55:33.710Z","updated":"2023-03-30T11:39:08.619Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic/Destructuring assignment 解构赋值.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/Destructuring%20assignment%20%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html","excerpt":"","text":"example12345678910111213let a, b, rest;[a, b] = [10, 20];console.log(a);// Expected output: 10console.log(b);// Expected output: 20[a, b, ...rest] = [10, 20, 30, 40, 50];console.log(rest);// Expected output: Array [30, 40, 50] Syntax1234567891011121314151617181920212223242526272829const [a, b] = array;const [a, , b] = array;const [a = aDefault, b] = array;const [a, b, ...rest] = array;const [a, , b, ...rest] = array;const [a, b, ...&#123; pop, push &#125;] = array;const [a, b, ...[c, d]] = array;const &#123; a, b &#125; = obj;const &#123; a: a1, b: b1 &#125; = obj;const &#123; a: a1 = aDefault, b = bDefault &#125; = obj;const &#123; a, b, ...rest &#125; = obj;const &#123; a: a1, b: b1, ...rest &#125; = obj;const &#123; [key]: a &#125; = obj;let a, b, a1, b1, c, d, rest, pop, push;[a, b] = array;[a, , b] = array;[a = aDefault, b] = array;[a, b, ...rest] = array;[a, , b, ...rest] = array;[a, b, ...&#123; pop, push &#125;] = array;[a, b, ...[c, d]] = array;(&#123; a, b &#125; = obj); // brackets are required(&#123; a: a1, b: b1 &#125; = obj);(&#123; a: a1 = aDefault, b = bDefault &#125; = obj);(&#123; a, b, ...rest &#125; = obj);(&#123; a: a1, b: b1, ...rest &#125; = obj);","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"}],"tags":[]},{"title":"ES6+ 对象属性与方法简写","slug":"Devolop/前端/JavaScript/Basic/ES6+ 对象属性与方法简写","date":"2023-06-16T02:55:33.710Z","updated":"2023-04-13T11:51:45.137Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic/ES6+ 对象属性与方法简写.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/ES6+%20%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95%E7%AE%80%E5%86%99.html","excerpt":"","text":"对象字面量 12345678let a = 3let obj = &#123; a: a, b: &#x27;b&#x27;, func: function () &#123; console.log(this.a,this.b) &#125;&#125; 在ES6之前，对象字面量的属性与方法必须用严格的键值对形式定义。而ES6提供了简化写法。 12345678let a = 3let obj = &#123; a, b:&#x27;b&#x27;, func()&#123; console.log(this.a, this.b) // 3 b &#125;&#125; 参考： ES6+ | 对象属性与方法简写_es6对象方法简写_MGsniper的博客-CSDN博客","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"}],"tags":[]},{"title":"Event 事件 - JavaScript","slug":"Devolop/前端/JavaScript/Basic/Event 事件","date":"2023-06-16T02:55:33.710Z","updated":"2023-06-01T12:04:43.910Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic/Event 事件.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/Event%20%E4%BA%8B%E4%BB%B6.html","excerpt":"","text":"绑定事件其他事件同理 HTML属性绑定 点击事件12&lt;input type=&quot;button&quot; onclick=&quot;f()&quot;&gt;&lt;!-- 点击执行在JS定义的 f() 函数 --&gt; 通过DOM元素属性绑定 点击事件123document.getElementById(&#x27;btn&#x27;).onclick=function() &#123;&#125; 常见事件onclick 鼠标点击 onblur 元素失去焦点 onfocus 元素获得焦点 onload 某个页面或图像被完成加载 onsubmit 当表单提交时触发该事件 onkeydown 某个键盘的键被按下 onmouseover 鼠标被移到某元素之上 onmouseout 鼠标从某元素移开 鼠标事件(mouse)点击事件click 双击事件dblclick 鼠标按下mousedown· 鼠标弹起mouseup· 鼠标移入mouseenter 鼠标移出mouseleave· 鼠标移入mouseover· 鼠标移出 mouseout 鼠标右键contextmuen 冒泡模式：事件触发重内往外捕获：从外往内 需要添加监听事件 切第三个参数为true 可以是个对象 capture：true 键盘事件(key)·按下keydown· 弹起keyup ·按下非功能键keypress html事件onresize: document.documentElement.clientWidth;没有括号 可视区域宽度 onscroll:document.documentElement.scrollTop;获取不可见区域的高度 表单相关 加载事件window.onload=function()&#123; alert(&#39;加载完毕&#39;);&#125;; Event 对象e.preventDefault() 阻止默认行为 e.stopPropagation() 阻止事件冒泡","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"}],"tags":[]},{"title":"ES规范 - JavaScript","slug":"Devolop/前端/JavaScript/Basic/ES规范","date":"2023-06-16T02:55:33.710Z","updated":"2022-10-13T07:24:58.378Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic/ES规范.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/ES%E8%A7%84%E8%8C%83.html","excerpt":"","text":"ES52008 年 7 月，由于对于下一个版本应该包括哪些功能，各方分歧太大，争论过于激烈，ECMA 开会决定，中止 ECMAScript 4.0 的开发，将其中涉及现有功能改善的一小部分，发布为 ECMAScript 3.1，而将其他激进的设想扩大范围，放入以后的版本，由于会议的气氛，该版本的项目代号起名为 Harmony（和谐）。会后不久，ECMAScript 3.1 就改名为 ECMAScript 5。 ES6 与 ECMAScript 2015 的关系ES6是ECMA的为JavaScript制定的第6个版本的标准，标准委员会最终决定，标准在每年的 6 月份正式发布一次，作为当年的正式版本。ECMAscript 2015 是在2015年6月份发布的ES6的第一个版本。依次类推ECMAscript 2016 是ES6的第二个版本、 ECMAscript 2017 是ES6的第三个版本…… ES5ES6 (ES2015)ES7 (ES2016)","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"}],"tags":[]},{"title":"JS 函数 的 属性 和 方法","slug":"Devolop/前端/JavaScript/Basic/Function's property and method","date":"2023-06-16T02:55:33.710Z","updated":"2023-05-28T03:00:01.233Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic/Function's property and method.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/Function's%20property%20and%20method.html","excerpt":"","text":"函数是 Javascript 中特殊的对象，可以拥有属性和方法 类似一般对象，可直接以 函数名 方式调用。 属性length参数个数 12345function add(x,y)&#123; console.log(arguments.length)//3 console.log(add.length);//2&#125;add(1,2,3); nameprototype指向一个 prototype object 12345function fn()&#123;&#125;;var obj = new fn;fn.prototype.a = 1;console.log(obj.a);//1 将函数用做构造函数时，新创建的对象 会以 这个属性指向的对象 作为原型 (prototype) 方法apply()和call() https://www.cnblogs.com/Renyi-Fan/p/8942739.htm","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"}],"tags":[]},{"title":"Functions 函数 - JavaScript","slug":"Devolop/前端/JavaScript/Basic/Function","date":"2023-06-16T02:55:33.710Z","updated":"2023-06-01T05:58:04.556Z","comments":true,"path":"page/Devolop/前端/JavaScript/Basic/Function.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/Function.html","excerpt":"","text":"定义函数定义12345678// 定义function name(参数) &#123; // 内容 return 值&#125;// 调用name(参数) return 只能返回一个值，多个值逗号并列，只返回最后一个 函数表达式123let f = function() &#123; // statements&#125; 匿名函数123function() &#123; // statements&#125; 箭头函数12345678910(param1, param2, …, paramN) =&gt; &#123; statements &#125;(param1, param2, …, paramN) =&gt; expression // 相当于：//(param1, param2, …, paramN) =&gt;&#123; return expression; &#125;// 当只有一个参数时，圆括号是可选的：(singleParam) =&gt; &#123; statements &#125;singleParam =&gt; &#123; statements &#125;// 没有参数的函数应该写成一对圆括号。() =&gt; &#123; statements &#125; 箭头函数 与普通函数的区别 this 箭头函数定义时确定，普通函数调用时确定2.箭头函数继承而来的this指向永远不变（重要）3.call()、apply()、bind()无法改变箭头函数中this的指向4.箭头函数不绑定arguments,取而代之用rest参数…解决5.不能使用new操作符(作为构造函数使用)6.不能使用原型属性7.不能简单返回对象字面量8.箭头函数不能换行 简写：123456789// 原：name: function() &#123; &#125;// ES6:name(): &#123;&#125; 函数和对象JavaScript 中函数也是对象，对象则有方法，apply和call就是函数对象的方法 参数未传入实参1234567let f = (a1, a2) =&gt; &#123; console.log(a2);&#125;f(&#x27;arg1&#x27;)// output: undefined 未传入实参，变量值为 undefined 参数默认值123456function log(x, y=&#x27;world&#x27;)&#123; // y 设置了默认值 console.log(x, y);&#125;log(&#x27;hello&#x27;); //hello world 立即执行函数123(function() &#123; &#125;)() 多个立即执行函数之间必须加 ; 1234567891011(function() &#123; &#125;)();(function() &#123; &#125;)();(function() &#123; &#125;)()","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"}],"tags":[]},{"title":"Idea 创建运行项目","slug":"Devolop/后端/Java Web/Idea 创建运行项目","date":"2023-06-16T02:55:33.695Z","updated":"2023-06-06T17:24:14.234Z","comments":true,"path":"page/Devolop/后端/Java Web/Idea 创建运行项目.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Idea%20%E5%88%9B%E5%BB%BA%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE.html","excerpt":"","text":"Spring配置配置好 Java 、 Maven 、 Tomcat 安装插件 Spring Boot Assistant (2023版下架了) 配置Maven项目依赖： 1234567&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;&lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;4.0.1&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt; 创建创建一个Maven项目 完善项目目录，创建src/main/webapp/WEB-INF/ webapp目录下放网页文件 java目录下放java文件 配置运行创建一个Smart Tomcat运行项。 Deployment directory 为webapp路径（网页文件） Context path 为域名后的路径 企业版运行在 Deployment 处，需要添加一个Artifact，才会运行生成的war文件 Community版打包点击左下角方框 开启侧边栏 -&gt; 侧边栏的 maven project -&gt; Lifecycle -&gt; package 在项目文件夹/target/下可以找到 *.war 文件。 Spring BootIdea Community网址 https://start.spring.io/ 创建一个项目，下载并导入到 Idea 企业版直接创建","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"}],"tags":[]},{"title":"Tomcat","slug":"Devolop/后端/Java Web/Tomcat","date":"2023-06-16T02:55:33.695Z","updated":"2023-06-19T11:07:01.993Z","comments":true,"path":"page/Devolop/后端/Java Web/Tomcat.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Tomcat.html","excerpt":"","text":"环境变量设置CATALINA_HOME，变量值：xxx\\apache-tomcat-9.0.xx PATH，变量值：%CATALINA_HOME%\\bin Tomcat 目录 bin 可执行文件 conf 配置文件 lib 依赖的Jar包 logs/ 日志存放 temp webapps 项目发布目录（这里的html文件可以直接访问） work 工作目录，生成的JSP源码 server.xml Tomcat 端口之类 tomcat-users.xml 用户权限 web.xml 响应类型 mime-type 控制台乱码conf/logging.properties ....encoding = UTF-8 UTF-8改GBK 关闭直接 x ：强制关闭 shutdown.bat : 正常关闭 Ctrl + c : 正常关闭 端口号修改conf/server.xml 1&lt;Connector port=&quot;8080&quot;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"}],"tags":[]},{"title":"Hello JavaFX","slug":"Devolop/Main/Java/JavaFX/Hello JavaFX","date":"2023-06-16T02:55:33.695Z","updated":"2023-02-14T06:59:07.649Z","comments":true,"path":"page/Devolop/Main/Java/JavaFX/Hello JavaFX.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Java/JavaFX/Hello%20JavaFX.html","excerpt":"","text":"程序入口类public class Main extends Application 继承Application 重写 start() main函数： 123public static void main(String[] args) &#123; launch(args);&#125; 编译运行JavaFX Maven Plugin -&gt; run Error解决JavaFX报错缺少 JavaFX 运行时组件, 需要使用该组件来运行此应用程序_暗诺星刻的博客-CSDN博客_javafx缺失 https://blog.csdn.net/wangpaiblog/article/details/122833266 结构舞台(Stage) 窗口 场景(Scene) 窗口内的白板 容器(Container)，布局(Layout ) 控件(Controls)","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Java","slug":"Devolop/Main/Java","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/"},{"name":"JavaFX","slug":"Devolop/Main/Java/JavaFX","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/JavaFX/"}],"tags":[]},{"title":"请求","slug":"Devolop/后端/Spring Boot/三层架构/Controller/请求","date":"2023-06-16T02:55:33.695Z","updated":"2023-09-23T02:04:14.307Z","comments":true,"path":"page/Devolop/后端/Spring Boot/三层架构/Controller/请求.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Spring%20Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/Controller/%E8%AF%B7%E6%B1%82.html","excerpt":"","text":"SpringBoot 方式简单参数请求参数名称与形参变量名相同，即可接收参数 12345678@RestControllerpublic class SimpleParamController &#123; @RequestMapping(&quot;/simpleParam&quot;) public String simpleParam(String name, Integer age) &#123; System.out.println(name + &quot;:&quot; + age); return &quot;OK&quot;; &#125;&#125; 实体对象参数12345@RequestMapping(&quot;/simplePojo&quot;)public String simpleParam(User user) &#123; System.out.println(user); return &quot;OK&quot;;&#125; 123456public class User &#123; private String name; private Integer age; // 以及成员的 Getter 和 Setter // 本例中需输出还要重写 toString&#125; 复杂实体对象参数参数对象有 对象嵌套 12345678910public class User &#123; private String name; private Integer age; private Address address; // 多了个对象&#125;public class Address &#123; private String province; private String city;&#125; 请求的参数写做： GET: localhost:8080/...&amp;address.province=beijing&amp;address.city=beijing 数组集合请求12345@RequestMapping(&quot;/arrayParam&quot;)public String arrayParam(String[] hobby) &#123; System.out.println(Arrays.toString(hobby)); return &quot;OK&quot;;&#125; 请求写作：localhost:8080/arrayParam?hobby=打球&amp;hobby=玩游戏&amp;hobby=唱歌 默认封装到数组中，可修改成集合： 12345@RequestMapping(&quot;/listParam&quot;)public String listParam(String[] hobby) &#123; System.out.println(Arrays.toString(hobby)); return &quot;OK&quot;;&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Spring Boot","slug":"Devolop/后端/Spring-Boot","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/"},{"name":"三层架构","slug":"Devolop/后端/Spring-Boot/三层架构","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"},{"name":"Controller","slug":"Devolop/后端/Spring-Boot/三层架构/Controller","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/Controller/"}],"tags":[]},{"title":"ServletResponse","slug":"Devolop/后端/Java Web/Servlet/请求 响应/ServletResponse","date":"2023-06-16T02:55:33.695Z","updated":"2023-03-07T16:39:56.261Z","comments":true,"path":"page/Devolop/后端/Java Web/Servlet/请求 响应/ServletResponse.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Servlet/%E8%AF%B7%E6%B1%82%20%E5%93%8D%E5%BA%94/ServletResponse.html","excerpt":"","text":"PrintWriter getWriter() 获取网页写入流resp.getWriter().println(&quot;Hello&quot;); void setHeader​(java.lang.String name, java.lang.String value) 设置响应头","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"},{"name":"Servlet","slug":"Devolop/后端/Java-Web/Servlet","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/"},{"name":"请求 响应","slug":"Devolop/后端/Java-Web/Servlet/请求-响应","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/%E8%AF%B7%E6%B1%82-%E5%93%8D%E5%BA%94/"}],"tags":[]},{"title":"Cookie","slug":"Devolop/后端/Java Web/Servlet/Cookie/Cookie","date":"2023-06-16T02:55:33.679Z","updated":"2023-06-02T01:09:18.148Z","comments":true,"path":"page/Devolop/后端/Java Web/Servlet/Cookie/Cookie.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Servlet/Cookie/Cookie.html","excerpt":"","text":"javax.servlet.http.Cookie 存放内容有限，大概4kb左右 创建Cookie​(String name, String value) 创建 添加到 responseresponse.addCookie(cookie); 获取 Cookie从request获取 获取 Cookie 对象12345678Cookie[] cookies = request.getCookies();// 非空校验if (cookies != null &amp;&amp; cookies.length &gt;0) &#123; for (Cookie co: cookies) &#123; // 遍历 // 具体操作 &#125;&#125; 获取 Cookie 值获取 name、值：String getName()String getValue() 设置到期时间void setMaxAge​(int expiry) 若 expiry 的值为负数：默认-1。不存储，只在浏览器内存中存活，关闭浏览器窗口则消失正整数：存储的秒数零：删除。无论在内存还是在硬盘中 Cookie 路径默认是当前路径 &quot;/s1&quot; cookie.setPath(&quot;/s1&quot;) 默认 &quot;/&quot; 全局可访问 子级可访问父级，不同路径不可访问","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"},{"name":"Servlet","slug":"Devolop/后端/Java-Web/Servlet","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/"},{"name":"Cookie","slug":"Devolop/后端/Java-Web/Servlet/Cookie","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/Cookie/"}],"tags":[]},{"title":"HttpSession","slug":"Devolop/后端/Java Web/Servlet/会话/HttpSession","date":"2023-06-16T02:55:33.679Z","updated":"2023-03-29T14:50:32.705Z","comments":true,"path":"page/Devolop/后端/Java Web/Servlet/会话/HttpSession.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Servlet/%E4%BC%9A%E8%AF%9D/HttpSession.html","excerpt":"","text":"String getId() 获取SeesionID Object getAttribute​(java.lang.String name) Returns the object bound with the specified name in this session, or null if no object is bound under the name.","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"},{"name":"Servlet","slug":"Devolop/后端/Java-Web/Servlet","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/"},{"name":"会话","slug":"Devolop/后端/Java-Web/Servlet/会话","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/%E4%BC%9A%E8%AF%9D/"}],"tags":[]},{"title":"Session","slug":"Devolop/后端/Java Web/Servlet/Cookie/Session","date":"2023-06-16T02:55:33.679Z","updated":"2023-03-11T00:59:32.989Z","comments":true,"path":"page/Devolop/后端/Java Web/Servlet/Cookie/Session.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Servlet/Cookie/Session.html","excerpt":"","text":"一个会话对应一个用户，每一个Sessin只保存在当前的浏览器当中，在相关页面取得。 销毁关闭浏览器后失效。关闭浏览器后，默认的Cookie生命周期为浏览器的内存，即关掉浏览器之后Cookie就失效了，此时JSESSIONID也就没有了。 session.invalidate() 立即销毁 获取 &#x2F; 创建 Session 对象HttpSession = requst.getSession(); 当获取Session时，存在则获取，不存在则创建 MethodString id = session.getId(); id session.getCreationTime() 创建时间session.getLastAccessedTime() 最后一次访问时间 session.isNew() 是否是新的Session对象 java.lang.Object getAttribute​(java.lang.String name)java.lang.Object getValue​(java.lang.String name) session.removeAttribute(&quot;key&quot;) 最大活动时间session.setMaxInactiveInterval(int) 最后一次访问后，存活时间","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"},{"name":"Servlet","slug":"Devolop/后端/Java-Web/Servlet","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/"},{"name":"Cookie","slug":"Devolop/后端/Java-Web/Servlet/Cookie","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/Cookie/"}],"tags":[]},{"title":"Session理解 - Java Web","slug":"Devolop/后端/Java Web/Servlet/会话/Session理解","date":"2023-06-16T02:55:33.679Z","updated":"2023-03-29T14:31:19.641Z","comments":true,"path":"page/Devolop/后端/Java Web/Servlet/会话/Session理解.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Servlet/%E4%BC%9A%E8%AF%9D/Session%E7%90%86%E8%A7%A3.html","excerpt":"","text":"Session 保存在服务器中，客户端通过Cookie保存SessionID，对应服务器中的Session","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"},{"name":"Servlet","slug":"Devolop/后端/Java-Web/Servlet","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/"},{"name":"会话","slug":"Devolop/后端/Java-Web/Servlet/会话","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/%E4%BC%9A%E8%AF%9D/"}],"tags":[]},{"title":"HttpServletResponse","slug":"Devolop/后端/Java Web/Servlet/请求 响应/HttpServletResponse","date":"2023-06-16T02:55:33.679Z","updated":"2023-03-29T16:15:14.526Z","comments":true,"path":"page/Devolop/后端/Java Web/Servlet/请求 响应/HttpServletResponse.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Servlet/%E8%AF%B7%E6%B1%82%20%E5%93%8D%E5%BA%94/HttpServletResponse.html","excerpt":"","text":"extends ServletResponse 重定向服务端指导，客户端行为。 存在两次请求，数据不共享。 response.sendRedirect​(java.lang.String location) 重定向之后的代码会继续执行，当前程序所有代码执行完毕后,才会执行重定向跳转 响应数据接收到客户端请求后，可以通过HttpServletResponse对象直接进行响应，响应时需要获取输出流。有两种形式: getWriter() 获取字符流(只能响应回字符)getOutputStream() 获取字节流(能响应一切数据) 响应回的数据到客户端被浏览器解析。*注意:两者不能同时使用。同时使用会报错 1234//字符输出流Printwriter writer = response.getwriter(;writer.write(&quot;He11o&quot;);writer.write(&quot;&lt;h2&gt;He11o&lt;/h2&gt;&quot;); 1234//字节输出流servletoutputstream out = response.getoutputstream( ;out.write(&quot;He11o&quot;. getBytes();out.write(&quot;&lt;h2&gt;He11o&lt;/h2&gt;&quot;.getBytes()); 定时跳转页面resp.setHeader(&quot;Refresh&quot;, &quot;3;URL=http://localhost/&quot;); 3秒钟后跳转","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"},{"name":"Servlet","slug":"Devolop/后端/Java-Web/Servlet","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/"},{"name":"请求 响应","slug":"Devolop/后端/Java-Web/Servlet/请求-响应","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/%E8%AF%B7%E6%B1%82-%E5%93%8D%E5%BA%94/"}],"tags":[]},{"title":"HttpServletRequest","slug":"Devolop/后端/Java Web/Servlet/请求 响应/HttpServletRequest","date":"2023-06-16T02:55:33.679Z","updated":"2023-03-29T16:15:02.942Z","comments":true,"path":"page/Devolop/后端/Java Web/Servlet/请求 响应/HttpServletRequest.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Servlet/%E8%AF%B7%E6%B1%82%20%E5%93%8D%E5%BA%94/HttpServletRequest.html","excerpt":"","text":"service() 参数 HttpServletRequest req getParameter(String s)获取网页传回来的信息，以键值对形式接受，参数是键值对的名字 前端发送信息分为 Get 和 POST 两种形式， 请求转发 formward将请求 Request 转发到其他Servlet、jsp、html 服务端行为，操作由服务器控制，前端地址栏的地址不变 从始至终只有一个请求 Request 。数据共享 使用转发，响应 Response 在下一个Servlet中完成，当前Servlet中不能操作 request.getRequestDispatcher(&quot;url&quot;).formward(request, response) 转发,request.getRequestDispatcher().forward(),与重定向一样,转发之后的代码也会执行,所有代码执行完毕才跳转 请求包含 include将其他的servle包含在当前servlet中 数据传输setAttributegetAttribute 获取SessionHttpSession getSession() 获取，没有Session则创建 HttpSession getSession​(boolean create)true 没有Session则创建， false 不创建","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"},{"name":"Servlet","slug":"Devolop/后端/Java-Web/Servlet","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/"},{"name":"请求 响应","slug":"Devolop/后端/Java-Web/Servlet/请求-响应","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/%E8%AF%B7%E6%B1%82-%E5%93%8D%E5%BA%94/"}],"tags":[]},{"title":"service方法、doGet方法和doPost方法的区别","slug":"Devolop/后端/Java Web/Servlet/请求 响应/service方法、doGet方法和doPost方法的区别","date":"2023-06-16T02:55:33.679Z","updated":"2023-03-29T07:40:15.636Z","comments":true,"path":"page/Devolop/后端/Java Web/Servlet/请求 响应/service方法、doGet方法和doPost方法的区别.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Servlet/%E8%AF%B7%E6%B1%82%20%E5%93%8D%E5%BA%94/service%E6%96%B9%E6%B3%95%E3%80%81doGet%E6%96%B9%E6%B3%95%E5%92%8CdoPost%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB.html","excerpt":"","text":"service：可以处理get&#x2F;post方式的请求，如果servlet中有service方法，会优先调用service方法 doGet方法: 处理get方法的请求doPost方法: 处理post方式的请求 注意：如果在覆写的service方法中调用了父类的service方法 super.service(arg0, arg1);则service方法处理完后，会再次根据请求方式响应的doGet和doPost方法执行所以，一般情况下，是不在覆写的service中调用父类的service方法的，避免出现405错误 (从源码可以看到，super.service()在调用doGet() doPost 等方法) 参考： Service 和 doGet 和 doPost 方法的区别_service方法和doget和dopost_小草dym的博客-CSDN博客","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"},{"name":"Servlet","slug":"Devolop/后端/Java-Web/Servlet","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/"},{"name":"请求 响应","slug":"Devolop/后端/Java-Web/Servlet/请求-响应","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/%E8%AF%B7%E6%B1%82-%E5%93%8D%E5%BA%94/"}],"tags":[]},{"title":"Servlet","slug":"Devolop/后端/Java Web/Servlet/Servlet","date":"2023-06-16T02:55:33.663Z","updated":"2023-03-04T08:54:38.402Z","comments":true,"path":"page/Devolop/后端/Java Web/Servlet/Servlet.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Servlet/Servlet.html","excerpt":"","text":"Server applet 基于HTTP协议。 由Servlet容器管理（Servlet）。 实现方式1.实现接口interface Servlet 2.继承类 GenericServletclass GenericServlet implements Servlet, ... 3.继承类 HttpServlet （初期常用）class HttpServlet extends GenericServlet 注解映射url在java代码中添加注解，替代在 web.xml 中的配置 @WebServlet(&quot;/url&quot;) 映射url，地址为：项目路径&#x2F;url @WebServlet(name = &quot;ServletName&quot;, value = &#123;&quot;/ser01&quot;, &quot;/ser02&quot;&#125;) 多路径， value 可替换为 urlPatterns Idea Tomcat 运行配置当中 Context path 是配置对外访问路径 处理请求&#x2F;实现方式Override service() 或者重写 doGet() doPost() 本质上相同，service会调用这两个，简化了很多细操作","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"},{"name":"Servlet","slug":"Devolop/后端/Java-Web/Servlet","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/"}],"tags":[]},{"title":"Enumeration接口","slug":"Devolop/后端/Java Web/Servlet/Enumeration接口","date":"2023-06-16T02:55:33.663Z","updated":"2023-03-04T15:36:40.580Z","comments":true,"path":"page/Devolop/后端/Java Web/Servlet/Enumeration接口.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Servlet/Enumeration%E6%8E%A5%E5%8F%A3.html","excerpt":"","text":"定义了一些方法，通过这些方法可以枚举（一次获得一个）对象集合中的元素。 这种传统接口已被迭代器取代，现代代码很少使用，但一些老API里还存在着 ServletConfig中的 Enumeration&lt;String&gt; getInitParameterNames() methodboolean hasMoreElements( )是否包含更多的元素 Object nextElement( )如果此枚举对象至少还有一个可提供的元素，则返回此枚举的下一个元素。 使用12345Enumeration&lt;String&gt; enumeration = servletConfig.getInitParameterNames();while(enumeration.hasMoreElements()) &#123; String element = enumeration.nextElement(); System.out.println(element);&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"},{"name":"Servlet","slug":"Devolop/后端/Java-Web/Servlet","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/"}],"tags":[]},{"title":"ServletContext","slug":"Devolop/后端/Java Web/Servlet/ServletContext","date":"2023-06-16T02:55:33.663Z","updated":"2023-03-06T16:36:34.004Z","comments":true,"path":"page/Devolop/后端/Java Web/Servlet/ServletContext.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Servlet/ServletContext.html","excerpt":"","text":"每个Web应用仅有一个ServletContext对象（webapps 下的每个目录都是一个 Web 应用）。 Web容器启动时创建，容器关闭或应用被卸载时结束。 该对象中保存了当前应用程序相关信息， ServletContext 对象也被称为 Context 域对象。 ServletContext的存在，就是为了存放必须的、重要的、所有用户需要共享的、线程又是安全的一些资源信息，这样不仅节省了空间，还提高了效率。 获得 ServletContext 对象四种方式： GenericServlet 的 getServletContext() 1ServletContext servletContext = this.getServletContext(); ServletConfig 的 getServletContext() 1ServletContext servletContext = this.getServletConfig().getServletContext(); HttpSession 的 getServletContext() 1ServletContext servletContext = req.getSession().getServletContext(); HttpServletRequest 提供的 getServletContext() 方法 1ServletContext servletContext = req.getServletContext(); 读取初始化参数设置上下文初始化参数web.xml: 1234567891011121314&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;&gt; &lt;!--设置全局初始化参数 --&gt; &lt;context-param&gt; &lt;param-name&gt;name1&lt;/param-name&gt; &lt;param-value&gt;value1&lt;/param-value&gt; &lt;/context-param&gt; &lt;context-param&gt; &lt;param-name&gt;name2&lt;/param-name&gt; &lt;param-value&gt;value2&lt;/param-value&gt; &lt;/context-param&gt;&lt;/web-app&gt; 调用接口中方法获取初始化参数String getInitParameter(String name) 根据初始化参数名 name，返回对应的初始化参数值。 Enumeration&lt;String&gt; getInitParameterNames() 返回 Web 应用所有上下文初始化参数名的枚举集合，如果该 Web 应用没有上下文初始化参数，则返回一个空的枚举集合。 数据通讯void setAttribute(String name, Object object) 把一个 Java 对象与一个属性名绑定，并将它作为一个属性存放到 ServletContext 中。参数 name 为属性名，参数 object 为属性值。 Object getAttribute(String name) 根据指定的属性名 name，返回 ServletContext 中对应的属性值。 void removeAttribute(String name) 从 ServletContext 中移除属性名为 name 的属性。 读取 Web 应用下的资源文件Set getResourcePaths(String path) 返回一个 Set 集合，该集合中包含资源目录中的子目录和文件的名称。 String getRealPath(String path) 返回资源文件的真实路径（文件的绝对路径）。 URL getResource(String path) 返回映射到资源文件的 URL 对象。 InputStream getResourceAsStream(String path) 返回映射到资源文件的 InputStream 输入流对象。","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"},{"name":"Servlet","slug":"Devolop/后端/Java-Web/Servlet","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/"}],"tags":[]},{"title":"Servlet是否需要手动关闭输出流？","slug":"Devolop/后端/Java Web/Servlet/Servlet是否需要手动关闭输出流？","date":"2023-06-16T02:55:33.663Z","updated":"2023-03-04T15:50:48.987Z","comments":true,"path":"page/Devolop/后端/Java Web/Servlet/Servlet是否需要手动关闭输出流？.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Servlet/Servlet%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E6%89%8B%E5%8A%A8%E5%85%B3%E9%97%AD%E8%BE%93%E5%87%BA%E6%B5%81%EF%BC%9F.html","excerpt":"","text":"参考：Servlet不用手动关闭输出流么?-CSDN社区 测试用的是tomcat7.0，resoponse如果没有关闭，tomcat会自动关闭 org.apache.catalina.core.ApplicationDispatcher.doForward(ServletRequest request, ServletResponse response)方法 最后一段代码是 12345678910111213141516// Close anywaytry &#123; PrintWriter writer = response.getWriter(); writer.close();&#125; catch (IllegalStateException e) &#123; try &#123; ServletOutputStream stream = response.getOutputStream(); stream.close(); &#125; catch (IllegalStateException f) &#123; // Ignore &#125; catch (IOException f) &#123; // Ignore &#125;&#125; catch (IOException e) &#123; // Ignore&#125; 可以清楚看到不管你有没有关闭，tomcat都重新关闭了一次","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"},{"name":"Servlet","slug":"Devolop/后端/Java-Web/Servlet","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/"}],"tags":[]},{"title":"ServletConfig 对象","slug":"Devolop/后端/Java Web/Servlet/ServletConfig","date":"2023-06-16T02:55:33.663Z","updated":"2023-03-04T09:15:56.619Z","comments":true,"path":"page/Devolop/后端/Java Web/Servlet/ServletConfig.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Servlet/ServletConfig.html","excerpt":"","text":"容器初始化 Servlet 时，会创建一个 ServletConfig 对象，可获得当前 Servlet 的初始化参数信息。 获得 ServletConfig 对象直接从带参的 init() 方法中提取123456789101112public class ServletConfigDemo extends HttpServlet &#123; private ServletConfig servletConfig; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; //获取Servlet得名字 this.servletConfig.getServletName(); &#125; @Override public void init(ServletConfig config) throws ServletException &#123; //从带参init方法中，提取ServletConfig对象 this.servletConfig = config; &#125;&#125; 调用 GenericServlet 提供的 getServletConfig() 方法获得12//调用 GenericServlet 提供的 getServletConfig 方法获得 ServletConfig 对象ServletConfig servletConfig = this.getServletConfig(); ServletConfig 接口 MethodEnumeration&lt;String&gt; getInitParameterNames() 返回 Servlet 所有的初始化参数名的枚举集合，如果该 Servlet 没有初始化参数，则返回一个空的集合。 String getInitParameter(String name) 根据初始化参数名 name，返回对应的初始化参数值。 ServletContext getServletContext() 返回一个代表当前 Web 应用的 ServletContext 对象。 String getServletName() 返回 Servlet 的名字，即 web.xml 中 &lt;servlet-name&gt; 元素的值。","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"},{"name":"Servlet","slug":"Devolop/后端/Java-Web/Servlet","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/"}],"tags":[]},{"title":"Servlet生命周期 - Java Web","slug":"Devolop/后端/Java Web/Servlet/Servlet生命周期","date":"2023-06-16T02:55:33.663Z","updated":"2023-03-04T08:59:22.551Z","comments":true,"path":"page/Devolop/后端/Java Web/Servlet/Servlet生命周期.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Servlet/Servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html","excerpt":"","text":"生命周期 类加载 实例、初始化：第一次访问会查找servlet，不存在则创建并初始化。init() 调用：service() doGet() doPost() 销毁：容器关闭时会执行销毁。destroy() Methodinit(ServletConfig config) 创建时 service(ServletRequest req, ServletResponse res) 此方法替代 重写 doGet doPost 方法 destroy() 销毁时","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"},{"name":"Servlet","slug":"Devolop/后端/Java-Web/Servlet","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/"}],"tags":[]},{"title":"乱码问题","slug":"Devolop/后端/Java Web/Servlet/乱码问题","date":"2023-06-16T02:55:33.663Z","updated":"2023-03-07T01:53:28.733Z","comments":true,"path":"page/Devolop/后端/Java Web/Servlet/乱码问题.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Servlet/%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98.html","excerpt":"","text":"Request 乱码问题POSTTomcat 8 以上版本： Get没有乱码问题，POST会产生乱码（默认编码是ISO-8859-1）。 设置服务器解析编码格式，可解决问题： req.setCharacterEncoding(&quot;UTF-8&quot;); 只针对 POST请求 ，GET无效 GETTomcat 7 以下版本： GET 会出现乱码 123str.getBytes(&quot;IS0-8859-1&quot;); // 先解码转为Bytesnew String(str.getBytes(&quot;IS0-8859-1&quot;), “UTF-8”); // 再用UTF-8重新编码 Response 乱码问题服务端默认编码是ISO-8859-1 设置服务端编码和响应头编码： 123response.setCharaterEncoding(&quot;UTF-8&quot;); // 设置服务端编码方式response.setHeader(&quot;content-type&quot;, &quot;text/html;charset=UTF-8&quot;); // 设置MIME类型和编码格式 同时设置编码和响应头（替代上面两句）： 1response.setContentType(&quot;text/html;charset=UTF-8&quot;); // 同时设置服务端和客户端的编码格式","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"},{"name":"Servlet","slug":"Devolop/后端/Java-Web/Servlet","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/"}],"tags":[]},{"title":"配置 Servlet 初始化参数 - JavaWeb","slug":"Devolop/后端/Java Web/Servlet/配置 Servlet 初始化参数","date":"2023-06-16T02:55:33.663Z","updated":"2023-03-05T08:03:43.094Z","comments":true,"path":"page/Devolop/后端/Java Web/Servlet/配置 Servlet 初始化参数.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/Servlet/%E9%85%8D%E7%BD%AE%20Servlet%20%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%82%E6%95%B0.html","excerpt":"","text":"web.xml 配置使用一个或多个 元素为 Servlet 配置初始化参数 示例： 1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot; id=&quot;WebApp_ID&quot; metadata-complete=&quot;false&quot; version=&quot;4.0&quot;&gt; &lt;servlet&gt; &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;net.biancheng.www.MyServlet&lt;/servlet-class&gt; &lt;!-- Servlet 初始化参数 --&gt; &lt;init-param&gt; &lt;param-name&gt;name&lt;/param-name&gt; &lt;param-value&gt;编程帮&lt;/param-value&gt; &lt;/init-param&gt; &lt;!-- Servlet 初始化参数 --&gt; &lt;init-param&gt; &lt;param-name&gt;URL&lt;/param-name&gt; &lt;param-value&gt;www.biancheng.net&lt;/param-value&gt; &lt;/init-param&gt; &lt;/servlet&gt;&lt;/web-app&gt; @WebServlet 配置123456789@WebServlet(urlPatterns = &#123;&quot;/MyServlet&quot;&#125;, initParams = &#123; @WebInitParam(name = &quot;name&quot;, value = &quot;编程帮&quot;), @WebInitParam(name = &quot;URL&quot;, value = &quot;www.biancheng.net&quot;) &#125; )public class MyServlet extends HttpServlet &#123; // ...&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"},{"name":"Servlet","slug":"Devolop/后端/Java-Web/Servlet","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/"}],"tags":[]},{"title":"webxml","slug":"Devolop/后端/Java Web/webxml","date":"2023-06-16T02:55:33.648Z","updated":"2023-03-07T15:44:46.019Z","comments":true,"path":"page/Devolop/后端/Java Web/webxml.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/%E5%90%8E%E7%AB%AF/Java%20Web/webxml.html","excerpt":"","text":"web.xml详解 及 web.xml模板 - mellisa&amp;myt - 博客园","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"}],"tags":[]},{"title":"Set - Java","slug":"Devolop/Language/Java SE/Base and Grammer/集合/Set","date":"2023-06-16T02:55:33.648Z","updated":"2022-11-04T15:53:16.627Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/集合/Set.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E9%9B%86%E5%90%88/Set.html","excerpt":"","text":"只有一个元素的集合 Known Implementing Classes:HashSet: 元素唯一，无序，可以含有空元素 TreeSet: 元素唯一，有序，不能含有空元素","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"},{"name":"集合","slug":"Devolop/Language/Java-SE/Base-and-Grammer/集合","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/%E9%9B%86%E5%90%88/"}],"tags":[]},{"title":"JPanel - Java Swing","slug":"Devolop/Main/Java/Java Swing/面板/JPanel","date":"2023-06-16T02:55:33.648Z","updated":"2022-10-31T15:03:36.660Z","comments":true,"path":"page/Devolop/Main/Java/Java Swing/面板/JPanel.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Java/Java%20Swing/%E9%9D%A2%E6%9D%BF/JPanel.html","excerpt":"","text":"父类java.lang.Objectjava.awt.Componentjava.awt.Containerjavax.swing.JComponent ConstructorJPanel() JPanel​(LayoutManager layout) 1JPanel jp = new JPanel(new FlowLayout); Method","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Java","slug":"Devolop/Main/Java","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/"},{"name":"Java Swing","slug":"Devolop/Main/Java/Java-Swing","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/Java-Swing/"},{"name":"面板","slug":"Devolop/Main/Java/Java-Swing/面板","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/Java-Swing/%E9%9D%A2%E6%9D%BF/"}],"tags":[]},{"title":"JFrame 窗口 - Java Swing","slug":"Devolop/Main/Java/Java Swing/窗口/JFrame","date":"2023-06-16T02:55:33.648Z","updated":"2022-10-23T09:01:29.016Z","comments":true,"path":"page/Devolop/Main/Java/Java Swing/窗口/JFrame.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Java/Java%20Swing/%E7%AA%97%E5%8F%A3/JFrame.html","excerpt":"","text":"Constructor 常用JFrame() JFrame​(String title) 带title 继承关系java.lang.Objectjava.awt.Componentjava.awt.Containerjava.awt.Windowjava.awt.Framejavax.swing.JFrame Method 常用setDefaultCloseOperation​(int operation) 点击窗口关闭按钮后的默认操作 WindowConstants.DO_NOTHING_ON_CLOSE: 不操作。 WindowConstants.HIDE_ON_CLOSE: 隐藏窗口（不会结束进程）, 再次调用 setVisible(true) 将再次显示。 WindowConstants.DISPOSE_ON_CLOSE: 销毁窗口, 如果所有可显示的窗口都被 DISPOSE, 则可能会自动结束进程。 WindowConstants.EXIT_ON_CLOSE: 退出进程。 setContentPane(Container contentPane) 设置窗口的内容面板 Panel declared in FramesetTitle​(String title) 设置title setResizable(boolean resizable) 设置窗口是否可放大缩小","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Java","slug":"Devolop/Main/Java","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/"},{"name":"Java Swing","slug":"Devolop/Main/Java/Java-Swing","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/Java-Swing/"},{"name":"窗口","slug":"Devolop/Main/Java/Java-Swing/窗口","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/Java-Swing/%E7%AA%97%E5%8F%A3/"}],"tags":[]},{"title":"JDialog - Java Swing","slug":"Devolop/Main/Java/Java Swing/窗口/JDialog","date":"2023-06-16T02:55:33.648Z","updated":"2022-10-30T15:14:48.703Z","comments":true,"path":"page/Devolop/Main/Java/Java Swing/窗口/JDialog.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Java/Java%20Swing/%E7%AA%97%E5%8F%A3/JDialog.html","excerpt":"","text":"继承关系java.lang.Objectjava.awt.Componentjava.awt.Containerjava.awt.Windowjava.awt.Dialogjavax.swing.JDialog Constructor123JDialog();JDialog​(Frame owner); // 指定父窗口JDialog​(Frame owner, String title); // 指定父窗口和标题 Methodvoid setDefaultCloseOperation​(int operation) 相对于JFrame没有EXIT_ON_CLOSE WindowConstants. DO_NOTHING_ON_CLOSE: 不操作。 WindowConstants. HIDE_ON_CLOSE: 隐藏窗口 WindowConstants. DISPOSE_ON_CLOSE: 销毁窗口，释放资源","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Java","slug":"Devolop/Main/Java","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/"},{"name":"Java Swing","slug":"Devolop/Main/Java/Java-Swing","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/Java-Swing/"},{"name":"窗口","slug":"Devolop/Main/Java/Java-Swing/窗口","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/Java-Swing/%E7%AA%97%E5%8F%A3/"}],"tags":[]},{"title":"Window - Java Swing","slug":"Devolop/Main/Java/Java Swing/窗口/Window","date":"2023-06-16T02:55:33.648Z","updated":"2022-10-24T14:31:55.304Z","comments":true,"path":"page/Devolop/Main/Java/Java Swing/窗口/Window.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Java/Java%20Swing/%E7%AA%97%E5%8F%A3/Window.html","excerpt":"","text":"Method 常用setVisible​(boolean b) 窗口可见性，默认不可见 boolean isShowing() 判断窗口是否处于显示状态 setIconImage​(Image image) 设置图标 setLocation(int x, int y) 设置窗口的 位置 setLocation(Point p) setSize​(int width, int height) 窗口的宽高 setSize​(Dimension d) setBounds(int x, int y, int width, int height) 设置窗口的 位置 和 宽高 setBounds(Rectangle rect) setLocationRelativeTo​(Component c) 设置窗口的相对位置 setAlwaysOnTop(boolean alwaysOnTop) 窗口置顶显示 dispose() 销毁窗口, 释放窗口及其所有子组件占用的资源, 之后再次调用 setVisible(true) 将会重构窗口 pack() 调整窗口的大小, 以适合其子组件的首选大小和布局。","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Java","slug":"Devolop/Main/Java","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/"},{"name":"Java Swing","slug":"Devolop/Main/Java/Java-Swing","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/Java-Swing/"},{"name":"窗口","slug":"Devolop/Main/Java/Java-Swing/窗口","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/Java-Swing/%E7%AA%97%E5%8F%A3/"}],"tags":[]},{"title":"InetAddress","slug":"Devolop/Language/Java SE/网络/InetAddress","date":"2023-06-16T02:55:33.632Z","updated":"2022-12-30T14:23:07.975Z","comments":true,"path":"page/Devolop/Language/Java SE/网络/InetAddress.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/%E7%BD%91%E7%BB%9C/InetAddress.html","excerpt":"","text":"static MethodInetAddress getLocalHost() 获取本机IP","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"网络","slug":"Devolop/Language/Java-SE/网络","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/%E7%BD%91%E7%BB%9C/"}],"tags":[]},{"title":"InetSocketAddress","slug":"Devolop/Language/Java SE/网络/InetSocketAddress","date":"2023-06-16T02:55:33.632Z","updated":"2023-01-03T03:25:54.745Z","comments":true,"path":"page/Devolop/Language/Java SE/网络/InetSocketAddress.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/%E7%BD%91%E7%BB%9C/InetSocketAddress.html","excerpt":"","text":"InetSocketAddress​(InetAddress addr, int port)","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"网络","slug":"Devolop/Language/Java-SE/网络","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/%E7%BD%91%E7%BB%9C/"}],"tags":[]},{"title":"网络 - Java","slug":"Devolop/Language/Java SE/网络/0Java网络","date":"2023-06-16T02:55:33.632Z","updated":"2023-02-09T16:41:01.000Z","comments":true,"path":"page/Devolop/Language/Java SE/网络/0Java网络.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/%E7%BD%91%E7%BB%9C/0Java%E7%BD%91%E7%BB%9C.html","excerpt":"","text":"Socket 是一个网络单位，包含了 IP地址 和 端口号 客户端和服务端的 Socket 建立一个TCP通信。客户端创建Socket类，服务端创建ServerSocket类。 客户端Socket(String host, int port) host:服务器主机的 名称&#x2F;IP地址 , port:服务器的端口号 创建Socket时连接服务器（3次握手），服务器未启动则抛出异常 getOutputStream 获取网络字节输出流OutputStream的write() 写数据给服务器 getInputStream 获取网络字节输入流InputStream的read() 读取服务器回写的数据 Socket 释放资源 服务端ServerSocket(int port) accept() 接收来自客户端的Socket对象，该方法将一直等待，直到客户端连接到服务器上给定的端口。 getInputStream 获取网络字节输入流InputStream的read() 读取服务器发送的数据 getOutputStream 获取网络字节输出流OutputStream的write() 回写数据给客户端 释放资源(Socket ServerSocket)","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"网络","slug":"Devolop/Language/Java-SE/网络","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/%E7%BD%91%E7%BB%9C/"}],"tags":[]},{"title":"ServerSocket - Java 网络","slug":"Devolop/Language/Java SE/网络/ServerSocket","date":"2023-06-16T02:55:33.632Z","updated":"2023-02-09T16:19:09.447Z","comments":true,"path":"page/Devolop/Language/Java SE/网络/ServerSocket.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/%E7%BD%91%E7%BB%9C/ServerSocket.html","excerpt":"","text":"java.net.ServerSocket 监听客户端，并与他们建立连接 ConstructorServerSocket​(int port) port:端口号 methodSocket accept() 获取请求的客户端对象Socket","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"网络","slug":"Devolop/Language/Java-SE/网络","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/%E7%BD%91%E7%BB%9C/"}],"tags":[]},{"title":"Socket - Java 网络","slug":"Devolop/Language/Java SE/网络/Socket","date":"2023-06-16T02:55:33.632Z","updated":"2023-02-09T13:18:59.912Z","comments":true,"path":"page/Devolop/Language/Java SE/网络/Socket.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/%E7%BD%91%E7%BB%9C/Socket.html","excerpt":"","text":"java.net.Socket 客户端和服务器可以通过对 Socket 对象的写入和读取来进行通信 ConstructorSocket() Socket​(String host, int port) MethodOutputStream getOutputStream() 返回此Socket的输出流 InputStream getInputStream() 返回此Socket的输入流 close() 关闭此Socket setSoTimeout​(int timeout) 设置超时时间 connect​(SocketAddress endpoint, int timeout)","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"网络","slug":"Devolop/Language/Java-SE/网络","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/%E7%BD%91%E7%BB%9C/"}],"tags":[]},{"title":"Collection","slug":"Devolop/Language/Java SE/Base and Grammer/集合/Collection","date":"2023-06-16T02:55:33.632Z","updated":"2023-03-29T05:23:59.416Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/集合/Collection.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E9%9B%86%E5%90%88/Collection.html","excerpt":"","text":"Interface Collection&lt;E&gt;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"},{"name":"集合","slug":"Devolop/Language/Java-SE/Base-and-Grammer/集合","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/%E9%9B%86%E5%90%88/"}],"tags":[]},{"title":"ArrayList","slug":"Devolop/Language/Java SE/Base and Grammer/集合/ArrayList","date":"2023-06-16T02:55:33.632Z","updated":"2023-03-20T15:19:52.870Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/集合/ArrayList.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E9%9B%86%E5%90%88/ArrayList.html","excerpt":"","text":"Constructors12345// JDK7 之前的写法：// ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();// JDK7 以及之后：ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); 1ArrayList() System out print 输出处理成 数组样式的字符串 输出 [e1, e2, e3] 增删改查 method增：boolean add​(E e) 删：E remove​(int index)boolean remove​(Object o) 改：E set​(int index, E element) 查：E get​(int index)int size()","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"},{"name":"集合","slug":"Devolop/Language/Java-SE/Base-and-Grammer/集合","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/%E9%9B%86%E5%90%88/"}],"tags":[]},{"title":"","slug":"Devolop/Language/Java SE/Base and Grammer/集合/HashMap","date":"2023-06-16T02:55:33.632Z","updated":"2022-11-03T14:53:57.684Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/集合/HashMap.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E9%9B%86%E5%90%88/HashMap.html","excerpt":"","text":"HashMap - JavaConstructorHashMap&lt;K,​V&gt; HashMap() Map&lt;K,V&gt; oneMap = newHashMap&lt;K,V&gt;(); MethodV put​(K key, V value) 添加一个Map联系","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"},{"name":"集合","slug":"Devolop/Language/Java-SE/Base-and-Grammer/集合","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/%E9%9B%86%E5%90%88/"}],"tags":[]},{"title":"LinkedHashMap","slug":"Devolop/Language/Java SE/Base and Grammer/集合/LinkedHashMap","date":"2023-06-16T02:55:33.632Z","updated":"2023-03-29T07:18:49.752Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/集合/LinkedHashMap.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E9%9B%86%E5%90%88/LinkedHashMap.html","excerpt":"","text":"put(String key, E value) 添加键值对 V get​(Object key) 通过key的值返回value Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. Collection&lt;V&gt; values() Returns a Collection view of the values contained in this map.","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"},{"name":"集合","slug":"Devolop/Language/Java-SE/Base-and-Grammer/集合","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/%E9%9B%86%E5%90%88/"}],"tags":[]},{"title":"Math","slug":"Devolop/Language/Java SE/内置类/Math","date":"2023-06-16T02:55:33.617Z","updated":"2022-09-17T09:01:03.217Z","comments":true,"path":"page/Devolop/Language/Java SE/内置类/Math.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/%E5%86%85%E7%BD%AE%E7%B1%BB/Math.html","excerpt":"","text":"两个常量Math.E 自然对数 Math.PI 圆周率 最大值、最小值和绝对值 方法 说明 static int abs(int a) 返回 a 的绝对值 static long abs(long a) 返回 a 的绝对值 static float abs(float a) 返回 a 的绝对值 static double abs(double a) 返回 a 的绝对值 static int max(int x,int y) 返回 x 和 y 中的最大值 static double max(double x,double y) 返回 x 和 y 中的最大值 static long max(long x,long y) 返回 x 和 y 中的最大值 static float max(float x,float y) 返回 x 和 y 中的最大值 static int min(int x,int y) 返回 x 和 y 中的最小值 static long min(long x,long y) 返回 x 和 y 中的最小值 static double min(double x,double y) 返回 x 和 y 中的最小值 static float min(float x,float y) 返回 x 和 y 中的最小值 求整运算 方法 说明 static double ceil(double a) 返回大于或等于 a 的最小整数 static double floor(double a) 返回小于或等于 a 的最大整数 static double rint(double a) 返回最接近 a 的整数值，如果有两个同样接近的整数，则结果取偶数 static int round(float a) 将参数加上 1&#x2F;2 后返回与参数最近的整数 static long round(double a) 将参数加上 1&#x2F;2 后返回与参数最近的整数，然后强制转换为长整型 三角函数运算 方法 说明 static double sin(double a) 返回角的三角正弦值，参数以孤度为单位 static double cos(double a) 返回角的三角余弦值，参数以孤度为单位 static double asin(double a) 返回一个值的反正弦值，参数域在 [-1,1]，值域在 [-PI&#x2F;2,PI&#x2F;2] static double acos(double a) 返回一个值的反余弦值，参数域在 [-1,1]，值域在 [0.0,PI] static double tan(double a) 返回角的三角正切值，参数以弧度为单位 static double atan(double a) 返回一个值的反正切值，值域在 [-PI&#x2F;2,PI&#x2F;2] static double toDegrees(double angrad) 将用孤度表示的角转换为近似相等的用角度表示的角 staticdouble toRadians(double angdeg) 将用角度表示的角转换为近似相等的用弧度表示的角 指数运算方根、取对数及其求 n 次方的运算 方法 说明 static double exp(double a) 返回 e 的 a 次幂 static double pow(double a,double b) 返回以 a 为底数，以 b 为指数的幂值 static double sqrt(double a) 返回 a 的平方根 static double cbrt(double a) 返回 a 的立方根 static double log(double a) 返回 a 的自然对数，即 lna 的值 static double log10(double a) 返回以 10 为底 a 的对数","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"内置类","slug":"Devolop/Language/Java-SE/内置类","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/%E5%86%85%E7%BD%AE%E7%B1%BB/"}],"tags":[]},{"title":"Ramdom","slug":"Devolop/Language/Java SE/内置类/Ramdom","date":"2023-06-16T02:55:33.617Z","updated":"2022-09-20T02:14:49.059Z","comments":true,"path":"page/Devolop/Language/Java SE/内置类/Ramdom.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/%E5%86%85%E7%BD%AE%E7%B1%BB/Ramdom.html","excerpt":"","text":"ConstructorRandom() Random​(long seed) 使用指定种子 methodint nextInt() int nextInt​(int bound) 0 ~ bound-1 的随机数","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"内置类","slug":"Devolop/Language/Java-SE/内置类","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/%E5%86%85%E7%BD%AE%E7%B1%BB/"}],"tags":[]},{"title":"SecurityException Prohibited package name java","slug":"Devolop/Language/Java SE/Base and Grammer/报错/Prohibited package name","date":"2023-06-16T02:55:33.617Z","updated":"2023-03-05T08:31:21.284Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/报错/Prohibited package name.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E6%8A%A5%E9%94%99/Prohibited%20package%20name.html","excerpt":"","text":"报错： java.lang.SecurityException: Prohibited package name: java 1234Connected to the target VM, address: &#x27;127.0.0.1:63225&#x27;, transport: &#x27;socket&#x27;java.lang.SecurityException: Prohibited package name: java at java.lang.ClassLoader.preDefineClass(ClassLoader.java:662) at java.lang.ClassLoader.defineClass(ClassLoader.java:761) 原因： 定位到java.lang.ClassLoader.preDefineClass ，可以看出preDefineClass方法首先对类名进行了检查，发现以java作为一级包名，则抛出安全异常：禁止使用的包名！ 禁止使用java作为一级包名","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"},{"name":"报错","slug":"Devolop/Language/Java-SE/Base-and-Grammer/报错","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/%E6%8A%A5%E9%94%99/"}],"tags":[]},{"title":"变量、对象的内存 - Java","slug":"Devolop/Language/Java SE/JVM/变量、对象的内存","date":"2023-06-16T02:55:33.601Z","updated":"2023-02-19T13:12:16.509Z","comments":true,"path":"page/Devolop/Language/Java SE/JVM/变量、对象的内存.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/JVM/%E5%8F%98%E9%87%8F%E3%80%81%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98.html","excerpt":"","text":"内存结构 本地方法栈 寄存器 栈 元空间 堆 方法区JDK8开始，取消了 方法区 ，新增元空间。原方法区的功能进行了拆分，放到了堆和元空间中 运行一个类时，这个类的字节码文件就会加载到方法区进行临时的存储 栈方法被调用时，就要进栈执行 新建一个类的过程 加载 class文件 （方法区） 申明局部变量 （栈） 在堆内存中开辟一个空间 从方法区中拷贝变量 成员方法的地址 （指向方法区的方法） 默认初始化 （0 0.0 null） 显示初始化 （成员变量等号赋值） 构造方法初始化 将堆内存中的地址赋值给栈中的局部变量 this.this. 调用者的地址值 局部变量和成员变量局部变量在栈（栈中的方法里），成员变量在堆","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"JVM","slug":"Devolop/Language/Java-SE/JVM","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/JVM/"}],"tags":[]},{"title":"类加载 - Java","slug":"Devolop/Language/Java SE/JVM/类加载","date":"2023-06-16T02:55:33.601Z","updated":"2023-02-23T08:23:41.145Z","comments":true,"path":"page/Devolop/Language/Java SE/JVM/类加载.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD.html","excerpt":"","text":"将.class加载入内存，运行时进行 加载 读取.class文件，文件格式验证 验证 元数据、字节码验证 准备 静态变量赋值 解析 符号引用验证 初始化 主动资源初始化","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"JVM","slug":"Devolop/Language/Java-SE/JVM","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/JVM/"}],"tags":[]},{"title":"默认初始化的值 - Java","slug":"Devolop/Language/Java SE/Base and Grammer/默认初始化的值","date":"2023-06-16T02:55:33.601Z","updated":"2023-02-04T15:49:34.741Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/默认初始化的值.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E9%BB%98%E8%AE%A4%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E5%80%BC.html","excerpt":"","text":"整数 0 浮点数 0.0 布尔 false 字符 &#39;/u0000&#39; 空格 引用数据类型 null","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"PrintWriter - Java","slug":"Devolop/Language/Java SE/Base and Grammer/IO流/PrintWriter","date":"2023-06-16T02:55:33.601Z","updated":"2022-11-03T16:29:12.759Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/IO流/PrintWriter.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/IO%E6%B5%81/PrintWriter.html","excerpt":"","text":"Methodwrite(String/char[]...)","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"},{"name":"IO流","slug":"Devolop/Language/Java-SE/Base-and-Grammer/IO流","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/IO%E6%B5%81/"}],"tags":[]},{"title":"IO 流 - Java","slug":"Devolop/Language/Java SE/Base and Grammer/IO流/0概念、理论","date":"2023-06-16T02:55:33.601Z","updated":"2023-02-08T04:46:21.663Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/IO流/0概念、理论.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/IO%E6%B5%81/0%E6%A6%82%E5%BF%B5%E3%80%81%E7%90%86%E8%AE%BA.html","excerpt":"","text":"概念Input&#x2F;Output 缩写 输入输出是相对于程序，而不是数据源 分类节点流：直接连接数据源或目的地 处理流（也叫包装流）：不直接连接数据源或目的地","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"},{"name":"IO流","slug":"Devolop/Language/Java-SE/Base-and-Grammer/IO流","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/IO%E6%B5%81/"}],"tags":[]},{"title":"InputStream - Java","slug":"Devolop/Language/Java SE/Base and Grammer/IO流/InputStream","date":"2023-06-16T02:55:33.601Z","updated":"2023-02-09T17:08:40.318Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/IO流/InputStream.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/IO%E6%B5%81/InputStream.html","excerpt":"","text":"methodint read​(byte[] b) 读取数据，将其存放到数组b当中，Return读取到数组的总字节数，如果由于已到达流的结尾而没有更多数据，则为-1。","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"},{"name":"IO流","slug":"Devolop/Language/Java-SE/Base-and-Grammer/IO流","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/IO%E6%B5%81/"}],"tags":[]},{"title":"switch JDK14新特性","slug":"Devolop/Language/Java SE/Base and Grammer/switch JDK14新特性","date":"2023-06-16T02:55:33.585Z","updated":"2023-03-31T05:22:02.364Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/switch JDK14新特性.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/switch%20JDK14%E6%96%B0%E7%89%B9%E6%80%A7.html","excerpt":"","text":"JDK12 开始引入，JDK 14成为了正式版本的功能：JEP 361: Switch Expressions (Standard)。 省略 break原先： 12345switch (n) &#123; case 1: //... break;&#125; 简化后： 123456789101112131415switch (n) &#123; case 1 -&gt; &#123; //... &#125;&#125;这种写法不用担心case穿透的问题，可读性也更好了如果只有一行代码，可以省略大括号：```javaswitch (n) &#123; case 1 -&gt; System.out.println(&quot;Hello&quot;);&#125; switch表达式switch可以作为一个表达式使用了 12345678910111213// 声明变量score，并为其赋值为&#x27;C&#x27;char score = &#x27;C&#x27;;// 执行switch分支语句String s = switch (score)&#123; case &#x27;A&#x27; -&gt; &quot;优秀&quot;; case &#x27;B&#x27; -&gt; &quot;良好&quot;; case &#x27;C&#x27; -&gt; &quot;中&quot;; case &#x27;D&#x27; -&gt; &quot;及格&quot;; case &#x27;F&#x27; -&gt; &quot;不及格&quot;; default -&gt; &quot;成绩输入错误&quot;;&#125;;System.out.println(s); 多值匹配case后面可以接多个值，用逗号分隔，进行多值匹配 当你把使用 箭头括号 将 冒号和break 省略之后，此时switch就不会贯穿了，但在某些情况下，程序本来就希望贯穿。这时就可以使用多值匹配 12345678910// 声明变量score，并为其赋值为&#x27;C&#x27;char score = &#x27;B&#x27;;// 执行switch分支语句String s = switch (score) &#123; case &#x27;A&#x27;, &#x27;B&#x27; -&gt; &quot;上等&quot;; case &#x27;C&#x27; -&gt; &quot;中等&quot;; case &#x27;D&#x27;, &#x27;E&#x27; -&gt; &quot;下等&quot;; default -&gt; &quot;成绩数据输入非法！&quot;;&#125;;System.out.println(s);","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"控制台输入 Scanner - Java","slug":"Devolop/Language/Java SE/Base and Grammer/控制台输入 Scanner","date":"2023-06-16T02:55:33.585Z","updated":"2022-12-04T16:10:05.174Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/控制台输入 Scanner.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%85%A5%20Scanner.html","excerpt":"","text":"Scanner 1Scanner scanner = new Scanner(System.in);","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"包装类 - Java","slug":"Devolop/Language/Java SE/Base and Grammer/包装类","date":"2023-06-16T02:55:33.585Z","updated":"2023-03-20T15:26:43.495Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/包装类.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E5%8C%85%E8%A3%85%E7%B1%BB.html","excerpt":"","text":"基本数据类型 包装类 byte Byte short Short char Character int Integer long Long float Float double Double boolean Boolean 只有 Character 和 Integer 需要额外记忆","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"类、对象 Class Object","slug":"Devolop/Language/Java SE/Base and Grammer/类、对象 Class Object","date":"2023-06-16T02:55:33.585Z","updated":"2023-02-04T15:46:53.645Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/类、对象 Class Object.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%20Class%20Object.html","excerpt":"","text":"Javabean类描述一类事物的类 规则规范一个文件只能有一个public类，与文件名同名 建议一个文件只定义一个类 成员变量 一般无需指定初始化值，存在默认值。 匿名内部类12345new Animals() &#123; public void eat() &#123; // 重写的方法 System.out.println(&quot;吃，匿名内部类重写的方法&quot;); &#125;&#125;.eat();","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"逻辑运算符","slug":"Devolop/Language/Java SE/Base and Grammer/逻辑运算符","date":"2023-06-16T02:55:33.585Z","updated":"2023-01-17T08:16:38.129Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/逻辑运算符.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6.html","excerpt":"","text":"四个逻辑运算符&amp; 与 | 或 上两者，左右两边的表达式都会运算 ! 非 ^ 异或 短路逻辑运算符当左边能确定最终值时，右边不再运行 &amp;&amp; 左边为false，右边不运行 || 左边为true，右边不运行 二进制数值运算&amp; 两边是整数的时候， 按位与 运算 | 同上时， 按位或 运算 &lt;&lt; 左移，低位补 0 左移一次，数值 *2 &gt;&gt; 右移，高位的符号位不变，剩余的数值位补 0 右移一次，数值 /2 &gt;&gt;&gt; 无符号右移，高位都补0","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"随机数 Random","slug":"Devolop/Language/Java SE/Base and Grammer/随机数 Random","date":"2023-06-16T02:55:33.585Z","updated":"2023-03-20T14:51:59.153Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/随机数 Random.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E9%9A%8F%E6%9C%BA%E6%95%B0%20Random.html","excerpt":"","text":"ConstructorRandom() method 方法 说明 void setSeed(long seed) 重新设置 Random 对象中的种子数。设置完种子数以后的 Random 对象和相同种子数使用 new 关键字创建出的 Random 对象相同 boolean nextBoolean() 生成一个随机的 boolean 值，生成 true 和 false 的值概率相等 double nextDouble() 生成一个随机的 double 值，数值介于 [0,1.0) int nextInt() 生成一个随机的 int 值，该值介于 int 的区间，也就是 -2^31 ~ 2^31 - 1。 -21 4748 3648 到 2^31-1=21 4748 3647。共10位，21亿。 int nextInt(int n) 生成一个随机的 int 值，该值介于 [0,n) long nextLong() 返回一个随机长整型数字 float nextFloat() 返回一个随机浮点型数字","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"集合 - Java","slug":"Devolop/Language/Java SE/Base and Grammer/集合","date":"2023-06-16T02:55:33.585Z","updated":"2023-03-20T15:10:42.733Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/集合.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E9%9B%86%E5%90%88.html","excerpt":"","text":"集合与数组数组：固定长度，可以存放基本数组类型、引用数据类型 集合：长度可变只可以存放引用数据类型，基本数据类型需要转换成包装类 ArrayList 是一个基本的集合 泛型限定集合中存储数据的类型 ArrayList&lt;E&gt; 创建： 12345// JDK7 之前的写法：// ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();// JDK7 以及之后：ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"StringJoiner","slug":"Devolop/Language/Java SE/Base and Grammer/字符串/StringJoiner","date":"2023-06-16T02:55:33.585Z","updated":"2023-03-18T03:02:59.698Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/字符串/StringJoiner.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E5%AD%97%E7%AC%A6%E4%B8%B2/StringJoiner.html","excerpt":"","text":"容器，类似StringBuilder，内容可变，区别是可以指定 间隔字符串、初始字符串、末尾字符串 JDK8出现，市场上较少用 Constructors12StringJoiner​(CharSequence delimiter) // 间隔符StringJoiner​(CharSequence delimiter, CharSequence prefix, CharSequence suffix) // 间隔符、起始符、末尾符 MethodStringJoiner add​(CharSequence newElement) 添加数据，返回对象本身 int length() 字符个数，间隔符号、开始结束符号也算 String toString() StringJoiner merge​(StringJoiner other) 如果the given StringJoiner without prefix and suffix不是空的，则其作为下一个元素添加 StringJoiner setEmptyValue​(CharSequence emptyValue) 当StringJoiner是空时返回的内容为emptyValue异常情况。当参数emptyValue为空时，该方法抛出NullPointerException。","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"},{"name":"字符串","slug":"Devolop/Language/Java-SE/Base-and-Grammer/字符串","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}],"tags":[]},{"title":"StringBuilder","slug":"Devolop/Language/Java SE/Base and Grammer/字符串/StringBuilder","date":"2023-06-16T02:55:33.585Z","updated":"2023-03-19T14:12:07.182Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/字符串/StringBuilder.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E5%AD%97%E7%AC%A6%E4%B8%B2/StringBuilder.html","excerpt":"","text":"容器，创建完之后里面的内容是可变的，可以提高字符串操作效率。String内容不可变，每次拼接会产新的字符串。 字符串拼接用StringBuilder，不要用String。如果是两个简单的相加的话，也可以用加号相加 Constructor1234StringBuilder() // 空白StringBuilder​(int capacity) // 空的，指定了容器的初始长度StringBuilder​(String str)StringBuilder​(CharSequence seq) // 字符序列，String实现了这个接口 methodStringBuilder append​(任意类型) 添加数据，返回对象本身 StringBuilder reverse() 反转容器中的内容 int length() 字符长度（字符出现个数） Implementing CharSequence:toString() 扩容原理默认容量：16，长度：0 默认扩容机制：扩充的容量&#x3D;老容量*2+2 如果添加的新长度超过了 默认扩充容量 ，则以 实际需要容量 为准，扩充到刚好需要的容量 源码默认创建一个长度为16的字节数组 添加内容长度小于16，直接存 添加内容大雨16会扩容（原来的容量*2+2） 如果扩容之后还不够，以实际长度为准 method2int capacity() 容量","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"},{"name":"字符串","slug":"Devolop/Language/Java-SE/Base-and-Grammer/字符串","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}],"tags":[]},{"title":"基本数据类型","slug":"Devolop/Language/Java SE/Base and Grammer/数据类型/基本的数据类型","date":"2023-06-16T02:55:33.585Z","updated":"2023-03-29T08:11:52.844Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/数据类型/基本的数据类型.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","excerpt":"","text":"数据类型 Data Type Default Value Default size 取值范围 byte 0 1 byte -128, 127 short 0 2 byte -32768, 32767 int 0 4 byte -2147483648, 2147483647 （10位数） long 0L 8 byte （19位数） float 0.0F 4 byte double 0.0 8 byte boolean false 1 bit char ‘\\u0000’ 2 byte 0.0 默认double类型 0 默认int类型 整型十进制 789 二进制 0b101 八进制 0567 十六进制 0xfff 大小写都可以（JDK7特性） 浮点数十进制小数：必须有小数点，如 12.34、-98.0。 科学记数法：如 1.75e5 ，其中 e 或 E 之前必须有数字，且 e 或 E 之后的数字必须为整数。 默认是 double 类型，常数后加 f 或 F 表示 float 类型 布尔型true false 字符型&#39;a&#39; &#39;b&#39; 单引号 字符串&quot;11&quot; &quot;d&quot; 双引号 常用的转义字符： 转义字符 说明 \\ddd 1~3 位八进制数所表示的字符 \\uxxxx 1~4 位十六进制数所表示的字符 \\&#39; 单引号字符 \\&quot; 双引号字符 \\\\ 双斜杠字符 \\r 回车 \\n 换行 \\b 退格 \\t 横向跳格","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"},{"name":"数据类型","slug":"Devolop/Language/Java-SE/Base-and-Grammer/数据类型","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"}],"tags":[]},{"title":"数据类型转换 - Java","slug":"Devolop/Language/Java SE/Base and Grammer/数据类型/类型转换","date":"2023-06-16T02:55:33.585Z","updated":"2023-10-11T01:05:04.629Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/数据类型/类型转换.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html","excerpt":"","text":"隐式转换（自动类型转换）数字运算、附值，范围小的先自动提升为大的，再进行运算。 int -&gt; long -&gt; float -&gt; doublebyte short char 这三种会先提升为 int ，再进行运算 char -&gt; int （特殊），值参考 asciichar 能自动转换成 int、long、float 和 double， char 与 byte &#x2F; short 两者之前不能自动相互转换 + 字符串拼接当字符串 true + &quot;&quot;; // &quot;true&quot; 显式转换（强制类型转换）(type)variableName 范围大的强制变为范围小的 浮点类型转换为int，直接去掉小数点后边的所有数字 int类型强制转换为浮点类型，在小数点后面补零。","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"},{"name":"数据类型","slug":"Devolop/Language/Java-SE/Base-and-Grammer/数据类型","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"}],"tags":[]},{"title":"数组 Array - Java","slug":"Devolop/Language/Java SE/Base and Grammer/Array 数组","date":"2023-06-16T02:55:33.570Z","updated":"2023-06-29T11:26:52.468Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/Array 数组.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/Array%20%E6%95%B0%E7%BB%84.html","excerpt":"","text":"声明数组123int[] name; // 首选int name[]; // 非首选 定义数组123int[] array1 = &#123;1,2,3,4,5&#125;; // 定义一int[] array2 = new int[10]; // 定义二int[] array3 = new int[]&#123;1,2,3,4,5&#125;; // 定义三 默认初始值 类型 默认值 Integer 整型 0 浮点型 0.0 boolean 布尔型 false char 字符 空格 \\u0000 Object 对象 null 属性长度：arr.length Idea 快速生成遍历数组arr.fori 二维数组1int[][] valueName = &#123;&#123;1,2&#125;,&#123;3,4&#125;&#125;; 声明和初始化和一维的数组是一样的。 另外还有不规则数组，本质上都是数组的嵌套 复制数组System.arraycopy() 1234567arraycopy​( Object src, //源数组 int srcPos, //数组要复制的起始位置 Object dest, //目标数组 int destPos, int length //要复制的长度 ) 排序sort(int[] a) 升序排序 ascending numerical order binarySearch(int[] a, int key) 二分法查找 数组转字符串1Arrays.toString(arr)","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"ArrayList - Java SE","slug":"Devolop/Language/Java SE/Base and Grammer/ArrayList","date":"2023-06-16T02:55:33.570Z","updated":"2022-10-16T16:39:58.157Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/ArrayList.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/ArrayList.html","excerpt":"","text":"boolean contains​(Object o) Returns true if this list 包含制定元素.","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"Java Bean","slug":"Devolop/Language/Java SE/Base and Grammer/Java Bean","date":"2023-06-16T02:55:33.570Z","updated":"2023-04-04T14:51:33.413Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/Java Bean.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/Java%20Bean.html","excerpt":"","text":"空参、全参构造器 private 成员 所有成员的 Get Set method","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"Java Scanner","slug":"Devolop/Language/Java SE/Base and Grammer/Java Scanner","date":"2023-06-16T02:55:33.570Z","updated":"2022-09-17T04:24:26.482Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/Java Scanner.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/Java%20Scanner.html","excerpt":"","text":"获取用户的输入 Scanner s = new Scanner(System.in); 方法 Methodnext() 跳过无效的空白字符，读取有效内容，以内容后的空白字符为结束符（有残留换行） nextInt() next类型() nextLine() 读取输入的所有字符，以\\n为结束符（无残留换行） 上两着连用易出现问题，nextLine可能会读到空内容。","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"Java 的各种运算符","slug":"Devolop/Language/Java SE/Base and Grammer/Java 的各种运算符","date":"2023-06-16T02:55:33.570Z","updated":"2022-09-16T14:19:24.228Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/Java 的各种运算符.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/Java%20%E7%9A%84%E5%90%84%E7%A7%8D%E8%BF%90%E7%AE%97%E7%AC%A6.html","excerpt":"","text":"算术运算+ - * / %取余 ++ -- 前缀自增自减法(++a,–a): 先进行自增或者自减运算，再进行表达式运算。 后缀自增自减法(a++,a–): 先进行表达式运算，再进行自增或者自减运算。 关系运算== != &lt; &gt; &lt;= &gt;= 位运算&amp; | ^异或 ~取反 &lt;&lt; &gt;&gt; &gt;&gt;&gt;右移补零 逻辑运算&amp;&amp; || ! 赋值运算= += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= ^= != 条件运算符 三元运算符b = (a == 1) ? 20 : 30; instanceof( Object reference variable ) instanceof (class/interface type) 左边的实例，是否属于右边的类、接口 运算符优先级 优先级 运算符 结合性 1 括号 . 从左向右 2 ++ -- ! ~ 从右向左 3 * / % 从左向右 4 + - 从左向右 5 &lt;&lt; &gt;&gt; &gt;&gt;&gt; 从左向右 6 &lt; &lt;= &gt; &gt;= instanceof 从左向右 7 == != 从左向右 8 &amp; 从左向右 9 ^ 从左向右 10 &#96; &#96; 11 &amp;&amp; 从左向右 12 &#96; 13 ?: 从右向左 14 赋值运算符 从右向左 15 逗号 从右到左","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"Java 继承、接口","slug":"Devolop/Language/Java SE/Base and Grammer/Java 继承、接口","date":"2023-06-16T02:55:33.570Z","updated":"2022-09-17T12:37:59.195Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/Java 继承、接口.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/Java%20%E7%BB%A7%E6%89%BF%E3%80%81%E6%8E%A5%E5%8F%A3.html","excerpt":"","text":"继承 extendsJava 的继承，不支持一个子类继承多个父类（多继承） 12345class 父类 &#123;&#125; class 子类 extends 父类 &#123;&#125; 接口 interface接口可以多继承 1234[可见度] interface 接口名称 [extends 其他的接口名] &#123; // 声明变量 // 抽象方法&#125; 接口的实现 implements...implements 接口名称[, 其他接口名称, 其他接口名称..., ...] ... 标记接口没有任何限制的接口，只是简单的标记了个名字，作为分类使用 123package java.util;public interface EventListener&#123;&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"char 字符 - Java","slug":"Devolop/Language/Java SE/Base and Grammer/char 字符","date":"2023-06-16T02:55:33.570Z","updated":"2023-01-17T07:22:36.026Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/char 字符.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/char%20%E5%AD%97%E7%AC%A6.html","excerpt":"","text":"&#39;A&#39; 到 &#39;Z&#39; 连续，&#39;a&#39; 到 &#39;z&#39; 连续 大写到小写之前有其他字符，不连续 字符可以使用 ++ -- 运算符","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"Java 控制流","slug":"Devolop/Language/Java SE/Base and Grammer/控制流","date":"2023-06-16T02:55:33.570Z","updated":"2023-07-03T17:59:08.796Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/控制流.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E6%8E%A7%E5%88%B6%E6%B5%81.html","excerpt":"","text":"if-else12345678910if(表达式1) &#123; 语句块1;&#125; else if(表达式2) &#123; 语句块2;...&#125; else if(表达式n) &#123; 语句块n;&#125; else &#123; 语句块n+1;&#125; switch123456789101112131415switch(表达式) &#123; case 值1: 语句块1; break; case 值2: 语句块2; break; … case 值n: 语句块n; break; default: 语句块n+1; break;&#125; switch JDK 12&#x2F;14 新特性java 12 新特性 switch表达式优化 - 知乎 Java 14 新的 switch 表达式_Regino的博客-CSDN博客 12345678910111213141516171819202122232425262728293031323334353637383940public class Demo02&#123; public static void main(String[] args)&#123; // 声明变量score，并为其赋值为&#x27;C&#x27; var score = &#x27;C&#x27;; // 执行switch分支语句 switch (score)&#123; case &#x27;A&#x27; -&gt; System.out.println(&quot;优秀&quot;); case &#x27;B&#x27; -&gt; System.out.println(&quot;良好&quot;); case &#x27;C&#x27; -&gt; System.out.println(&quot;中&quot;); case &#x27;D&#x27; -&gt; System.out.println(&quot;及格&quot;); case &#x27;E&#x27; -&gt; System.out.println(&quot;不及格&quot;); default -&gt; System.out.println(&quot;成绩数据非法！&quot;); &#125; &#125;&#125;​``````javapublic class Demo04&#123; public static void main(String[] args)&#123; // 声明变量score，并为其赋值为&#x27;C&#x27; var score = &#x27;B&#x27;; // 执行switch分支语句 String s = switch (score)&#123; case &#x27;A&#x27;, &#x27;B&#x27; -&gt; &quot;上等&quot;; case &#x27;C&#x27; -&gt; &quot;中等&quot;; case &#x27;D&#x27;, &#x27;E&#x27; -&gt; &quot;下等&quot;; default -&gt; &quot;成绩数据输入非法！&quot;; &#125;; System.out.println(s); &#125;&#125;​```## while和do while```javawhile(条件表达式) &#123; 语句块;&#125; 123do &#123; 语句块;&#125;while(条件表达式); foreach123for(类型 变量名:集合) &#123; 语句块;&#125; Java break 带标签12345678label: for (int i = 0; i &lt; 10; i++) &#123; for (int j = 0; j &lt; 8; j++) &#123; System.out.println(j); if (j % 2 != 0) &#123; break label; &#125; &#125;&#125; 123label: while(true) &#123; break label;&#125; System.exit(0)停止虚拟机运行","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"String - Java","slug":"Devolop/Language/Java SE/Base and Grammer/字符串/String","date":"2023-06-16T02:55:33.570Z","updated":"2023-03-19T12:48:11.633Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/字符串/String.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E5%AD%97%E7%AC%A6%E4%B8%B2/String.html","excerpt":"","text":"java.lang.String 创建字符串1234567891011121314String str = &quot;Hello!&quot;; // 字符串常量String(); // 空字符串String(&quot;Hello&quot;);String​(String str)String(char[] chs);String(byte[] chs);// 指定byte数组的编码格式：String​(byte[] bytes, String charsetName) // &quot;UTF-8&quot; &quot;US-ASCII&quot;String​(byte[] bytes, Charset charset) Java String 默认编码与运行环境有关 String​(byte[] bytes, int offset, int length) ，使用默认charset String​(byte[] bytes, int offset, int length, Charset charset) 同上，但使用指定的charset 字节数组转换成字符串对象 内存情况字符串常量池在JDK6.0及之前版本，字符串常量池存放在方法区中。自JDK7.0版本以后，字符串常量池被移到了堆Heap中了。至于为什么移到Heap内，大概是由于方法区的内存空间太小了。 但是字符串常量池是区别于Heap的 直接赋值String str = &quot;Hello!&quot;; 存放在字符串常量池，如果常量池里没有同样的字符串，则创建一个，如果有同样的字符串，则直接指向 123String str1 = &quot;abc&quot;;String str2 = &quot;abc&quot;;str1==str2; // true new 对象 创建存放在堆中，不会复用 12345678String str1 = new String(&quot;abc&quot;);String str2 = new String(&quot;abc&quot;);str1 == str2; // falsechar[] chs = &#123;&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;&#125;;String str3 = new String(&quot;abc&quot;); // 根据字符数组，在堆中创建新的字符串String str4 = new String(&quot;abc&quot;);str3 == str4; // false method比较字符串boolean equals​(Object anObject) 比较字符串内容，null为falseboolean equalsIgnoreCase​(String anotherString) 忽略英文大小写的比较 包含boolean contains​(CharSequence s) 判断一个字符串里面是否包含指定的内容 获取指定部分String substring​(int beginIndex, int endIndex) 左闭右开区间 获取指定部分 String substring​(int beginIndex) 获取到尾部 替换不改变原字符串，返回一个替换后的新字符串 String replace​(char oldChar, char newChar) 将字符串中的oldChar，替换成newCharString replace​(CharSequence target, CharSequence replacement) String实现了CharSequence接口 String replaceAll​(String regex, String replacement) String replaceFirst​(String regex, String replacement) 拼接字符串&quot;Hello &quot; + &quot;world&quot; string1.concat(&quot;Hello&quot;); String 拼接原理12String s1 = &quot;a&quot; + &quot;b&quot; + &quot;c&quot;; // 没有变量参与String s2 = s1 + &quot;d&quot;; // 有变量参与 当没有变量参与时 字符串在编译时就优化为最终结果，等同于赋值最终结果 当有变量参与时 JDK8前使用 StringBuilder 拼接，一个加号会创建两个对象（StringBuilder String）浪费性能 JDK8开始，默认拼接方案是，预估拼接的长度，创建一个长度合适的数组，填入字符串 结论：拼接字符串使用 StringBuilder 或 StringJoiner 效率较高，（减少中间商赚差价） 参数传递String 是特殊的引用类型，参数传递可看作像基本类型一样的复制（？实际上仍是地址传递？），因为String不可更改，所以不用担心原字符串是否会被更改。 String 与其他类型的相互转换数值Double.parseDouble(str) String 解析成数值 String.valueOf(val) 其他类型转换成 String （包括一些非数值） charString to charchar charAt​(int index) String中指定位置的char char[] toCharArray() char数组 char to String1234567891011121314151617181920211. String s = String.valueOf(&#x27;c&#x27;); //效率最高的方法2. String s = String.valueOf(new char[]&#123;&#x27;c&#x27;&#125;); //将一个char数组转换成String3. String s = Character.toString(&#x27;c&#x27;);// Character.toString(char)方法实际上直接返回String.valueOf(char)4. String s = new Character(&#x27;c&#x27;).toString();5. String s = &quot;&quot; + &#x27;c&#x27;;// 虽然这个方法很简单，但这是效率最低的方法// Java中的String Object的值实际上是不可变的，是一个final的变量。// 所以我们每次对String做出任何改变，都是初始化了一个全新的String Object并将原来的变量指向了这个新String。// 而Java对使用+运算符处理String相加进行了方法重载。// 字符串直接相加连接实际上调用了如下方法：// new StringBuilder().append(&quot;&quot;).append(&#x27;c&#x27;).toString();6. String s = new String(new char[]&#123;&#x27;c&#x27;&#125;);// 上6条来自：https://www.cnblogs.com/rrttp/p/7922202.html byte[]byte[] b = str.getBytes(); String 转换成 byte 数组 查找int indexOf​(int ch) 查找指定字符int indexOf​(int ch, int fromIndex) 从指定索引开始向后的范围内int indexOf​(String str) 字符串int indexOf​(String str, int fromIndex) int lastIndexOf​(int ch) 找到最后一次出现int lastIndexOf​(int ch, int fromIndex) 从指定索引开始向后的范围内int lastIndexOf​(String str)int lastIndexOf​(String str, int fromIndex) 截取截取子字符串： String substring​(int beginIndex) 包含beginIndexString substring​(int beginIndex, int endIndex) 不包含endIndex 左闭右开区间 其他 Methodint length() 字符数 boolean equals(Object obj) 比较字符串对象与当前对象是否相同 boolean startsWith​(String prefix) 是否以prefix开始boolean startsWith​(String prefix, int toffset)","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"},{"name":"字符串","slug":"Devolop/Language/Java-SE/Base-and-Grammer/字符串","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}],"tags":[]},{"title":"JDBC - Java","slug":"Devolop/Language/Java SE/JDBC","date":"2023-06-16T02:55:33.554Z","updated":"2022-10-18T10:27:35.820Z","comments":true,"path":"page/Devolop/Language/Java SE/JDBC.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/JDBC.html","excerpt":"","text":"Maven 依赖https://mvnrepository.com/artifact/mysql/mysql-connector-java 123456&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.30&lt;/version&gt;&lt;/dependency&gt; 注册驱动(MySQL 8.0 跳过)12// MySQL 8.0 以上版本static final String JDBC_DRIVER = &quot;com.mysql.cj.jdbc.Driver&quot;; 123456// MySQL 8.0 以下版本static final String JDBC_DRIVER = &quot;com.mysql.jdbc.Driver&quot;; Class.forName(JDBC_DRIVER); // 注册 JDBC 驱动 MySQL 8 以上可以不用注册 实测第一次运行还是得注册，最好加上 DriverManager类中有这样的注释： 123* &lt;P&gt;Applications no longer need to explicitly load JDBC drivers using &lt;code&gt;Class.forName()&lt;/code&gt;. Existing programs* which currently load JDBC drivers using &lt;code&gt;Class.forName()&lt;/code&gt; will continue to work without* modification. 所以不用注册也能使用 JDBC4.0版本后，不用再显式注册驱动 连接数据库12345static final String DB_URL = &quot;jdbc:mysql://localhost:3306/DATABASE_NAME?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&quot;;static final String DB_URL = &quot;jdbc:mysql://localhost:3306/DATABASE_NAME&quot;;// IP地址是本机 且端口是3306 可以省略书写： jdbc:mysql:///DATABASE_NAME useSSL=false 禁用安全链接 打开链接： 1234static final String USER = &quot;root&quot;;static final String PASS = &quot;123456&quot;;connection = DriverManager.getConnection(DB_URL,USER,PASS); 执行Statement stmt = connection.createStatement(); 获取执行sql的对象 int count = stmt.executeUpdate​(String sql) 返回受影响的行数 释放资源12statement.close();connection.close(); Connection获取执行对象：Statement createStatement() 获取普通执行SQL对象 PreparedStatement prepareStatement(sql) 预编译SQL的SQL执行对象，防止SQL注入 CallableStatement prepareCall(sql) 执行存储过程的对象（存储过程 并不常用） 事务管理：对MySQLD 一系列操作，完全执行和不执行，二选一 开启： setAutoCommit(boolean autoCommit) 参数：true 自动提交；false 手动提交，即开启事务 提交COMMIT: commit() 回滚ROLLBACK： rollback() Statement 执行语句int executeUpdate(sql); DML DDL 语句（增删改）。返回受影响的行数，DDL(Data Definition Language)语句执行成功也可能返回0 ResultSet executeQuery(sql); DQL 语句（查询） ResultSet封装DQL查询语句的结果 ResultSet 对象的可滚动性Statement createStatement() 默认不可滚动 Statement createStatement(int rsType, int rsConcurrenty) throws SQLException rsType参数，添加到ResultSet接口中指示其对象类型：TYPE_FORWARD_ONLY：（默认）创建不可滚动的结果集TYPE_SCROLL_INSENSITIVE：指定ResultSet游标能够在两个方向移动。在处理ResultSet期间对ResultSet底层数据的改变不会反映在ResultSet中，除非程序再次查询数据库TYPE_SCROLL_SENSITIVE：指定ResultSet游标能够在两个方向移动。在处理ResultSet期间对ResultSet底层数据的改变会立即反映在ResultSet中 rsConcurrenty参数，用于指定结果集是只读的还是可更新的：CONCUR_READ_ONLY （默认）指定不能更新ResultSet（即对ResultSet内容的更改不会通过ResultSet的更新方法反映在数据库中）CONCUR_UPDATABLE 指定能够更新ResultSet（即对ResultSet内容的更改会通过ResultSet的更新方法反映在数据库中） methodboolean next() 将光标从当前位置（默认在数据行的上一行）向下移动一行返回 是否为有效行 xxx getXxx(int num, String name) 获取数据，参数是 列的编号（从1开始）、列的名称 last() 可滚动状态下，指针到最后一行 beforeFirst() 指针回到开始位置","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"}],"tags":[]},{"title":"多线程 - Java","slug":"Devolop/Language/Java SE/多线程","date":"2023-06-16T02:55:33.554Z","updated":"2022-10-11T07:28:11.936Z","comments":true,"path":"page/Devolop/Language/Java SE/多线程.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/%E5%A4%9A%E7%BA%BF%E7%A8%8B.html","excerpt":"","text":"多线程 Thread 类 Runnable 接口 后台线程：执行之前设置 setDaemon(true) 生命周期 ....锁阻塞状态无限等待状态 线程插队 join() 线程让步 yield() 线程中断 synchronized锁住线程，保证线程安全，任何时刻只有一个线程访问这个资源 123synchronized(lock)&#123; 操作共享资源代码块&#125; 锁对象的创建不能在run()里，否则每个线程都是不同的锁 死锁问题两个线程互锁住对方的资源，都再等待对方","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"}],"tags":[]},{"title":"Maven - Java","slug":"Devolop/Main/Java/Maven","date":"2023-06-16T02:55:33.554Z","updated":"2023-06-24T11:09:04.745Z","comments":true,"path":"page/Devolop/Main/Java/Maven.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Java/Maven.html","excerpt":"","text":"Idea 全局配置 Maven在 Close Project 之后的初始界面 进入 Settings 配置，此时的配置就是全局配置 环境变量MAVEN_HOME Path %MAVEN_HOME%\\bin conf.xml 配置本地仓库： 1&lt;localRepository&gt;D:\\aa\\AppData\\maven&lt;/localRepository&gt; 阿里云镜像： 123456&lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; 依赖&lt;dependency&gt; 依赖配置123456789&lt;project&gt; &lt;dependencies&gt; &lt;dependency&gt; // ... &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 嵌套依赖&lt;dependency&gt; 可以引用另一个 模块&#x2F;项目 ，形成嵌套依赖 范围 scope123456&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;3.2.1.RELEASE&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; 各种取值: scope取值 有效范围（compile, runtime, test） 依赖传递 例子 compile all 是 spring-core provided compile, test 否 servlet-api runtime runtime, test 是 JDBC驱动 test test 否 JUnit system compile, test 是 Maven之scope详解 - satire - 博客园 重要的生命周期","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Java","slug":"Devolop/Main/Java","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/"}],"tags":[]},{"title":"Scanner - Java","slug":"Devolop/Language/Java SE/Base and Grammer/Scanner","date":"2023-06-16T02:55:33.554Z","updated":"2022-12-03T07:08:12.724Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/Scanner.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/Scanner.html","excerpt":"","text":"1new Scanner(System.in); MethodhasNext() 判断是否有输入 nextInt() 接收 int","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"","slug":"Devolop/Language/Java SE/Base and Grammer/枚举 Enum","date":"2023-06-16T02:55:33.554Z","updated":"2022-12-04T15:39:18.596Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/枚举 Enum.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E6%9E%9A%E4%B8%BE%20Enum.html","excerpt":"","text":"枚举 Enum - JavaJava 枚举是一个特殊的类 1234enum Color &#123; RED, GREEN, BLUE; &#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"泛型 - Java","slug":"Devolop/Language/Java SE/Base and Grammer/泛型","date":"2023-06-16T02:55:33.554Z","updated":"2022-09-29T14:10:22.058Z","comments":true,"path":"page/Devolop/Language/Java SE/Base and Grammer/泛型.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/Base%20and%20Grammer/%E6%B3%9B%E5%9E%8B.html","excerpt":"","text":"Java 泛型，提供一个通用的类型模板，以参数形式限制类型。消除了强制类型转换，减少出错。 JDK 5 加入的特性 泛型的使用12345678// 泛型类public class Test&lt;T&gt; &#123;&#125;// 泛型接口public interface Test &lt;T&gt; &#123;&#125;// 泛型方法public &lt;T&gt; void Test(T name) &#123;&#125; T 是一个泛型标记符，可以替换成任意字母A,B,C,D,… 泛型标记符E - Element (在集合中使用，因为集合中存放的是元素)T - Type（Java 类）K - Key（键）V - Value（值）N - Number（数值类型）? - 表示不确定的 java 类型（接收所有未知类型） 只支持引用类型12Object&lt;Integer&gt; //trueObject&lt;int&gt; //false 编译时会把泛型编译成Object类型，所以不能是基本类型，只能是引用类型 常用泛型Module java.basePackage java.utilInterface List&lt;E&gt;Interface Map&lt;K,​V&gt;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"}],"tags":[]},{"title":"测试 - Java","slug":"Devolop/Language/Java SE/测试维护/测试","date":"2023-06-16T02:55:33.554Z","updated":"2023-10-07T08:44:38.568Z","comments":true,"path":"page/Devolop/Language/Java SE/测试维护/测试.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Language/Java%20SE/%E6%B5%8B%E8%AF%95%E7%BB%B4%E6%8A%A4/%E6%B5%8B%E8%AF%95.html","excerpt":"","text":"控制台输出1234567891011121314System.out.println(&quot;out: &quot;+str);System.out.print(&quot;Hello&quot;);//System.out.printf(format, args);format为指定的输出格式，args参数 System.out.printf(&quot;%+8.3f\\n&quot;, 3.14); //&quot;+&quot;表示后面输出的数字会有正负号，正的+,负的- ;8.3f表示输出浮点数，宽度为8，小数点保持3位有效 System.out.printf(&quot;%+-8.3f\\n&quot;, 3.14);//&quot;-&quot;表示靠左对齐System.out.printf(&quot;%08.3f\\n&quot;, 3.14);//&quot;0&quot;8位宽度中自动补0System.out.printf(&quot;%(8.3f\\n&quot;, -3.14);//&quot;(&quot;如果是负数，自动加上( )System.out.printf(&quot;%,f\\n&quot;, 123456.78); //&quot;,&quot;金钱表示方法，每三位有一个逗号System.out.printf(&quot;%x\\n&quot;, 0x2a3b); //输出16进制数System.out.printf(&quot;%#x\\n&quot;, 0x2a3b);//输出带0x标识的16进制数System.out.printf(&quot;老板：您名字%s,年龄：%3d岁,工资：%,-7.2f\\n&quot;,&quot;ajioy&quot;,21,36000.00);System.out.printf(&quot;老板：您名字%1$s,年龄：%2$#x岁\\n&quot;,&quot;ajioy&quot;,38); //&quot;n&#123;1&#125;quot;表示用第n个参数 JUnit@Test 注解 单元测试方法 方法不能有参数","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"测试维护","slug":"Devolop/Language/Java-SE/测试维护","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/%E6%B5%8B%E8%AF%95%E7%BB%B4%E6%8A%A4/"}],"tags":[]},{"title":"Git","slug":"Devolop/Main/Git/环境配置","date":"2023-06-16T02:55:33.539Z","updated":"2022-12-12T11:59:59.228Z","comments":true,"path":"page/Devolop/Main/Git/环境配置.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Git/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html","excerpt":"","text":"初始配置用户名和密码 设置用户名和密码 git config --global user.name &quot;rchangl&quot; git config --global user.email rchangl@outlook.com –注意邮箱没有双引号 查看用户名和密码 git config user.name git config user.email 配置别名 用户目录创建.bashrc文件 1touch ~/.bashrc .bashrc 文件输入配置别名内容 12345# 用于输出git提交日志alias git-log=&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;# 用于输出当前目录所有文件及基本信息alias ll=&#x27;1s -al&#x27; GitBash 执行 1source ~/.bashrc","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Git","slug":"Devolop/Main/Git","permalink":"https://rchangl.github.io/categories/Devolop/Main/Git/"}],"tags":[]},{"title":"","slug":"Devolop/Main/Git/基础命令","date":"2023-06-16T02:55:33.539Z","updated":"2023-05-05T13:36:40.554Z","comments":true,"path":"page/Devolop/Main/Git/基础命令.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Git/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4.html","excerpt":"","text":"四个工作区域 Workspace: 工作区，就是你平时存放项目代码的地方 Index &#x2F; Stage: 暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息 Repository: 仓库区（或版本库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本 Remote: 远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换 【Git】(1)—工作区、暂存区、版本库、远程仓库 - 博客园 常用命令 git add . 当前目录所有文件提到 Stage git commit -m 提交到 Repository git commit -m &#39;该次提交说明&#39; git push 上传到 Remote 基础使用Git 全局设置: 12git config --global user.name &quot;RChangl&quot;git config --global user.email &quot;8109793+rchangl@user.noreply.gitee.com&quot; 创建 git 仓库: 12345678mkdir vue3-stroecd vue3-stroegit init touch README.mdgit add README.mdgit commit -m &quot;first commit&quot;git remote add origin https://gitee.com/rchangl/vue3-stroe.gitgit push -u origin &quot;master&quot; 已有仓库? 123cd existing_git_repogit remote add origin https://gitee.com/rchangl/vue3-stroe.gitgit push -u origin &quot;master&quot;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Git","slug":"Devolop/Main/Git","permalink":"https://rchangl.github.io/categories/Devolop/Main/Git/"}],"tags":[]},{"title":"idea","slug":"Devolop/Main/Java/Idea","date":"2023-06-16T02:55:33.539Z","updated":"2023-04-04T13:05:40.232Z","comments":true,"path":"page/Devolop/Main/Java/Idea.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Java/Idea.html","excerpt":"","text":"Ctrl + p 提示函数参数信息","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Java","slug":"Devolop/Main/Java","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/"}],"tags":[]},{"title":"gradle","slug":"Devolop/Main/Java/gradle","date":"2023-06-16T02:55:33.539Z","updated":"2023-02-28T15:33:22.534Z","comments":true,"path":"page/Devolop/Main/Java/gradle.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Main/Java/gradle.html","excerpt":"","text":"配置下载地址https://mirrors.cloud.tencent.com/gradle/ 工程项目替换wrapper文件夹，编辑gradle-wrapper文件 使用https://mirrors.cloud.tencent.com/gradle/gradle-4.6-all.zip来代替原来的链接","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Java","slug":"Devolop/Main/Java","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/"}],"tags":[]},{"title":"CSS 长度单位","slug":"Devolop/Secondary/CSS/长度单位","date":"2023-06-16T02:55:33.539Z","updated":"2023-04-28T05:35:02.546Z","comments":true,"path":"page/Devolop/Secondary/CSS/长度单位.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/CSS/%E9%95%BF%E5%BA%A6%E5%8D%95%E4%BD%8D.html","excerpt":"","text":"相对长度em 相对于元素的字体大小（font-size）（2em 表示当前字体大小的 2 倍）rem 相对于根元素的字体大小（font-size） vw 相对于 Viewport 宽度的 1%vh 相对于 Viewport 高度的 1% vmin 相对于 Viewport 较小尺寸的 1％vmax 相对于 Viewport 较大尺寸的 1％ % 相对于父元素 ex 相对于当前字体的 x-height(极少使用)ch 相对于 “0”（零）的宽度 绝对长度不建议使用 px 像素 (1px &#x3D; 1&#x2F;96th of 1in)pt 点 (1pt &#x3D; 1&#x2F;72 of 1in)pc 派卡 (1pc &#x3D; 12 pt) cm 厘米mm 毫米in 英寸 (1in &#x3D; 96px &#x3D; 2.54cm) 对于低 dpi 的设备，1px 是显示器的一个设备像素（点）。对于打印机和高分辨率屏幕，1px 表示多个设备像素。","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"CSS","slug":"Devolop/Secondary/CSS","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/CSS/"}],"tags":[]},{"title":"Drawable","slug":"Devolop/Secondary/Android/Drawable","date":"2023-06-16T02:55:33.523Z","updated":"2023-06-09T01:40:52.819Z","comments":true,"path":"page/Devolop/Secondary/Android/Drawable.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Android/Drawable.html","excerpt":"","text":"","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Android","slug":"Devolop/Secondary/Android","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Android/"}],"tags":[]},{"title":"View","slug":"Devolop/Secondary/Android/View","date":"2023-06-16T02:55:33.523Z","updated":"2023-06-09T01:08:42.238Z","comments":true,"path":"page/Devolop/Secondary/Android/View.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Android/View.html","excerpt":"","text":"onMeasure view 大小，默认和父控件一样大 layout onDraw 开始对视图进行绘制","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Android","slug":"Devolop/Secondary/Android","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Android/"}],"tags":[]},{"title":"环境配置和创建项目","slug":"Devolop/Secondary/Android/环境配置和创建项目","date":"2023-06-16T02:55:33.523Z","updated":"2023-06-21T01:28:34.031Z","comments":true,"path":"page/Devolop/Secondary/Android/环境配置和创建项目.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Android/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.html","excerpt":"","text":"SDK 环境变量%ANDROID_SDK_HOME%\\platform-tools%ANDROID_SDK_HOME%\\tools Android Studio 配置代理： Settings -&gt; … -&gt; Proxy https://mirrors.aliyun.com/android.googlesource.com/ 阿里云 数据库内置 SQLite ，不用连接直接用 目录结构 app 模块，一个应用就是一个模块 AndroidMinifest.xml 清单文件，配置信息 res/ layout/xxx.xml xml 布局文件 values/string. 字符串常量 build.gradle Gradle 自动化构建工具","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Android","slug":"Devolop/Secondary/Android","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Android/"}],"tags":[]},{"title":"Manifest","slug":"Devolop/Secondary/Android/Manifest","date":"2023-06-16T02:55:33.523Z","updated":"2023-06-05T02:32:48.582Z","comments":true,"path":"page/Devolop/Secondary/Android/Manifest.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Android/Manifest.html","excerpt":"","text":"manifest -&gt; application1234567&lt;applicationandroid:icon=&quot;@mipmap/ic_launcher&quot; 应用图标android:label=&quot;@string/app_name&quot; 应用名称android:roundIcon=&quot;@mipmap/ic_launcher_round&quot; 圆角图标android:supportsRtl=&quot;true&quot; 是否支持 阿拉伯语/波斯语 这种从右往左的语言android:theme=&quot;@style/Theme.IKPiano&quot; 指定 App 的显示风格、颜色风格/&gt; manifest -&gt; application -&gt; activity1","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Android","slug":"Devolop/Secondary/Android","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Android/"}],"tags":[]},{"title":"CSS flex","slug":"Devolop/Secondary/CSS/flex","date":"2023-06-16T02:55:33.523Z","updated":"2023-04-28T16:15:46.704Z","comments":true,"path":"page/Devolop/Secondary/CSS/flex.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/CSS/flex.html","excerpt":"","text":"flex 垂直居中1234.父元素&#123; display：flex align-items：center&#125; justify-content123&#123;justify-content: space-between; /* 均匀排列每个元素 首个元素放置于起点，末尾元素放置于终点 */&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"CSS","slug":"Devolop/Secondary/CSS","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/CSS/"}],"tags":[]},{"title":"伪元素（双冒号） - CSS","slug":"Devolop/Secondary/CSS/伪元素（双冒号）","date":"2023-06-16T02:55:33.523Z","updated":"2023-04-02T14:30:45.587Z","comments":true,"path":"page/Devolop/Secondary/CSS/伪元素（双冒号）.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/CSS/%E4%BC%AA%E5%85%83%E7%B4%A0%EF%BC%88%E5%8F%8C%E5%86%92%E5%8F%B7%EF%BC%89.html","excerpt":"","text":"css两个冒号（::）表示伪元素，例如“::selection”。伪元素所控制的内容和一个元素控制的内容一样，但是伪元素不存在于文档树中，不是真正的元素，所以叫伪元素。 CSS 滚动条选择器仅在基于 Blink 或 WebKit 的浏览器 你可以使用以下伪元素选择器去修改基于 webkit 的浏览器的滚动条样式： ::-webkit-scrollbar——整个滚动条。 ::-webkit-scrollbar-button——滚动条上的按钮（上下箭头）。 ::-webkit-scrollbar-thumb——滚动条上的滚动滑块。 ::-webkit-scrollbar-track——滚动条轨道。 ::-webkit-scrollbar-track-piece——滚动条没有滑块的轨道部分。 ::-webkit-scrollbar-corner——当同时有垂直滚动条和水平滚动条时交汇的部分。通常是浏览器窗口的右下角。 ::-webkit-resizer——出现在某些元素底角的可拖动调整大小的滑块。","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"CSS","slug":"Devolop/Secondary/CSS","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/CSS/"}],"tags":[]},{"title":"清除浮动 - CSS","slug":"Devolop/Secondary/CSS/浮动清除","date":"2023-06-16T02:55:33.523Z","updated":"2023-02-24T15:33:31.037Z","comments":true,"path":"page/Devolop/Secondary/CSS/浮动清除.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/CSS/%E6%B5%AE%E5%8A%A8%E6%B8%85%E9%99%A4.html","excerpt":"","text":"可以添加一个不占用空间的after伪元素，将其clear属性设置为both： 12345.father::after &#123; content: &#x27;&#x27;; display: block; clear: both;&#125;","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"CSS","slug":"Devolop/Secondary/CSS","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/CSS/"}],"tags":[]},{"title":"相对定位去除所占空间 - CSS","slug":"Devolop/Secondary/CSS/相对定位去除所占空间","date":"2023-06-16T02:55:33.523Z","updated":"2023-02-25T13:37:52.252Z","comments":true,"path":"page/Devolop/Secondary/CSS/相对定位去除所占空间.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/CSS/%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%8E%BB%E9%99%A4%E6%89%80%E5%8D%A0%E7%A9%BA%E9%97%B4.html","excerpt":"","text":"将margin设成负值，让后边的元素覆盖空白","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"CSS","slug":"Devolop/Secondary/CSS","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/CSS/"}],"tags":[]},{"title":"小客体a","slug":"Phyloshophy/小客体a","date":"2023-06-16T02:55:33.507Z","updated":"2023-03-14T02:39:51.783Z","comments":true,"path":"page/Phyloshophy/小客体a.html","link":"","permalink":"https://rchangl.github.io/page/Phyloshophy/%E5%B0%8F%E5%AE%A2%E4%BD%93a.html","excerpt":"","text":"客体小a ：欲望的“对象成因” 欲望看似要满足目的，其实是要满足小a 小a&#x3D;surplus 它是一种剩余，或者说是一个缺陷，让你觉得，只要把这个缺陷去掉，就完美了。但这个完美，只是一种拟制。或者说，这个完美，必须通过这个缺陷的缝隙，才能窥视。这种张力，会产生审美。 拉康幻想公式 $◇a $（笛卡尔式的主体）◇a(小他者&#x2F;组我镜像&#x2F;笛卡尔的我在) 所以拉康用这个幻想公式，实际上是要定义的是： 主体的自我认同必须是通过一个异质性的他者 而且这个他者其实是这个主体缝合之前的他自己 也就是说在意识形态缝合，或者在符号学缝合之前 所有的主体都需要进入符号学秩序 在进入符号学秩序被阉割的那一瞬间，他就丢失了他的存在的根基 它丢失那一块就是这个小客体 小a它是变成了一个world 观念论里面的主体subject 就是一个作为虚无的阿基米德点，其实并不是纯无，他有一个剩余、他总有一个剩余，康德那边的这个阿基米德点叫做先验统觉 如果有一种人就是以违背社会伦理秩序本身作为一种普遍性 那这个就是康德所谓的伦理学所没有办法 或者他的理性那个框架所没有办法去统摄的一种内在的邪恶 这种邪恶是一种纯粹的邪恶 康德是站在普遍性这边 他认为符合普遍性 什么普遍性？ 就是通过先验演绎 你就可以演绎某一项行为 比如说偷窃这个行为能不能普遍化？不行 如果所有人都偷窃的话，那么财产权这个东西就不存在了 偷窃是以财产权或者私有制为前提 那你偷窃概念自己就把自己给毁掉了 所以不能偷窃 他就是从这个意义上来讲 但是问题是康德就忽视了一点，就是所有权这个东西能不能普遍化 他没有想，对不对，没有想 所以如果你是一个反对所有权的人 以此为目的来进行偷窃的话 那么在以此为目的来进行剥夺、来反对…… 既反对的这个普遍性 实际上也在反对其他人对自己私利的一个维护、特殊情况 “劫富济贫” 黑格尔维度上：这个结构就会导致癔症Hysteria 这是种崇高化的癔症 就是强行把大他者变成一个小他者 （特别是男性作家，喜欢的宏大叙事） 醒时的意识状态中睡的意识状态并没有消失而是作为背景存在 无意识把自己内在的他运行起来出bug 的那些bug 甩出来变成意识 然后让这些bug 单独去解决问题、自己单独去解决 就是给你一定的自由去解决bug、去debug 所以这个意识，你可以把它理解是这个无意识的debuger 潜意识VS意识 所以他一定说，为了解决这些不一致性 所以他要把这些东西涌现出来、涌现到一个平台里面 我们所谓的意识就是，无意识在不停的报错 报错出来的那些错误表，就是我们的意识 就是潜意识就是无意识能够正常跑的那一部分的 他能够正常跑了，没事，跑了没事 快要出问题的时候再划出来，就是我们的意识 实际上就是这道闸门（连同无意识与意识）的孔的形状就是这个小客体 形状大小限制了，什么能在你的意识中呈现，而什么东西只能存在于潜意识中 它是个双向通道 你意识察觉到 debug 结束了那些make sense 的东西 它会回到无意识的 你能感受到的事件，都是经过无意识加工过后，让你食用的成品。是被打包结构起来的。调用你的记忆，判断，感受，价值观，等等，最终打包成一个事件，让你感受到。 意思是你连处理的机会都没有，你只能被动的接受无意识处理之后的信息 一个人处理完潜意识的命令后，就会获得某种奖励机制，比如快感，然后又可以进行系统托管，让身体被潜意识接管。（如傻乐刷B站 抖音 时间快速流过） 小客体a就是刚刚能填满这个审查闸门的形状，人这时候认为，得到小客体a就会达到某种完满。 然后你就通过这个小客体的轮廓 就能感的感受到整个世界束缚你的那种内在力量的形状 这里可以参考，顺从主义（1-4-4-1）如下 形式就是符号系统 它会非常公开的会告诉大家 符号系统就背景性的那个符号性秩序 它会非常公开的告诉大家 在这个形式框架里面 这个位子本身它肯定是僵死的 或者是非常完美的 但是并入这个位置的东西或多或少会有一些不完美 就这种差异是永远存在的 它一定要拉开这个差异 也就是要拉开组成这个整体的那些部分 和那个整体为这些部分所设定的那些位置之间总要有差异 （其实就是偶尔让你骂两句体制，然后你就服从了，类似俄罗斯在野党，就是为了反对才保留你，如果一个世界，是完善的，完美的，那么他也将是停止的，因为运动就会产生不完美，一个小说中，当坏人全部死亡，主角唯一的目的就是呆坐，那是很无聊的，因为他连行善积德都不可能做到，因为世界都已经是全善的了，没有匮乏，也就没了行善的理由。） 如果没有差异的话 那这个整体如果说 就是你走我可以换另外 你走我可以换另外一个形状的 他就是说他要作为一个整体 要作为一个包含特殊性的包含一些局部小东西的 作为一个大东西的框架装里面这些东西 就是要求你不能严丝合缝的 不能够完满的符合于这个东西 如果你完美符合于这个东西在某种意义上讲你恰恰反而是非常完美的是适应于这个框架的话 你反而就会让大家能够意识注意到原来这个框架不存在 原来存在的只是这些个体的人 原来存在只是这一个这个基准点 （类似机器警察，他完美的符合暴力机器的要求，但是人们会立刻意识到，他是一个异质化的他者，所以“框架”实际上就是它就会把具体的东西把这个东西本身而不是把这个东西所占的那个位置看成是一个基准点） （原来规则没用，我们需要的是青天大老爷，是海瑞，是包拯，完美符合秩序，便可以控制秩序，成了青天大老爷的行业标准。但会被制造秩序的人妒忌，除非制造秩序的人，是最完美的符合这套秩序的，相当于“框架”被他“撑大”了） 出色的一个人事 他就是在那个位置上他非常好的作为一个人事在那边协调各种关系 然后让领导什么各方面都满意 它好到一定程度了之后 其实他对于这个管理结构是有问题的 再怎么把它换掉、再换其他的人再怎么样都不如意 这个结构本身就被这个完美人事经理，定义了知道吗 整个系统就没有办法运行起来了 所以这个系统它在一开始就一定要设定我的这个位置和我坐这个位置的人一定要有差异 一定要有那么点不足 或者有点在过头 你做得太过了 （你能力强，也可以是性格弱，领导可以从这个方向把握，如张飞与关羽。） 或者有那么点差异 这样我才能够使得大家能够相信有这么一个位置存在 （而不是，都是人做事的结果，位置是虚拟的。如果真的有完美HR人事，那么他向上，将会质疑老板的能力，因为他的完美让老板无法指出错误，如包拯的龙头铡。那么老板这个位置，其合法性，就出现了危机。让大家明白，原来位子在下的人，专业能力是比领导强的，而领导说的话，并不能在所有场域内，都是正确的。这样的人，老板不喜欢。层级结构，不能被出现的天才破坏，就像太聪明的孩子，会被送到少年班里，而不是正常升学，让他们质疑老师的权威，老师的权威，就没有正当性了，因为普通教师在某些专业学科，远不如这些少年天才。） 因为背景性的这个符号 符号秩序它永远是一个幻象 它永远是象征性的 它是想象出来 它实实在在的不存在这个东西对不对 它是大家换你想说的他怎么幻想呢 就必须通过某种方式语言的方式 大家说 必须通过大家的这个言辞 大家的语言和大家的这个思考说 哎他太那个了 或者说他有点还不够 她必须不停地要这样不停地要再生产这种差异 不停地要再生产这种差异 这个差异是使得大家愿意进入这个框架的一个前提 是使得这个框架能够让大家汇集起来这个前提 （像李世民这种，能力远超过“世子”这个框架，只能突破框架，砸碎框架，不然只能被这一套系统碾压。只能向上一步，但是向上这一步，已经是突破原有框架了，他只能想办法做一个新框架。他通过客体小a窥视的，只有皇位了。） 就是这个最小差异它是构成性的 它是很重要的 它对于大家愿意到符号系统里面去找个位置 并且通过这些位置想象出来的这些不同的位置来定义你自己是至关重要的 （无差异，则无法显示规则必要性） 以上是顺从主义（1-4-4-1）的内容 拉康意义上： 它就是等于a&#x3D;redoubled barred A 小客体就是一个大他者 就大他者上面的一个裂缝 大他者上裂缝的一个加倍 大他者不一致性的加倍 如果把他直接把他的不一致性 认同为是我的不一致性，那就会是癔症 如果把我内在的不一致性强行认同为是大他者的不一致性，这个东西就是psychic 这个东西就是癔症的反面psychic 就觉得整个世界绕着自己转的","categories":[{"name":"Phyloshophy","slug":"Phyloshophy","permalink":"https://rchangl.github.io/categories/Phyloshophy/"}],"tags":[]},{"title":"拉康论爱-视频总结","slug":"Phyloshophy/拉康论爱-视频总结","date":"2023-06-16T02:55:33.507Z","updated":"2022-11-28T14:09:37.477Z","comments":true,"path":"page/Phyloshophy/拉康论爱-视频总结.html","link":"","permalink":"https://rchangl.github.io/page/Phyloshophy/%E6%8B%89%E5%BA%B7%E8%AE%BA%E7%88%B1-%E8%A7%86%E9%A2%91%E6%80%BB%E7%BB%93.html","excerpt":"","text":"拉康论爱 视频合集 是彻底的诋毁和埋葬爱情，还是赞美它？是赞美爱情带来的无可比拟的欢欣，还是谴责爱情带来的强烈痛苦和绝望？是颂扬它的赋予生命的美德，还是揭露它的残忍和虚幻？","categories":[{"name":"Phyloshophy","slug":"Phyloshophy","permalink":"https://rchangl.github.io/categories/Phyloshophy/"}],"tags":[]},{"title":"Debug相关","slug":"Devolop/Secondary/Android/Debug相关","date":"2023-06-16T02:55:33.507Z","updated":"2023-06-05T01:45:43.590Z","comments":true,"path":"page/Devolop/Secondary/Android/Debug相关.html","link":"","permalink":"https://rchangl.github.io/page/Devolop/Secondary/Android/Debug%E7%9B%B8%E5%85%B3.html","excerpt":"","text":"日志 Log1Log.d(&quot;标签&quot;, &quot;内容&quot;); Log.e 错误信息Log.w 警告信息Log.i 一般信息Log.d 调试信息，可以在运行时打印程序的值Log.v 冗余信息","categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Android","slug":"Devolop/Secondary/Android","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Android/"}],"tags":[]},{"title":"补营养","slug":"Game/补营养","date":"2023-06-16T02:55:33.492Z","updated":"2023-03-29T13:45:11.306Z","comments":true,"path":"page/Game/补营养.html","link":"","permalink":"https://rchangl.github.io/page/Game/%E8%A1%A5%E8%90%A5%E5%85%BB.html","excerpt":"","text":"钙吸收需要维生素D 维生素D人体晒太阳后，皮肤可以合成 饮食中也含有丰富的维生素D，可以在日常的饮食中进行摄取，比较常见的是瘦肉、奶制品以及新鲜的水果和蔬菜，含有维生素D非常丰富的是海产品，比如深海鱼类、鸡蛋、肝脏等食物，都可以补充维生素D。","categories":[{"name":"Game","slug":"Game","permalink":"https://rchangl.github.io/categories/Game/"}],"tags":[]},{"title":"饥荒","slug":"Game/饥荒","date":"2023-06-16T02:55:33.492Z","updated":"2023-02-13T08:32:55.548Z","comments":true,"path":"page/Game/饥荒.html","link":"","permalink":"https://rchangl.github.io/page/Game/%E9%A5%A5%E8%8D%92.html","excerpt":"","text":"控制台代码https://www.bilibili.com/read/cv1087866 在背包里放入：c_give(&quot;物品代码“，数量) 召唤生物：c_spawn(“召唤物代码”，数量) 物品代码材料割下的草：cutgrass 树枝：twigs 木头：log 木炭：charcoal 灰：ash 采集的芦苇：cutreeds 花瓣：petals 噩梦花瓣：petals_evil 活木头：livinglog 叶子：foliage 荧光果：lightbulb 发光浆果：wormlight 冰：ice 燧石：flint 硝石：nitre 岩石：rocks 大理石：marble 月之石：moonrocknugget 黄金：goldnugget 铥矿石：thulecite 铥矿石碎片：thulecite_pieces 红宝石：redgem 蓝宝石：bluegem 紫宝石：purplegem 绿宝石：greengem 橙宝石：orangegem 黄宝石：yellowgem 彩色宝石：opalpreciousgem 绳子：rope 木板：boards 石砖：cutstone 莎草纸：papyrus 噩梦燃料：nightmarefuel 蜂蜡：beeswax 蜡纸：waxpaper 电器元件：transistor 狗牙：houndstooth 蜘蛛丝：silk 蜘蛛腺体：spidergland 胡子：beardhair 牛毛：beefalowool 牛角：horn 便便：poop 蜂巢：honeycomb 蜂刺：stinger 猪皮：pigskin 兔人尾巴：manrabbit_tail 猫尾：coontail 海象牙：walrus_tusk 胡须：beardhair 烂鸡蛋：rottenegg 乌鸦羽毛：feather_crow 红雀羽毛：feather_robin 雪雀羽毛：feather_robin_winter 金丝雀羽毛：feather_canary 鸟粪：guano 触手皮：tentaclespots 粘滑含糊虫(黏糊虫粘液)：slurtleslime 破碎的背壳：slurtle_shellpieces 蚊子血袋：mosquitosack 缀食者皮：slurper_pelt 远古守护者角：minotaurhorn 掉落的羽毛：goose_feather 鳞片：dragon_scales 厚皮毛：bearger_fur 巨鹿眼球：deerclops_eyeball 毒蕈皮：shroom_skin 闪电羊角：lightninggoathorn 格罗姆翅膀：glommerwings 格罗姆花(花瞬间死亡)：glommerflower 格罗姆燃料：glommerfuel 冷冻虫卵：lavae_cocoon 暗影之心：shadowheart 鹿茸：deer_antler 克劳斯钥匙：klaussackkey 齿轮：gears 骨片：boneshard 化石碎片：fossil_piece 药物救赎之心：reviver 治疗药膏：healingsalve 蜜蜂药膏：bandage AGV试验药(强心针)：lifeinjector 果冻豆（女王蜂掉落材料制作，可以慢慢回血）：jellybean 食物胡萝卜：carrot 烤胡萝卜:carrot_cooked 玉米：corn 爆米花：corn_cooked 南瓜：pumpkin 热南瓜：pumpkin_cooked 茄子：eggplant 烤茄子：eggplant_cooked 红蘑菇：red_cap 烤红蘑菇：red_cap_cooked 绿蘑菇：green_cap 烤绿蘑菇：green_cap_cooked 蓝蘑菇：blue_cap 烤蓝蘑菇：blue_cap_cooked 石榴：pomegranate 烤石榴：pomegranate_cooked 榴莲：durian 烤榴莲：durian_cooked 火龙果：dragonfruit 精致火龙果(烤)：dragonfruit_cooked 浆果：berries 烤浆果：berries_cooked 西瓜：watermelon 烤熟的西瓜：watermelon_cooked 仙人掌肉：cactus_meat 仙人掌花：cactus_flower 采集的苔藓：cutlichen 肉：meat 大熟肉：meat_cooked 大肉干：meat_dried 小肉块：smallmeat 熟肉块：cookedsmallmeat 鸡腿：drumstick 烤鸡腿：drumstick_cooked 青蛙腿：froglegs 熟蛙腿：froglegs_cooked 怪物肉：monstermeat 烤怪物肉：cookedmonstermeat 怪物肉干：monstermeat_dried 多叶的肉：plantmeat 煮熟的多叶肉：plantmeat_cooked 鸡蛋：bird_egg 熟鸡蛋：bird_egg_cooked 油煎高脚鸟蛋：tallbirdegg_cooked 鱼：fish 熟鱼：fish_cooked 鳗鱼：eel 煮熟的鳗鱼：eel_cooked 烤坚果：acorn_cooked 蝴蝶翅膀：butterflywings 黄油：butter 蜂蜜：honey 蜂王浆：royal_jelly 曼德拉草：mandrake 烤熟的曼德拉草：cookedmandrake 蝙蝠翅膀：batwing 熟蝙蝠翅膀：batwing_cooked 夏象鼻：trunk_summer 冬象鼻：trunk_winter 熟象鼻：trunk_cooked 肉串：kabobs 肉丸：meatballs 蜜汁火腿：honeyham 肉汤：bonestew 火鸡正餐：turkeydinner 青蛙圆面包三明治：frogglebunwich 玉米饼包炸鱼：fishtacos 鱼肉条：fishsticks 火龙果派：dragonpie 太妃糖：taffy 南瓜饼：pumpkincookie 奶油松饼：butterflymuffin 芝士蛋糕：powcake 曼德拉草汤：mandrakesoup 鸡蛋火腿：baconeggs 甜蜜金砖：honeynuggets 半圆小酥饼：perogies 蹩脚的炖菜：ratatouille 水果拼盘：fruitmedley 花沙拉：flowersalad 华夫饼：waffles 果酱蜜饯：jammypreserves 香酥茄盒：stuffedeggplant 冰淇淋：icecream 西瓜冰：watermelonicle 水果杂烩：trailmix 辣椒酱：hotchili 鳄梨酱：guacamole 电羊奶：goatmilk 怪物千层饼：monsterlasagna 鳗鱼料理：unagi 湿腻焦糊：wetgoop 腐烂的食物：spoiled_food 圣诞食品(4种形状)：winter_food1&#x2F;2&#x2F;3&#x2F;4 万圣节糖果(11种类型)：halloweencandy_1&#x2F;….&#x2F;11 玩具trinket_1~5(融化的大理石、假卡祖笛、歌德结、地精玩偶) trinket_6~10(小型火箭飞船、破烂电线、球与奖杯、硬化橡胶塞、不匹配的纽扣、二手假牙) trinket_11~14(半躺机器人、干瘪触手、地精、漏水的茶杯) trinket_17~24(弯曲的叉勺、玩具木马、陀螺、挠痒器、敲打锤、不耐磨的毛线、蹄脚、幸运猫罐) trinket_25~27(空气“清新”剂、土豆杯、钢丝绳) 迷你主教象棋(白&#x2F;黑(白色被翻译做白葡萄酒))：trinket_15&#x2F;16 迷你战车象棋(白&#x2F;黑)：trinket_28&#x2F;29 迷你骑士象棋(白&#x2F;黑)：trinket_30&#x2F;31 trinket_32~37(方晶锆球、蜘蛛指环、猴爪、容量瓶、假牙、断桩) 装饰木质地板：turf_woodfloor 方格地板：turf_checkerfloor 地毯地板：turf_carpetfloor 龙鳞地板： 盆栽：pottedfern 茶几：endtable 友善的稻草人：scarecrow(感觉除了召唤金丝雀也没什么用就变成装饰吧) 烟斗(白&#x2F;黑)：chesspiece_pipe_marble&#x2F;stone 禁卫(白&#x2F;黑)：chesspiece_pawn_marble&#x2F;stone 龙角烩(白&#x2F;黑)：chesspiece_hornucopia_marble&#x2F;stone 皇后(白&#x2F;黑)：chesspiece_muse_marble&#x2F;stone 国王(白&#x2F;黑)：chesspiece_formal_marble&#x2F;stone 骑士(白&#x2F;黑)：chesspiece_knight_marble&#x2F;stone 主教(白&#x2F;黑)：chesspiece_bishop_marble&#x2F;stone 战车(白&#x2F;黑)：chesspiece_rook_marble&#x2F;stone 鬣犬(活)：gargoyle_houndatk 鬣犬(死)：gargoyle_hounddeath 野猪(活)：gargoyle_werepigatk 野猪(嘶吼)：gargoyle_werepighowl 野猪(死)：gargoyle_werepigdeath 方尖碑：insanityrock 方尖碑(可伸缩)：sanityrock 奇怪的化石骨架：fossil_stalker(需测试) 熔岩池：lava_pond 圣诞树盆：winter_tree(其实调出来我无法使用) 礼物(空的)：gift 包裹(空的)：bundle 圣诞灯泡(红&#x2F;绿&#x2F;蓝&#x2F;白)：winter_ornament_light1&#x2F;2&#x2F;3&#x2F;4 圣诞灯饰(4种形状)：winter_ornament_fancy1&#x2F;2&#x2F;3&#x2F;4 圣诞灯饰(8种色彩)：winter_ornament_plain1&#x2F;2&#x2F;3&#x2F;4&#x2F;5&#x2F;6&#x2F;7&#x2F;8 其他动物足迹：animal_track 矮人明星：stafflight 远古桌子：ruins_table 远古椅子：ruins_chair 远古花瓶：ruins_vase 地图卷轴：mapscroll 主教头部：sculpture_bishophead 骑士头部：sculpture_knighthead 战车鼻部：sculpture_rooknose 主教雕塑：sculpture_bishopbody 战车雕塑：sculpture_rookbody 骑士雕塑：sculpture_knightbody 环状传送机零件(不知道这个系列在联机里到底还有什么用)：teleportato_ring 盒状传送机零件：teleportato_box 曲柄状传送机零件：teleportato_crank 球状传送机零件：teleportato_potato 快速完成冒险模式的方法：version AGetWorld().minimap.MiniMap:ShowArea(0,0,0,10000)环状零件：c_gonext(“teleportato_ring”)盒状零件：c_gonext(“teleportato_box”)曲柄零件：c_gonext(“teleportato_crank”)金属土豆零件：c_gonext(“teleportato_potato”)传送机零件底座：c_gonext(“teleportato_base”)然后直接把零件放上去就好了","categories":[{"name":"Game","slug":"Game","permalink":"https://rchangl.github.io/categories/Game/"}],"tags":[]},{"title":"主体 subject 与 实体 substance","slug":"Phyloshophy/主体与实体","date":"2023-06-16T02:55:33.492Z","updated":"2023-01-24T10:53:23.281Z","comments":true,"path":"page/Phyloshophy/主体与实体.html","link":"","permalink":"https://rchangl.github.io/page/Phyloshophy/%E4%B8%BB%E4%BD%93%E4%B8%8E%E5%AE%9E%E4%BD%93.html","excerpt":"","text":"康德 Kant主体 subject 先验统觉，Windows窗口、显示器、显示驱动，空的框架，内容从里面经过 实体 substance 物自体 thing-in-itself ，主体感受的到信息的源头，但不能看到物自体本身 主体和实体是分离的，主题无法更改实体 对象化&#x2F;客体化 先验主体性把 实体&#x2F;物自体&#x2F;原初数据 对象化成现象世界显现出来的物 实体呈现出现象，主体是实体涌现出世界的中介，实体通过主体展现出现象 主体只能面向现象世界，主体对实体的把握也只能通过现象“世界”。但主体无法把握他自己，这是主体的无能。 黑格尔 Hegel主体 -&gt; (运动的) ^|v 实体 -&gt; Geist 精神(运动的) 主体和实体是同一种东西，实体以主体为中介将“世界”涌现出来 substance is always subjectified.实体总是被主体化的 实体实际上是已经被主体化了的，实体的内核就是主体。康德的实体通过主体展现现象的整个结构，整个运动，是实体。 康德的主体的无能 有实体性。主体，实际是实体在迂回地认识自己，实体的自我认识。实体的自我把握就是实体。 物自体的产生，物自体无法被认识到（有一条界限），实际上是实体把主体作为中介认识自己，认识到自己是一种不可能性（impossibility），无法被认识（只需要行动就可以了，不需要认识）。 主体不是实体，实体是主体（主体化的）。主体是自我认识的中介，不是实体，主体是实体对自身的否定（黑格尔辩证法）。一整个实体认识自身的运动叫做Geist。 实体本身并不是一个僵死的，而是活的，运动的。 弗洛伊德当主体出现问题的时候，可以窥探到实体，通过精神分析的方式。 马克思这一切运动起来需要劳动、生产，绝对精神的运动需要从现实世界生产，否则就是无意义的空转概念 未反思的主体主体是agent ，作为一个个体，存在于一个实在的空间场域当中。需要周围的资源向自己靠拢，无法建立与其他人的联系。 主体主体是一种效果，能指链运动的一个效果。个体被束缚到能指链的二分的时候，产生一个效果，主体就产生了，会癔症化","categories":[{"name":"Phyloshophy","slug":"Phyloshophy","permalink":"https://rchangl.github.io/categories/Phyloshophy/"}],"tags":[]},{"title":"几种时间性","slug":"Phyloshophy/几种时间性","date":"2023-06-16T02:55:33.492Z","updated":"2023-04-05T15:17:23.803Z","comments":true,"path":"page/Phyloshophy/几种时间性.html","link":"","permalink":"https://rchangl.github.io/page/Phyloshophy/%E5%87%A0%E7%A7%8D%E6%97%B6%E9%97%B4%E6%80%A7.html","excerpt":"","text":"庸人的时间观线性的，过去、现在、未来，以现在为基准点，现在之前的就是过去，现在之后的就是未来。这个时间观实际上是空间性的，像是一种“四维空间”中的第四维，不同时空的三维空间叠加到了一起就变成了一种“四维空间”，而时间就是“第四维”；时间是第四维这种说法有个很明显的问题，就是一、二维中也存在时间，而一、二维叠加上时间并不能够“升维”；但是这个时间性的“四维空间”是单向的，只能朝着一个方向移动，如果移动到了尽头，那他的“寿命”就结束了。也可以看作一种针桶式的空间，当下就是那个针桶的塞子，不断地向前推进，直到尽头，也就是“寿命”的结束。 这种时间观，首先预设了一个空间化的场域，一种“四维空间”，或者说是一种针桶式的空间，把时间空间化了，实际上时间和空间是不一样的。还有就是预设了一种单向性的推力，往一个方向推动，这个推力一般是生命，把主体性往一个方向推，推向死亡。推力后面也是死亡，双重逼迫。这一整个过程就是一个私人的生命史，而整个世界的历史就是无数的私人历史拼接到一块。整个宇宙也是如此，例如有热力学定律，商不断增加，有个热力学时间在推着，宇宙最终会“热寂”，这种拟人化的物理学思维。 康德的时间观康德有三处提到时间观。一是先验感性论，先验直观形式有两种————时间和空间。二是先验统觉（A版），主体性。三是在先验想象力里，把未符号化的、离散的内容拼合为整体。最聪明的康德应该是 把先验直观形式和先验想象力结合为 主体的时间意识，就是先验统觉的时间，时间是同一性之源。 物自体自身是纷杂的，没有时间形式，如果有一种与主体无关的物自体，那么他是非时间的。当主体把 物自体 拼合到一起，把散漫的、未符号化的杂多 聚合为 一个整体，一个尚未表象的预处理的内容，当这个内容经过主体的直觉的时候就被把握了。近一步主体性会有一个“范畴”，把其分隔开，再向前有一个“综合”把其成为一个整体————“对象”。时间部分就是直觉之前的部分。 这是个镜子式的时间，未被时间化之前是满反射的，杂乱无章、没有同一性，当有个镜子式的主体出现————先验想象力，把满反射的光线汇聚到一个平整的面上，形成一个镜像，获得了一个共时性（对表了）。 非线性的时间性像一面两面互照的镜子，镜子里面还有镜子的影像，套娃式的时间性。 黑格尔主义的时间性是回溯性的时间，时间归根结底是没有时间。时间是一个差额（不仅是差异），时间有他的量。有时间是因为缺时间 在黑格尔，实体是第一的，实体在运动就是绝对精神。实体的目的是 把自己烧光，变成纯光（以太）。焚烧的火焰就是主体，主体分析、分解一切，但主体无法把一切烧光、完全分解。如果主体可以分解一切，他就能够瞬间读取、分析一切，是整个宇宙的加倍，能够肆意地切入每一个缝细，操纵整个因果链条。 黑格尔表示，与其说是主体在烧一切，不如说是实体在烧自己，主体只要什么都不作就行。过去认为主体是个胃，要分解、吸收一切，后来认识到 主体是个管道，只需要中介一切。主体让实体 在主体的位面 展现自己，实体能够自己有一个火焰自我燃烧（理智结构），主体是纯粹的否定性，绝对消极（这就是黑格尔主义，最彻底的黑格尔主义）。 为什么时间会有，因为“烧不光”，来不及烧光，需要经过主体的通道。燃烧后的灰烬就是剩余，所有普遍范畴在运行时都有剩余，实体在焚烧时是来不及的，必然有一些是未被 符号系统（绝对精神）所扬弃。这烧不透的东西与其说是灰烬 不如说是火焰，火焰和灰烬是同生的东西，要么什么都没有。剩余就是，人无条件的分析、分解能力把实体完全分解掉后 剩余的杂多 ，（灰烬同时也是燃料，烧不完的燃料），这些杂多到火焰中燃烧，生成表象，主体分解后的 杂多 永远多于表象。 符号化 总是不彻底的，为什么总是不彻底的？黑格尔的辩证法告诉我们，符号化需要载体，符号化的运动 永远是由 不能被符号化的剩余 所支持的。火焰之所以能燃烧 永远是由灰烬所支撑的，火焰燃烧的唯一目的是遮蔽不可燃烧的灰烬————不可燃烧的剩余（灯下黑） https://www.bilibili.com/video/BV1wh411k7PG/ P3黑格尔 18:00 27:40 人能够感知时间，是因为人知道漏了多少时间，人知道有多少剩余是未被符号化的。 35:30 在符号化运动受阻的过程（来不及烧），是能够被符号系统捕获的，这时是可以计时的，人还可以知道量，有多少还没被消散，人内在有这个量化结构。 39:30 总结","categories":[{"name":"Phyloshophy","slug":"Phyloshophy","permalink":"https://rchangl.github.io/categories/Phyloshophy/"}],"tags":[]},{"title":"存在问题","slug":"Phyloshophy/存在问题","date":"2023-06-16T02:55:33.492Z","updated":"2022-11-28T14:09:37.465Z","comments":true,"path":"page/Phyloshophy/存在问题.html","link":"","permalink":"https://rchangl.github.io/page/Phyloshophy/%E5%AD%98%E5%9C%A8%E9%97%AE%E9%A2%98.html","excerpt":"","text":"存在者存在，不存在者不存在。 There is something but not nothing 唯物主义 庸人无法坚持后半句，他们认为不存在者仍然存在，只是不干涉存在者而已。有一个空虚的场域，能够包容万物。 形而上学基本问题：究竟为什么存在者存在，“无”却存在，无（本身）却不存在 the 无 拒绝给出自身，无法存在，只能以“无”这个概念存在，无本身并不存在","categories":[{"name":"Phyloshophy","slug":"Phyloshophy","permalink":"https://rchangl.github.io/categories/Phyloshophy/"}],"tags":[]},{"title":"大他者不存在","slug":"Phyloshophy/大他者不存在","date":"2023-06-16T02:55:33.492Z","updated":"2023-05-02T07:38:43.032Z","comments":true,"path":"page/Phyloshophy/大他者不存在.html","link":"","permalink":"https://rchangl.github.io/page/Phyloshophy/%E5%A4%A7%E4%BB%96%E8%80%85%E4%B8%8D%E5%AD%98%E5%9C%A8.html","excerpt":"","text":"齐泽克 英文原文： https://www.lacan.com/zizekother.htm 为什么弗洛伊德要在《图腾与禁忌》中，用“原父”的神秘叙事补充了俄狄浦斯神话呢？这第二个神话要告诉我们的是：俄狄浦斯情结不是主体必须解决掉父亲，那个作为第三者介入，阻止主体与乱伦客体直接接触的父亲（这种解读维持了一种幻想，即对父亲的抹杀会让我们直接抵达那个乱伦客体）；恰恰是杀掉父亲这个行为，也就是对俄狄浦斯情结的实现，导致了象征律令（死亡的父亲以他的名字*回归了）。今天人们口诛笔伐的“俄狄浦斯情节衰退”（也就是象征父系权威的衰退），精确地描述了父亲形象回归的逻辑：原父从极权主义政治领袖那里回到了父权式的爱欲欺凌者（paternal sexual harasser）。这是为什么呢？当这个“抚慰性质的”象征权威遭到悬置，避免令人疲惫的欲望死结（欲望内在的不可能性inherent impossibility）的唯一方法，就是去定位那个使得欲望无法进入一个，代表了原乐的，暴虐形象（despotic figure）的原因。这个原因就是：我们不能享乐，因为大写的他把所有的快感都收集起来了…… 在“俄狄浦斯情结”中，恋母弑父是所有普通（男性）主体的无意识欲望，因为父亲形象禁止了主体进入母亲客体、干扰了我们与母体的共生。但是，事实上真正做到了恋母弑父的俄狄浦斯，他自己却是一个例外。相反地，在《图腾与禁忌》中，弗洛伊德强调了一遍又一遍，弑父并不是我们的无意识愿望，而是一个“必须已经发生”的史前事实。它开启了（人类）从动物进入文化的通道。简而言之，这个创伤性事件不是什么我们梦到的东西，而是从未真实发生，并因此，通过它的延迟，保持了文化的状态（因为完成与母亲的乱伦共生会消解掉定义了文化之丰富的象征距离&#x2F;禁令）。进一步的，我们进入文化秩序的一瞬间，这个创伤性事件总是必须已经发生了。如果我们事实上杀死了父亲，为什么其结果不是我们渴望已久的乱伦母子共同体？在这个悖论中我们看到了《图腾与禁忌》的中心命题：禁令信息的传递者，阻止我们抵达乱伦客体的，不是活着的父亲，而是死了的父亲。他在死后，以他的名字的形式回归[1]，也就是以象征法律&#x2F;禁令的化身回归。这样一来《图腾与禁忌》中的母体构成了弑父的解构必然性：从直接、残酷的力量通往象征权威&#x2F;禁令式法律的统治的道路，永远是基于一个（被否认的）原始犯罪行动。在那里，能看到这样一句辩证法“你只能通过背叛我来证明你爱我”：父亲只有通过被背叛和谋杀才提升为崇敬的法律之象征。这个问题意识因此得出，无知不是在主体那里，无知是在大他者那里：“父亲已经死了，但是他没有意识到这一点”，这就是说，他不知道他亲爱的追随者已经（永远已经）背叛了他。另一方面，这意味着父亲“真的认为他是一个父亲”——他的权威来源于他个人，而不仅是那个他占据&#x2F;填满的象征的空位所赋予他的。忠诚的追随者需要对作为领导者的父权形象隐瞒的恰恰是这个裂口，这个领导者个人特质的瞬时性与他所占据的那个象征位置之间是裂口，这个等效于父亲的人归根结底是无能的（性无能）、荒谬的也是裂口（李尔王，面对这种背叛和随之而来的性无能的暴露，被剥夺了象征性的头衔，沦为一个老的，愤怒的，无能的傻瓜）。基督本人要求犹大背叛他（或至少让他知道了他话语字里行间的愿望…）的这种异端邪说因此变得有理有据了：在对于那个伟大男人的背叛的必要性（只有这样才能保证他的名誉）之中，藏着权力的终极秘密。 但是，《图腾与禁忌》中依然有一些东西被遗漏了。让被谋杀的父亲以象征禁令的代言人的身份回归是不够的：这个禁令想发挥有事实上的效果，它必须被一个意志的积极行动所保持。因此，弗洛伊德在他的《摩西与一神教》中对俄狄浦斯装置增加了一个更进一步的新的变体。但是，这里的两个父权形象和《图腾与禁忌》里的就不同了：这两个形象不是前符号&#x2F;象征性淫荡&#x2F;非阉割的父权享乐以及作为符号权威的传递者的父亲（父亲的名字），而是古埃及的摩西（摒弃了早期的多神教迷信，引入了一神教，宇宙的概念是由一个独特的理性秩序决定和统治的）和闪米特的摩西（Jehovah [Yahve]耶和华，当他感到被他的子民背叛时表现出复仇的愤怒的嫉妒的上帝）。《摩西与一神教》再次转变了《图腾与禁忌》里的（俄狄浦斯）装置：被他的追随着&#x2F;儿子们“背叛”和杀死的不是那个淫荡的、原始的父权享乐，而是“理性的”体现着象征秩序的父亲——他是统一的宇宙背景性框架（逻格斯）的人格化。现在我们看到的，不再是一个前符号&#x2F;象征淫荡的父亲以他的名字（象征权威）的伪装的回归，而是一个被追随者&#x2F;儿子背叛&#x2F;杀掉的逻格斯，它用这样一种伪装回归——嫉妒的、复仇的、毫不宽恕的、一个充满了谋杀狂怒的上帝的超我形象。只有通过这个对俄狄浦斯母体的二次颠倒，我们才抵达了那个帕斯卡式的，著名的，对下列两种上帝的区分：上帝作为哲学家（上帝代表着宇宙背景性框架之逻格斯，它把自己认同为宇宙的理性框架）和上帝作为神学家（爱恨之神，反复无常的“非理性”宿命的神秘“黑暗之神”）。 关键点是，正如拉康所指出的那样，与一个天赋享乐知识的原父相比，现在这个不肯妥协的上帝被狰狞的无知（”la féroce ignorance de Yahvé”）附身了，他大声地对享乐喊道：“NO!”。这个上帝抱着这样一种态度：“我不想听到也拒绝了解任何关于你们那些隐秘肮脏的享乐方式”；这个上帝放逐了两样东西：一是承载着传统性化智慧的宇宙（一个仍然维持着大他者&#x2F;象征秩序和享乐之间终极和谐的表象的宇宙），二是这样一种观念——宏观世界被一些带有男女性张力的底层原则所规定，即阴和阳、光和暗、地球和天堂。这个上帝是一个原始存在主义者，他不是中世纪的托马斯阿奎那的上帝；它的存在不合时宜地与萨特对人的定义：人先于（precede）他的本质（essence）而不是符合他的本质。因此他不仅用同义反复言说他的本质（quidditas）——“I am what i am”，而且还用同义反复解释关于逻格斯的一切以及他行动的原因，更精确地说，他用同义反复解释他的禁令（为什么他要求和禁止我们做某事），他不可阻挡的命令最终都基于一句话：“一切是这样，是因为我说了我tmd喜欢这样！”简言之，这是一个纯粹意志之上帝（the God of pure Will），他那变幻莫测的深渊超越了任何普遍的理性秩序。这是一个不为他的所作所为做任何解释的上帝。 这是一个对他的追随者&#x2F;儿子言说的上帝，在这里他对他的子民们说话时，嗓音（voice[2]）的介入是至关重要的。拉康在他未发表的关于焦虑的研讨班（1960-61）上指出，嗓音（说话真正的动作）带来了符指网络的行动搬演（passage à l’acte，acting out[3]）,它的“象征功效（symbolic efficiency）”。嗓音固然是没有意义的，甚至是荒谬的，它只是一个表达出上帝恶意又复仇的愤怒的负面姿势（所有的意义都早就已经在组织起我们宇宙的象征秩序里了）。但它又是精确的，因为是它确定了纯粹结构化的意义，将意义变形为感官经验。这就是另一种说法，通过发出嗓音来昭示他的意志，上帝主体化了他自己。被他的人民背叛并杀死的古埃及的摩西，是包罗万象（all-inclusive）的逻格斯的太一，是宇宙的理性实体性框架，是能够通达掌握自然之书阅读方法之人的“书写”（writing[4]），却不是独此一家（all-exclusive）的主体性的太一。后者将他无条件的意志强加在了他的造物之上。 这个拥有无依据的意志和非理性残暴狂怒的上帝，通过他的禁令，摧毁了古老的性化智慧，这样就为去性化打开了空间，继而把现代科学的知识抽象了出来。这里出现的悖论是：只有当科学知识的宇宙它本身，被禁令式父亲的过剩非理性的形象补充和维持，才会有“客观”科学知识（现代意义的，后笛卡尔意义的）；笛卡尔的“自愿主义”（他臭名昭著的论断：如果是上帝的意志的话，那么2+2&#x3D;5——没有任何外部真理可以和神性共存）必然的成为了现代科学知识的对立面。前现代的亚里士多德式的、中世纪式的知识，还不是“客观的”、理性的、具有科学精确性的，因为它缺乏这种过剩，即上帝以纯粹无理性意志的主体性之名（行事）——亚里士多德式的上帝，直接等于他的外部理性自然，它除了是事物逻辑秩序外什么都不是[5]。进一步的悖论是：这个“非理性”的上帝，作为一个禁令式的父权形象，也为整个现代性的发展打开了空间，乃至让解构主义者得到性认同只是社会-象征建构的偶然结果的观念：这个禁令形象退去的一瞬间，我们就退回了当下很流行的荣格派新蒙昧主义的观念，也就是男性女性原型说。重要的是，如果我们没有误解对象征法律&#x2F;禁令的“恰当的”权威与单纯的被规则统治之间的区分，那么我们就会发现：悖论性地，象征规则的领域，以及被认为是这种领域的领域，必须依靠某些完全超越规则的同义反复权威，也就是说，“是这样因为（被上帝说）是这样”（“It is so because said it so!”）。 现在人们能看到，为什么在个人力比多经济学的层面，拉康把这个禁令式的上帝称为作为“阉割的能动者（agent）”的“真正的父亲”：象征阉割是大他者与享乐之间的裂隙的另一个名字，考虑到两者无法被“共时（synchronized）”。人们也可以看到，在何种精确的程度上，倒错（perversion）推动了对阉割的否认：倒错者最基本的幻想就是他可以掌握一种（象征界的）的知识，让他可以规定自己通往享乐的道路，用更时髦的话说，倒错者的梦想是将性活动变形为一种工具性、结果导向的活动，且这种活动能够根据一种精心设计的计划而被投射和执行。所以当某人说当下父权权威在倒退，实际上是在说那个不可妥协之“No”的父亲看起来在倒退；在他的缺场中，在他那个禁令式的“No！”的缺场中，象征秩序与享乐之间新形式的幻想性和谐可以再次繁荣。这就是所谓的新时代“功能整体性”的态度真正的意涵，重新恢复理性和生命实质之间的和谐（世间或宏观世界本身作为一种生命实体）是以这个禁令式的“真正的父亲”的缺场为代价的。 这些死结指出，某种角度上讲，今日世界大他者不再存在了，但问题是这到底是哪种角度？在拉康那里，大他者似乎和上帝一样（上帝不是今天才死的，他从最一开始就是死的，只是他不知道……）：他（大他者）最开始就没有存在过，也就是说，大他者的不存在和他作为象征秩序是终极等价的，而象征秩序是符号性虚构（symbolic fiction）的秩序，它和直接的物质因果关系不在同一层面运行。（在这个意义上讲，只有对精神病患者来说大他者是存在的，因为精神病赋予了词语直接的物质性功效。）简而言之，“大他者的不存在”严格地与以下观念紧密关联：信念之观念、象征信仰之观念、信任之观念以及用他人说话的价值仅凭他用词的价值之观念。 什么是象征功效？我都知道那个古老、过时的笑话，它关于一个疯子以为自己是玉米粒；在最终被治愈并送回家之后，他没过多久就返回了心理治疗中心，向医生解释他的恐惧：“在路上，我遭遇了一只母鸡，我生怕它会吃了我！”医生讶然：“可是你已经知道你不是玉米而是一个不可能被母鸡吞下去的人啊？”，疯子回答：“是啊，我知道我不再是一粒玉米，但谁明白母鸡知不知道这档子事儿呢？”这个故事的荒谬之处仅在于，疯子在事实的层面考虑自己是不是一粒玉米，然而如果把玉米换成任何一种能够决定你符号性认同的特征，那么这个故事完全是可被理解的。看看我们在和科层等级制度打交道的时候都出了什么幺蛾子。例如，一个高级官员可以服从我的需要并给我一个更高的职衔；但是，这个（任命）法令被恰当地执行并且下达到与这个头衔有事实关切的（比如要为这个头衔付更高薪水）低级的主管部门，往往需要花费可观时间。我们都知晓被一个低级官员阻挠的场景，他瞥了眼法令，不痛不痒地反驳道： “不好意思，关于这个新举措我还没有接到正式的通知，所以我爱莫能助……”这某种程度上说是不是挺像：“不好意思，对于我们来说你仍然只是玉米粒，而不是人类。”简而言之，总有一个特定的神秘瞬间，一项措施或法令变得有实际效力，被注册到了大他者的象征机构。上一次斯洛文尼亚竞选活动中的一个趣事是这种神秘瞬间的典型。一位我朋友当地选区里的老妇人找到了他，寻求帮助。在某次管理部门的重新安排中，她房子的门牌号被改到了23（不是通常的不幸数字13），她十分确信这数字让她倒霉，她被分到这数字的一瞬间，坏事就找上了门（劫匪闯入，一场风暴掀了她屋顶，邻居开始惹恼她…）。她友善地问我朋友，一位当地参选者，能不能让市政当局改一下她的门牌号。我朋友给她提了一个很简单的建议：为什么她不自己改呢？她简单地重画或者换掉门牌号，换上23A，或者用231代替23不就得了吗？这个老妇人回答道：“嘿，我几周前试了，我给23加了个A，但不管用啊。霉运还是在继续，你没法骗它。这事必须得国家有关部门才能办妥当…”。在这里，不能被欺骗的当然是大他者的象征机构。象征功效因此有关一种最小程度的具象化：为了变得有效力，让所有的相关个体知道某些特定事实是不够的；它，也就是象征机构，必须也知道&#x2F;“注册”这个事实。这里的“它”，当然归根结底可以被具体体现为绝对的“大他者”，也就是上帝本人，的凝视。难道这个不幸的老妇人碰到的问题和那些天主教徒为了避孕只在没有排卵期的时候那啥的习惯完全一样吗？上帝显然不可能不知道他们那啥只是为了性快感而不是为了生育，那他们到底在骗谁？过去教会总是对正当的铭记&#x2F;注册与单纯的存在之间的裂隙极短敏感：例如还未受洗就死了的儿童不可以在圣地得到一个妥当的埋葬，因为他们还未获得信徒社群的正当铭记… 在马克斯兄弟系列电影中的一部，当格劳乔·马克斯被抓到撒谎时，愤怒地回答：“你到底信你自己的眼睛还是我的话？”这个荒谬的逻辑完美地演示了象征秩序的运作模式（functioning），在其中，面纱似的符号性委任比个体带着面纱和&#x2F;或接受委任的直接现实还要重要。这个运作模式涉及到恋物癖式否认的结构：“我十分清楚我如何看待事物决定了事物的本质，我十分清楚那人腐败堕落又虚弱不堪，但尽管如此我尊敬地待他，因为他戴着法官的徽章，所以当他言说，那就是法律本身通过了他的肉体在言说。”所以，在某一点上，我真实地相信他的话，而不是我的眼睛，也就是说，我信仰另一个空间（纯粹象征权威的国度）比，作为现实的，它的代言人更为重要。因此（在下面这种场景中）人们缺乏一种对现实进行犬儒式削减的态度：当一个法官言说，他话语中有一个比法官本人作为直接现实更高的真理（法律机构的话语），如果一个人把自己限制在他所看到的东西上，那他肯定错过了重点。拉康针对这个悖论提出了他的“不被欺骗的错误（les non-dupes errent）”：那些不允许自己被符号性欺骗&#x2F;虚构捕获的人，他们继续相信自己的眼睛，是那些错得最多的人。一个“只相信自己眼睛”的犬儒主义者漏掉了符号性虚构的功效和它是如何结构我们对现实的经验的。同样的裂隙在我们与邻居（neighbors[6]）处理最亲密的关系时也在发生作用：我们假装好像不知道他们也闻起来很臭，分泌排泄物等等，一种恋物癖式否认的，最小程度的理想化，是我们和邻居（伴侣）共存的基础。 今天，新式数码科技使得完美虚假的纪录式图像成为可能，更不用提虚拟现实技术，所以这句箴言“相信我的言辞（论证），而不是着了你眼睛的迷。”比以前任何时候都真确。重要的是了解到“你到底相信谁，你的眼睛还是我的言辞？”（也就是，“虽然我知道…，但是尽管如此我还是相信…”）的逻辑是如何在符号性虚构和想象性模拟中以两种不同的方式运作的。在那个关于带徽章法官的有效用的符号性虚构的例子里，“我十分清楚那人腐败堕落又虚弱不堪，但尽管如此我尊敬地待他就好像&#x2F;我相信那是象征大他者通过了他的肉体在言说。”：我否认我眼睛看到的并选择相信符号性虚构。相反，在虚拟现实技术拟像的例子里，“我十分清楚我看到的一切都是被数码机器制造出来的，但尽管如此我接受了将自己沉浸于其中，表现得好像我相信它一样。”这里，我否认了我的（象征界的）知识告诉我的而选择只相信我的眼睛…… 然而，最能体现符号性虚构作为一种普遍性的中介的力量的最好的例子可能是一种基督教式的正确，也就是对基督复活的信仰：“真”基督的死亡是在圣灵，在信众社群灵魂性的层面，被“扬弃”的。以新诺斯替派&#x2F;二元论者作为伪装的人的解读（误读），当下正在攻击最初被圣保罗论述的基督教真正内核。他们将基督复活贬为对个体灵魂“内部”灵性成长的隐喻。这样就遗失了基督教核心信条的一部分：与《旧约》罪与罚的逻辑的决裂，也就是奇迹恩典（the miracle of Grace），可以进行回溯性地“撤销”，擦去了我们过去的罪。而《新约》的“好消息（good message）”是奇迹无中生有（creatio ex nihilo）了一个新的开端，意味着从空无中开始一段新的生活是可能的。（Creatio ex nihilo，一个新的符号性虚构的建成可以擦掉过去的那个，当然这只能在同一个符号学宇宙中实现）。重要的是，这个新的开端只有通过神的恩典才是可能的，并且它的动力必须来自外部。人类克服阻滞或将其灵魂升华到超越物质利益自利主义的这种内部努力是无法开启这个开端的可能性的。精确到这种程度，正当的基督教新启元和存疑的异教徒诺斯替主义的对于“灵魂复生”的解释就完全不相容了。 新纪元运动痴迷的，用当代方法来进入柏拉图路径是，从他的讲演录体现的公开教学之下挖掘出他真正的，深奥的教条，也就是柏拉图所谓的“隐秘教诲（secret teaching）”。这种“隐秘教诲”例证了假定的淫荡大他者总是如影随形地跟着纯粹理论的太一（the One of pure theory）。但是我们稍加审视，这种“隐秘教诲”的肯定性（positive）内容就把自己暴露出来，它不过就是机场书店卖的，约瑟夫.坎贝尔写的那种流俗智慧：一种新纪元运动的陈词滥调，讨论宇宙二元性法则：太一作为光的肯定性（positive）法则，必然伴随着原始的他者性，也就是阴性&#x2F;女性（feminine）物质的神秘黑暗法则。这种理论其中就包含着柏拉图神秘的“隐秘教诲”的基本悖论：通过艰苦的训诂考据工作，我们应当发掘出的秘密不是别的，就是最臭名昭著的新纪元运动流俗智慧，它作为拉康拓扑学的一个很好地例子呈现了在何处最内隐之内核会与最激进的外部性达成短路。这不过是蒙昧主义&#x2F;反启蒙主义对启蒙主义发起的斗争的新一篇章：既然柏拉图作为第一个伟大的启蒙者，对他的“秘密教导”的痴迷揭示了这些人的意图：他们试图证明柏拉图在教导一种特定的原教旨（这样柏拉图就被他们拉下水，变成蒙昧主义者了）。 流俗的新纪元运动的诺斯替主义拥趸重新宣称一种在官方圣保罗主义教义之下的基督“秘密教导”的目标是一样的：为了撤销，为了擦去，“事件-基督（Event-Christ）”激进的创新性，将其贬抑到一种对之前诺斯替主义的血统的延续。诺斯替主义对基督教的这种误读的另一个重要层面是对关于一种关于基督的伪科学（比如传言中基督的坟墓、他和抹大拉的玛利亚结婚所繁衍的后代）的痴迷在逐渐增长。像《圣血》、《圣杯》以及《上帝之墓》之类的畅销书都聚焦在法国南部的雷恩城堡一带，它们放弃了一大块自洽连贯的叙事却去相信圣杯传说、卡塔尔派、圣殿骑士团以及共济会之类的传说，并且拥护用历史上真实存在的那个真叫基督的人以及他的后代来取代圣灵（信众的社群）的符号性虚构那逐渐消亡的力量。基督抛下他的身体或者后代的事实贬抑了基督的-圣保罗的对于复活的叙事：基督的身体没有被有效地复活，“耶稣留下的真正的讯息在复活中被丢失了。”（《上帝之墓》）。而这些书鼓吹的“真正的讯息”无非是说基督旨在推崇“人们走自我决断的道路，而不要走服从于信条教规的道路”：救赎是源于灵魂的内部旅程的，而不是源于一个外部的宽恕行为。“基督复活”被这些流行文化解读为灵魂通过自我净化之旅来完成内部更新&#x2F;重生。对于这种“实在界回归&#x2F;重回实在界”的拥护者来说，他们的发现是对长期被教会作为一种权威机构压抑了的叛逆的和颠覆性的秘密的发掘；但是这帮人未曾考虑过：万一正是对这种“秘密”的发掘把“基督复活”最独特的特性给抹去了呢？他们的这种行为恰恰撤销&#x2F;放逐了真正创伤性的、颠覆性的基督教教诲：它带来的迷津和对原罪回溯性的宽恕，这才是“基督复活”这一事件最独一无二的特性。 令人有沧海桑田之感的剧变已经在当下发生了，“大他者不存在”比过去发生的通常变化来得要更为激进，与大他者有同样境遇的是象征秩序：那种能抵抗诸多可疑证据依然可以持存的象征信仰，已经越来越衰败了。在大他者的消亡中，（我要指出的）第一个悖论显现在所谓的“抱怨文化”中，其底层逻辑是愤怒：人们不是欢欣地认可了大他者的不存在；主体怪罪大他者的失败和&#x2F;或其性无能，好像大他者对其不存在负有罪责，换言之，他的性无能不是脱罪的借口。主体的结构越“自恋”，他越是怪罪大他者，并因此断言了他对大他者的依赖性。这种“抱怨文化”因此呼唤大他者的介入，并给个交代（大他者要为性少数和少数族裔遭到伤害赔偿，即使这种赔偿到底该怎么执行取决于不同的伦理-法律委员会）。“抱怨文化”上述这种特点源于其拥护者刻舟求剑式的思想扭曲，在他们把抱怨翻译成一种大他者（通常是国家）的法律责任的努力时，他们到底想让大他者赔偿什么？答案是：正是那种我被夺去的高深莫测的剩余快感，它的匮乏让我感到权益受损。由此看来，“抱怨文化”不正是现代版本的歇斯底里式的不可能之要求（demand）吗？这些要求提向大他者，在其功效上就是为了被大他者拒绝。因为主体把大他者的不存在寓于它的抱怨中了：“我会遭受苦难是因为大他者对我的苦难负责&#x2F;有罪？”。这里不可逾越的裂口位于抱怨的逻辑与真正“激进（革命）的”行动之间，换言之，只要悬置现存的法律体系而不去抱怨大他者并期待大他者去行动（也就是取代对它采取行动的需要need），那么这个行动自己就已经完成了。抱怨被剥夺快感权力的那些人错在，他们没有削弱大他者的点位，而是对大他者演说：他们通过把他们的要求翻译成一种刻舟求剑式的抱怨来攻击大他者，恰恰确证了大他者的点位。 其次，当下大面积地出现了下列现象：伦理&#x2F;宗教的原教旨主义复苏，这些运动倡导回到一种基督教或xxx教对性角色进行男权家长式的分配；新纪元运动对宇宙大量的再性化（re-sexualization），即回到前现代的、异教徒式的、性化的宇宙-本体论（cosmo-ontology）；阴谋论作为一种流行的“认知测绘（cognitive mapping）”在壮大……这些现象似乎在反对大他者的撤退。这些现象不能被看成是一种“对自由的逃避”式的退步而被忽视，作为一种不幸的“过去时代的残余”，我们只有更加果断地继续解构主义的下列两种道路才能让这些现象消失：第一种，就是对各种固定的认同的历史化（historicisation），第二种，就是要揭穿每一种自然化了的自体形象（self-image）的偶然性。进一步的，这些恼人的现象逼迫我们描绘出大他者之撤退的轮廓：“大他者不存在”（也就是象征功效的冰消瓦解）所导致的转变，其悖论性的结果确切地揭示了大他者不再作为一种符号性虚构而存在，大他者在另一个层面上，也就是在实在界，重新出现并有效力地存在了。 相信大他者在实在界里存在的信念是对偏执狂&#x2F;妄想症最简明的定义，所以两种描绘了今日社会意识形态立场的特征，也就是犬儒式疏离[7]和对妄想症式幻想的执着是严格相互依赖的：今日社会典型的主体，尽管表现出一种对任何公众意识形态都不信任的犬儒主义姿态，却完全不加限制地将其本身放纵于关于阴谋、威胁以及他者（大他者）过剩快感的妄想症式幻想中。主体对大他者（符号性虚构的秩序）不信任，并且拒绝“当回事”，都是因为他们相信有个“他者&#x2F;大他者的他者&#x2F;大他者（Other of the Other）”，一个秘密的，不可见的，全能的能动者，能够有效地在可见的公开的权力之后进行幕后操作。这个他者，淫荡又无形的权力结构扮演了拉康派说的“他者&#x2F;大他者的他者&#x2F;大他者”的角色，也扮演了大他者（规范社会生活的象征秩序）的一致性的终极&#x2F;元保障（meta-guarantee）。 这里，我们应该寻找“宏大叙事的终结”的根源，也就是叙事化运动（narrativization）进入僵局的根源。在我们的时代，当曾经能够囊括全球的叙事（“自由主义民主与jq主义之间的斗争”）不再能够在政治、意识形态、文学和电影中维持可能性的时候，这种妄想症式的阴谋论叙事似乎是达成全球性“认知测绘”的唯一解。我们不仅在右翼民粹主义和原教旨主义那里看到这种妄想症式的叙事，也在自由主义中间派和左翼路线当中看到它。（自由主义中间派：关于肯尼迪被刺事件的秘辛；左翼：美国老左翼痴迷于神秘的政府特务机关在实验可以用来控制人民的神经性毒气。）有人把这种阴谋论叙事理解为“中产阶级”令人讨厌的，对现代化进程感到不安所做出的妄想症式法西斯主义回应，这是对这种叙事过于简单粗糙的轻视。当不同的政治议题，为了获得大众认可，窃取了这种，作为一种漂浮的能指，被编造出来的阴谋论来对大众的“认知测绘”做出改变（最小程度上[8]）时，它能够生产出来的力量比人们想象的要大得多。 这是大他者在它被宣称的消失之后才可以持存的一种版本。另一种版本以新纪元运动和荣格派对宇宙的再性化（“男人来自火星，女人来自金星”）为伪装。根据这种说法，有一种潜藏的，深深扎根的原型认同，能够在当代一团浆糊的身份与认同困惑中为人们提供避难所。从这种角度来说，今日的危机归根结底不是源自人们难以克服固定性别角色的传统。现代人牺牲了其人格中女性&#x2F;同情的维度来过于强调其男性&#x2F;理性&#x2F;清醒的维度，导致了不平衡。这种不平衡才是今日危机的原因。尽管这种趋势和女性主义一样都有反笛卡尔主义和反父权制的偏见，它还是让女性主义者将其运动议程改写为对下面这种命题的重申：一种原型性的女性根基被我们竞争激烈、男性主导、机械论的宇宙给压抑了。另一个版本的真正他者&#x2F;大他者的形象是x骚扰其女儿的父亲，它位于所谓的“错误记忆综合征”的中心位置：这里，也是一个被悬置的父亲，作为符号性权威的代理人，作为一种符号性虚构的化身“重回实在界”。（那些支持对童年x虐待的回忆的人提出的争论造成了争议。他们认为父亲实施的性骚扰不仅仅是一种幻想，至少不是一种现实和幻想不可分割的混同，而是一个明明白白的事实，它“真实地发生”在大多数家庭。这种固执完全不比弗洛伊德坚持下面一种意见的固执弱：对“原父”的谋杀是人类史前史上真实的事件。）但是，仍然还有一种对大他者更有趣和不可思议的断言，在所谓的“解放”概念中清晰可辨，即是说：在当代，个体被强制（重新）发明他们互相共存的规则，却不能依赖康德的伦理哲学早就已经已经例证了的某些元规范。在《冷酷和残酷》中，德勒兹为康德关于道德律的激进的新观念设立了一个不可超越的公式： 法律不被认为是依附于善，反而善要反过来依附于法律。这意味着法律不再在更高的原则上拥有基础、获得权威，而是仅仅出于自身的形式是自我奠基的和坚固的……通过将大写法律确立为终极基础或原则，康德为现代思想添加了一道本质性的维度；就定义而言，法律的对象是不可知与难找的（elusive）……很明显，被纯粹形式所定义，不带有任何实质或对象或任何决定的大写法律是没人知道或没人能知道它是什么的法律。它带着面具运作。它决定出了一个人变得有罪以及越过不知为何的界限的僭越领域，就像在俄狄浦斯的例子中那样。就算是定罪和惩罚都没有告诉我们法律是什么，而是将它留在与惩罚的最详尽说明相等的未决定状态之中。[9] 康德的法律因此不仅仅是一个应用于随机经验内容的空形式用以查明这些经验内容是否符合伦理充分（ethical adequacy）的标准。这个空形式更是一种保证，确保缺场的内容绝对不会到来。这种形式不是对大量经验内容的一种中立且普遍的范式；这个形式的自主性进一步保证了不确定性：我们绝不会知道导致我们行动的特异性的既定的行动内容是否与这种特异性搭配。换言之，我们是有效地遵从法律而行动，还是被某种隐藏的病理化的模式指导着行动，是不确定的。康德因此宣称，在卡夫卡那里达到巅峰的，法律的观念以及现代政治的经验是“jq主义”：既然，法律的Dass-Sein（法律的事实）先于于其Was-Sein（什么是法律），主体发现自己陷入了这样的境地，尽管他知道有那么一个法律，但他绝不会知道（并且不能先验地知道）法律其实是与其化身分割开来的一个永恒的裂口。主体因此于其存在先验地有罪：罪在不知其有罪（不知其为何有此罪），他在不知其确切规定时就触犯了法律。在哲学史上头一回，法律的声称变成了无意识的：没有内容的经验形式永远是被压抑之内容的索引，主体越激烈地坚持那个空的形式，被压抑之内容越创伤。 我们可以清楚地观察到，康德版本的“主体重新发明其伦理行动的原则”与后现代福柯版本之间的裂口。虽然康德和福柯都声称伦理判断归根结底展示的是美学判断的结构（一个人不能简单地用一种普遍化的原则应用到具体情境，他必须在每一个独特的具体情况中重新发明一套普遍性原则）；区别在于，在福柯那里，这只是意味着主体被迫进入一个不能借助超验法律但必须确立其伦理计划的境况，而在康德那里，当主体履行其职责时，法律在一组确定的积极普遍规范的特定意义上的缺场，赋予了道德律（这个道德律以纯粹的空的禁制令之名）更多令人感受激烈又无法忍受的压力。从拉康派的角度上讲，就是在此处我们遭遇了待被发明的规则与其潜藏的律令&#x2F;禁令之间的重要区别：只有当法律作为一组确定的积极普遍的象征规范无法呈现出来时，我们遭遇了法律最为激烈的一面，也就是法律作为实在界的无条件的禁制令。被道德律卷入的禁令，就其本身的性质，有一个我们在这里要着重观察的悖论：就其最根源的那一面来说，这个禁令不是要阻止某人完成某些违反法律的积极行动，而是在自我指涉，禁止任何具体的、象征的指示来让法律变得难以理解，使法律“不可能”；这个禁令也禁止人们要求任何关于法律之地位的积极规范。归根结底，这种禁令意味着法律本身的位置必须保持为空。 在这里我用经典弗洛伊德术语：在福柯那里我们得到了一系列规则来规范”care of the Self”在他的“快乐的享用”中（简言之，就是对“快乐原则”的理性应用），然而在康德那里，对规则的（重新）发明必须遵从“超越快乐原则”的禁制令。当然，福柯&#x2F;德勒兹会认为康德归根结底是一种视角性的幻觉的受害者，这种幻觉导致康德（错误地）认为伦理规范固有之激进特性：主体必须自主地发明他行为的规范，即使需要以其自身为代价，并承担责任，不找一个作为对立面的大他者来怪罪，激进地预设了一个不可把握、超验的大他者的存在，他用无条件的禁制令恐吓我们，并且阻止我们抵达他；我们被强迫完成我们的大写的职责，却永远被禁止知晓这个大写的职责到底是什么。对于这样的问题的解决（也就是把大他者不可把握的对大写的职责的召唤翻译出来），弗洛伊德式的回答是，我们必须依靠对无意识的否认：我们经常忽视的是，福柯拒斥精神分析对性的解释同时也是对弗洛伊德无意识的拒斥。如果我们用精神分析的术语思考康德，那么那道分开自设规范与这些自设规范底层的大写的法律之间的裂口，正是（意识地—前意识地）我们遵守的规则和无意识的大写的法律之间的裂口：精神分析的入门课就会教授什么是无意识，在其最积极的层面，不是非法的、被压抑之欲望，而是根本的大写的法律本身。 所以，即使是在一个致力于“care of the Self”的自恋主体那里，他的“快乐的享用”也是被无意识的、无条件的超我律令所维持的。当这些人无法追求到快乐，他们感受到的那种负罪感不正是最终极的证据吗？根据社会学调查，现在人们越来越不被x活动吸引了；对激烈x快乐令人讶异的冷漠正在逐渐增长，与我们后现代社会官方意识形态“及时行乐”形成了鲜明的反差。所以，我们当下看到的一个典型主体是一个过于投入到前戏（慢跑、按摩、晒黑、涂抹乳霜和乳液。。。）以至于他所以努力的真正目标（x活动）不再吸引他了；今天，你在纽约克里斯托弗街或切尔西随便走走，就能看到数百名同性恋者将非凡的精力投入到健身中，痴迷于变老，致力于享乐，但显然生活在永久的焦虑和最终失败的阴影下。。。超我再一次完成了它的工作：他直接的律令“享受！”更像是一种致力于在实际效果层面阻碍主体享受的手段而不是还留有一丝犯禁空间的，单纯、直接的禁制令。其中的教益是，恰恰是自恋的“care of the Self”,而不是社会禁制令网络的“压抑”，是激烈x体验真正的敌人。那种后精神分析主体性创造出来并积极参与的乌托邦，超越了性，只追求新潮乖僻身体性快乐已经恢复到了一种令人索然无味的枯燥；只剩下疼痛的直接干预（施受虐）才可以抵达激烈的快乐体验。 因此，“大他者不存在”（作为一种有效力的符号性虚构）的事实，导致了两个互相关联，却又完全相对的后果：一方面，符号性虚构的失败引诱主体越来越多地依恋想象性拟像以及今天从四面八方轰击我们的感官奇观；另一方面，也激活了在实在界中对身体本身进行暴力的需求（切割和刺穿肉体，或将假体插入体内）。","categories":[{"name":"Phyloshophy","slug":"Phyloshophy","permalink":"https://rchangl.github.io/categories/Phyloshophy/"}],"tags":[]},{"title":"拉康的符号学","slug":"Phyloshophy/拉康的符号学","date":"2023-06-16T02:55:33.492Z","updated":"2022-11-28T14:09:37.475Z","comments":true,"path":"page/Phyloshophy/拉康的符号学.html","link":"","permalink":"https://rchangl.github.io/page/Phyloshophy/%E6%8B%89%E5%BA%B7%E7%9A%84%E7%AC%A6%E5%8F%B7%E5%AD%A6.html","excerpt":"","text":"符号界 象征界 the symbolic 符号链 能指链 signifier A 大他者母子共同体 先验主体性transcendental 符号系统 大他者的一致性表现为母子共同体，是一种回溯性的、虚构的不存在的。 大他者构建出这一切 所见所闻 大他者永远“在”，但大他者不存在 上帝 历史必然性 在扮演大他者 A 母子分离“感受”到大他者的 内在的不一致性 主体的失败才会感受到大他者的存在，所以 不存在一个自我认识、自我一致的大他者 S(A) 原初能指 S1能指链的第一个，S1 S1 能指，指向的是虚无，指向的是这种指称本身的失败。因为如果大他者能够指称S1，那大他者的不一致性就不存在了，S1也就不存在了，但还是不得不甩出一个S符号。 符号一定会分裂成能指(signifier)和所指。S1的能指是虚无的，这个虚无本身就是 A 大他者不存在 Φ phallus 阳具能指S1 代表父亲&#x2F;父权&#x2F;符号律令的介入，因为父亲的介入导致的母子共同体的分离 S1 这中缺失、不在场，变成一种积极的存在 孩子会进行性化 Sexuation S1 代表父亲的禁令：不得乱伦。孩子认同父亲的禁令，是认为父亲可以满足母亲，而我不行，无能 Φ phallus 出现的时候，就是阉割、弑父情节出现的时候 幻想母亲愿意与父亲结合是因为，父亲那有一个我没有的东西，就是 phallus 。 只要有了 phallus ，我就可以重新回到 A 这时就会对父亲进行阉割，弑父情节。S1代表母子共同体不存在，代表一种无能impotence。要夺取父亲的phallus 男孩：","categories":[{"name":"Phyloshophy","slug":"Phyloshophy","permalink":"https://rchangl.github.io/categories/Phyloshophy/"}],"tags":[]},{"title":"拉康的欲望","slug":"Phyloshophy/拉康的欲望","date":"2023-06-16T02:55:33.492Z","updated":"2023-06-07T16:09:56.669Z","comments":true,"path":"page/Phyloshophy/拉康的欲望.html","link":"","permalink":"https://rchangl.github.io/page/Phyloshophy/%E6%8B%89%E5%BA%B7%E7%9A%84%E6%AC%B2%E6%9C%9B.html","excerpt":"","text":"A母子共同体 无法避免无法，客观的 符号系统&#x2F;先验主体性 大他者 S(A)&#x2F;S_1A 母子共同体的分离 父亲的介入，父亲所代表的符号律令，把缺失、不在场变成一种积极的存在，在这里进入了性化过程 sexuazation 。S_1代表父亲禁令：不得乱伦，不得回到母子共同体的那种整全的状态。 母子因客观原因分离，婴儿会把这归咎于父亲的介入。 Phallus父亲可以满足母亲，而我不行，的幻想。是因为父亲那里有一个我没有的东西，就是Phallus。只要有Phallus就可以重新回到母子共同体当中。 这时就有了弑父情节，S1是虚假的，打断了母子共同体的存在，是无能 impotence 。要夺取父亲的Phallus，阉割。 男孩Phallus是能令母亲快乐的东西，神秘的女性快感 femininity 。Phallus &#x3D; feminity Phallus是真实的。不得露阴的禁令。阳具遇到Phallus时会upright，所以阳具和Phallus同一起来了。 为什么不得露阴，是因为害怕被阉割。母亲的禁令是喜欢Phallus，父亲的禁令是嫉妒Phallus。同时女体也是Phallus，同时抵达阳具崇拜和女体崇拜。害怕去势，被阉割。阉割就是神经症压抑，阉割以后只能以特定的方式获得快感，女体、阳具崇拜这两种方式。阳具游戏：崇高的、国家主义、民族主义之类的。这时候就是被阉割了。 女孩露阴禁令。被逼给出自己没有的东西；为失去自己没有的东西而担心；双重恐惧，加倍阉割。从性别认知上就知道Phallus代表虚无，不存在快感上的压抑， everything is sexual。 男性视角男性就觉得女人在爱欲上有神秘性，女性不会被男性那的两种方式压抑，可以完全沉浸在爱欲上，有一种神秘力量，反倒认为在女体那才能有快感。 男性变为 $ ，女性是 a无限享乐。 $|a ，中间的 | 将两者隔开，存在论上的隔阂，只要获得女性的青睐就能突破这隔阂。 实际上，男性phallus自我认同是女性a扮演出来的，根本不存在。 女性视角知道自己没有Phallus $，想要获得男性的Phallus，也进入了 $|a ，中间的|是一种幻想。 不得观看男孩的阳具禁令，会误以为男孩的阳具就是Phallus，而自己没有。之前说的女性认为Phallus不存在是自己身上的Phallus不存在，误以为男孩有Phallus。经历的是双重勒索，在自己的爱欲领地里是比较自由的，看不同的文化。 a 小客体a是不在A里面的部分","categories":[{"name":"Phyloshophy","slug":"Phyloshophy","permalink":"https://rchangl.github.io/categories/Phyloshophy/"}],"tags":[]},{"title":"动词语气（虚拟语气）","slug":"English/动词语气（虚拟语气）","date":"2023-06-16T02:55:33.476Z","updated":"2022-10-13T18:32:29.213Z","comments":true,"path":"page/English/动词语气（虚拟语气）.html","link":"","permalink":"https://rchangl.github.io/page/English/%E5%8A%A8%E8%AF%8D%E8%AF%AD%E6%B0%94%EF%BC%88%E8%99%9A%E6%8B%9F%E8%AF%AD%E6%B0%94%EF%BC%89.html","excerpt":"","text":"陈述语气祈使语气虚拟语气 （疑问语气条件语气感叹语气） 陈述语气 Indicative Mood描述现实 （疑问语气：提问） 祈使语气 Imperative Mood命令 请求 用第二人称、一般现在时态，去掉 “You”，保证动词原形 虚拟语气 Subjunctive Mood描述主观意愿、想象 做不可能的假设现在事实相反条件句：过去式主句：过去将来 would V 将来事实相反（根本不可能、可能性很小）条件句：过去将来 should V主句：过去将来 would V 过去事实相反（过去时间的虚拟）条件句： 过去完成 hava变位 V-ed主句：过去将来 would V","categories":[{"name":"English","slug":"English","permalink":"https://rchangl.github.io/categories/English/"}],"tags":[]},{"title":"形式主语、形式宾语","slug":"English/形式主语、形式宾语","date":"2023-06-16T02:55:33.476Z","updated":"2022-11-27T02:45:03.876Z","comments":true,"path":"page/English/形式主语、形式宾语.html","link":"","permalink":"https://rchangl.github.io/page/English/%E5%BD%A2%E5%BC%8F%E4%B8%BB%E8%AF%AD%E3%80%81%E5%BD%A2%E5%BC%8F%E5%AE%BE%E8%AF%AD.html","excerpt":"","text":"it 替代原从句的位置，从句移动到句末","categories":[{"name":"English","slug":"English","permalink":"https://rchangl.github.io/categories/English/"}],"tags":[]},{"title":"非谓语","slug":"English/非谓语","date":"2023-06-16T02:55:33.476Z","updated":"2023-05-18T02:48:09.333Z","comments":true,"path":"page/English/非谓语.html","link":"","permalink":"https://rchangl.github.io/page/English/%E9%9D%9E%E8%B0%93%E8%AF%AD.html","excerpt":"","text":"分类不定式 to V 动名词 V-ing 现在分词 V-ing 过去分词 V-ed 不定式 to V infinitive有些情况 to 可省略 一些动词不能接不定式做宾语 使役动词 （裸不定式 bare infinitives） 接不定式做宾语时省略 to see find watch have make … 做宾补时无论是否省略to都可 还可以使用 to 带状态的动词 动名词 V-ing做定语，但是是以名词形式，区别于现在分词 现在分词 V-ing过去分词 V-ed","categories":[{"name":"English","slug":"English","permalink":"https://rchangl.github.io/categories/English/"}],"tags":[]},{"title":"时态 - 英语语法","slug":"English/时态","date":"2023-06-16T02:55:33.476Z","updated":"2022-10-15T04:20:55.236Z","comments":true,"path":"page/English/时态.html","link":"","permalink":"https://rchangl.github.io/page/English/%E6%97%B6%E6%80%81.html","excerpt":"","text":"时间过去 现在 将来 过去将来：过去某个时间点的将来 状态一般：注意三单 进行：进行中 完成：已经完成了 完成进行：过去到现在，未完成全部（仍要继续） 现在一般现在V 开始时间不确定，结束时间不确定 肯定：S V/Vs否定：S do/does not V疑问：疑问词 do/does S V 表 现在动作、习惯动作、客观事实、电视评论报道 一般现在时表将来，主句为将来时态或者表示将来意思，时间&#x2F;条件状语从句用一般现在时表将来 名词复数，无冠词 -&gt; 泛指一类事物 现在进行am/is/are (not) V-ing 正在进行中，开始在现在之前，结束在现在之后 跟 always &#x2F; constantly &#x2F; forever &#x2F; repeatedly 等频度词连用，表示抱怨。My girlfriend is always complaining about ours house.（我女友总是抱怨我们的房子） 现在进行时表将来，表示已经安排好的事情。My dad is taking me to tomorrow class.（我爸明天要带我去上课 现在完成have/has (not) V-ed 过去开始，现在已经结束 也可以表示动作发生在过去，动作一直延续到现在。（和一些时态是重叠的）可以和 before &#x2F; since &#x2F; for &#x2F; already &#x2F; many times &#x2F; yet 连用I have driven a car since 2009. （我从2009年开始开车 现在完成进行have/has been (not) V-ing 过去到现在，未完成全部（仍要继续） I have been working for seven days without a rest.（我已经七天没休息了） 过去一般过去时动词过去式 肯定：S 过去式否定：S did not V疑问：疑问词 did S V 过去进行was/were (not) V-ing 过去完成had (not) V-ed 过去的过去 过去完成进行had been (not) V-ing 将来动词没有直接变成将来时的形态 一般现在时表达将来： The bus leaves at 8PM. be变位+going+to+动词原形： I am going to eat a carrot. 上句going省略，be变位+to+动词原形： You are to eat a carrot.（有命令意味） about取代going，be变位+about+to+动词原形： I am about to eat a carrot. 一般将来will (not) V 在过去的语法中,语法学家说shall用于第一人称,will只用于第二、第三人称。现在，尤其是在口语中,will也常用于第一人称。 知乎文章：shall和will用法区别小结 描述将来某个时间点发生的动作（主观肯定） 将来进行will be (not) V-ing 将来完成will have (not) V-ed 将来完成进行will have (not) been V-ing 过去将来将来时中的shall，对应的是should 一般过去将来would (not) V would: will的过去式 虚拟语气，表达与事实相反 过去将来进行would be (not) V-ing 过去将来完成would hava (not) V-ed 过去将来完成进行would have been (not) V-ing","categories":[{"name":"English","slug":"English","permalink":"https://rchangl.github.io/categories/English/"}],"tags":[]},{"title":"概览 - 英语语法","slug":"English/概览","date":"2023-06-16T02:55:33.476Z","updated":"2022-10-09T13:46:42.131Z","comments":true,"path":"page/English/概览.html","link":"","permalink":"https://rchangl.github.io/page/English/%E6%A6%82%E8%A7%88.html","excerpt":"","text":"基本句型 主语 + 不及物动词 主语 + 单及物动词 + 宾语 主语 + 双及物动词 + 间接宾语 + 直接宾语 主语 + 复杂及物动词 + 宾语 + （宾语）补语 主语 + 系动词 + （主语）补语&#x2F;表语 句子成分 主语 谓语动词 宾语 宾语补语 主语补语 定语 状语 同位语 句子 简单句 复合句&#x2F;并列句 复杂句 从句名词性： 主语从句 宾语从句 表语从句 同位语从句 宾语补语从句（使用较少） 定语从句 状语从句 形容词从句 &#x3D; 定语才句 &#x3D; 关系从句 词性 动词 名词 冠词 代词 形容词 数词 副词 介词 叹词 连词 时态动词时间 + 动词状态 动词时间 现在 过去 将来 过去将来 动词状态 一般 完成 进行 完成进行（一直进行到完成了。一直进行到现在结束，或者现在还没结束）","categories":[{"name":"English","slug":"English","permalink":"https://rchangl.github.io/categories/English/"}],"tags":[]},{"title":"数字编码","slug":"Game/数字编码","date":"2023-06-16T02:55:33.476Z","updated":"2023-03-29T01:52:35.717Z","comments":true,"path":"page/Game/数字编码.html","link":"","permalink":"https://rchangl.github.io/page/Game/%E6%95%B0%E5%AD%97%E7%BC%96%E7%A0%81.html","excerpt":"","text":"65 礼物 97 酒器 酒气","categories":[{"name":"Game","slug":"Game","permalink":"https://rchangl.github.io/categories/Game/"}],"tags":[]},{"title":"Cheat Engine","slug":"Game/Cheat Engine","date":"2023-06-16T02:55:33.476Z","updated":"2023-01-25T04:41:55.706Z","comments":true,"path":"page/Game/Cheat Engine.html","link":"","permalink":"https://rchangl.github.io/page/Game/Cheat%20Engine.html","excerpt":"","text":"字符数组通配符? * 一个&#x2F;两个 十六进制数 ... 4个 十六进制数 汇编汇编跳转指令: JMP、JECXZ、JA、JB、JG、JL、JE、JZ、JS、JC、JO、JP 等 PUSHAD 汇编语言传送指令之一，与它相关的指令还有PUSHA,POPA&#x2F;POPAD.它们配合使用用于8个16位&#x2F;32位通用寄存器与堆栈之间的数据传送. DEC(DECrement) 减1指令；dec(i,n)，相当于i&#x3D;i-n；dec(i)相当于i&#x3D;i-1 代码注入aobscan(val, AB 12 34)搜索字符数组，并赋值给变量val","categories":[{"name":"Game","slug":"Game","permalink":"https://rchangl.github.io/categories/Game/"}],"tags":[]},{"title":"泰拉瑞亚","slug":"Game/泰拉瑞亚","date":"2023-06-16T02:55:33.476Z","updated":"2023-01-29T04:29:18.366Z","comments":true,"path":"page/Game/泰拉瑞亚.html","link":"","permalink":"https://rchangl.github.io/page/Game/%E6%B3%B0%E6%8B%89%E7%91%9E%E4%BA%9A.html","excerpt":"","text":"PC 版 1.4.4.9 材料锡 铅&#x2F;铁 银 金 铂金 魔矿 、 猩红矿 工具钩爪单钩类抓钩： 抓钩 18.75 紫晶钩 18.75 史莱姆钩 18.75 松鼠钩 19 黄玉钩 20.625 蓝玉钩 22.5 翡翠钩 24.375 糖棒钩 25 红玉钩 26.25 琥珀钩 27.5 钻石钩 29.125 蝙蝠钩 31.25 万圣节事件 10月10日-11月1日 礼袋(1.25%在敌怪中掉落) 困难模式： 失谐钩爪 30 瞬移 史莱姆皇后(33.33%) 饰品信息饰品全球定位系统工匠作坊 金表&#x2F;铂金表 深度计 洞穴蝙蝠、巨型蝙蝠、丛林蝙蝠、孢子蝙蝠、冰雪蝙蝠 1% 蝾螈、巨型卷壳怪、龙虾 1.25% 罗盘 R.E.K.3000工匠作坊 雷达 杀怪计数器 生命体分析机（旅商） 哥布林数据仪工匠作坊 每秒伤害计数器（旅商） 秒表（旅商） 金属探测器（宁芙） 探鱼器工匠作坊 渔民袖珍宝典 天气收音机 六分仪 都是在渔夫那获得 个人数字助手 全球定位系统 R.E.K.3000 哥布林数据仪 探鱼器 手机 个人数字助手 魔镜&#x2F;冰雪镜 （地下&#x2F;洞穴&#x2F;地下雪原 的宝箱） 贝壳电话 手机 魔法海螺（沙漠钓鱼：绿洲匣、幻象匣，沙岩箱） 恶魔海螺（熔岩钓鱼） 移动饰品幽灵靴工匠作坊 沙丘行者靴 火箭靴 闪电靴工匠作坊 优良靴 疾风脚镯（丛林钓鱼、开箱） 携带束头（宝箱，木匣、珍珠木匣） 霜花靴工匠作坊 闪电靴 溜冰靴（雪原钓鱼、开箱） 熔岩靴 黑曜石骷髅头（水、熔岩形成黑曜石） 水上漂靴（海洋箱，海洋钓鱼：海洋匣） 熔岩护身符（金箱，熔岩钓鱼） 黑曜石玫瑰（地狱火焰小鬼掉落） 泰拉闪耀靴工匠作坊 霜花靴 熔岩靴 水陆两用靴工匠作坊 航鱼靴（木匣，珍珠木匣，秘银匣，铁匣） 蛙腿（任意钓鱼） 气球束工匠作坊 云朵气球 气球（天域箱；天空匣、天蓝匣） 云朵瓶（地下、洞穴的金箱） 暴雪气球 暴雪瓶（冰冻箱，冰冻匣、针叶木匣） 沙暴气球 沙暴瓶（金字塔金箱；沙漠钓鱼：绿洲匣、幻象匣；微光：法老面具） 药水回复药水瓶装水水 &#x2F; 水槽 玻璃瓶 弱效治疗药水 蘑菇 凝胶2 玻璃瓶2 恢复50生命 治疗药水 弱效治疗药水2 发光蘑菇 强效治疗药水 瓶装水3 妖精尘3 水晶碎块（地下神圣之地、神圣钓鱼天赐匣50%） 超级治疗药水 强效治疗药水4 星云碎片 日耀碎片 星尘碎片 星旋碎片 增益药水狩猎药水 瓶装水 太阳花 闪耀根 鲨鱼鳍（海洋中的鲨鱼掉落） 水上漂药水 瓶装水 幌菊 鲨鱼鳍 暴怒药水暴击率增加10% 4分钟 瓶装水 血猩食人鱼（血猩地钓鱼） 死亡草 怒气药水伤害增加10% 瓶装水 黑檀锦鲤 死亡草 NPCNPC幸福度最佳方案森林：高尔夫手，动物学家，商人。 地下：爆破专家，酒馆老板，裁缝。 雪地：机械师，哥布林，税收官。 沙漠：蒸汽朋克，​机器​侠，染料商。 丛林：树妖，巫医，画家（油漆工）。 海洋：理发师，渔夫，海盗。 蘑菇地：蘑菇人，向导。 圣地：：巫师，派对女孩，军火商，护士。 注：肉前没有圣地，军火商、护士可以住在沙漠。​​ 入住条件哥布林工匠击败哥布林军队后，在洞穴层出现 哥布林军队触发条件： 白天 在世界出生点附近 已摧毁了至少一颗暗影珠或猩红之心 至少有一名玩家拥有200或更高生命 每天条件达成后，每天有1&#x2F;3概率首次入侵 后续入侵概率，肉前1&#x2F;30，肉后1&#x2F;60 宠物照明宠物肉前暗影珠 65%亮度 暗影珠、腐化匣、污损匣 猩红之心 65%亮度 猩红之心、猩红匣、血匣 魔法灯笼 65%亮度 骷髅商人 肉后仙灵 铃铛+妖精尘25+光明之魂8+视域之魂10 秘银砧&#x2F;山铜砧 闪烁灯笼 食人魔 妖灵 装甲骷髅 可疑眼球 月亮领主 仅限大师模式杰克南瓜灯 80% 南瓜王 玩具石巨人 80% 石巨人 仙灵公主 120% 光之女皇 修饰语1 大2 巨大3 危险4 凶残5 锋利6 尖锐7 微小8 可怕9 小10 钝11 倒霉12 笨重13 可耻14 重15 轻16 精准17 迅速18 急速19 恐怖20 致命 (远程武器)21 可靠22 可畏23 无力24 粗笨25 强大26 神秘27 精巧28 精湛29 笨拙30 无知31 错乱32 威猛33 禁忌34 天界35 狂怒36 锐利37 高端38 强力39 碎裂40 破损41 粗劣42 迅捷43 致命44 灵活45 灵巧46 残暴47 缓慢48 迟钝49 呆滞50 惹恼51 凶险52 狂躁53 致伤54 强劲55 粗鲁56 虚弱57 无情58 暴怒59 神级60 恶魔61 狂热62 坚硬63 守护64 装甲65 护佑66 奥秘67 精确68 幸运69 锯齿70 尖刺71 愤怒72 险恶73 轻快74 快速75 急速76 迅捷77 狂野78 鲁莽79 勇猛80 暴力81 传奇82 虚幻83 神话84 传奇 (泰拉悠悠球变体) 15 轻 工具 (诸如镐、斧头、或锤)57 无情 所有其他召唤武器59 神级 不是从头顶挥过去的近战武器，短剑和泰拉悠悠球除外)60 恶魔 没有击退的远程和魔法武器81 传奇 鞭和所有其他近战武器82 虚幻 所有其他远程武器83 神话 所有其他魔法武器 配饰 65 护佑 防御+466 奥秘 魔力+2068 幸运 暴击率+4%72 险恶 伤害+4%42 迅捷 移动速度+4%80 暴力 近战速度+4% ​","categories":[{"name":"Game","slug":"Game","permalink":"https://rchangl.github.io/categories/Game/"}],"tags":[]},{"title":"Tenses","slug":"English/Tenses","date":"2023-06-16T02:55:33.460Z","updated":"2023-04-04T11:34:12.277Z","comments":true,"path":"page/English/Tenses.html","link":"","permalink":"https://rchangl.github.io/page/English/Tenses.html","excerpt":"","text":"过去的一段时间auxiliary verb hava - subject I you we they auxiliary verb has - subject he she it (have has) just (verb) duration 持续时间 时长since (specific time) for (duration) when while as在……时 单词when、while、as的区别及各自用法详解 - 知乎 http://www.gaosan.com/gaokao/270820.html","categories":[{"name":"English","slug":"English","permalink":"https://rchangl.github.io/categories/English/"}],"tags":[]},{"title":"从句 - 英语语法","slug":"English/从句","date":"2023-06-16T02:55:33.460Z","updated":"2023-06-30T11:19:19.403Z","comments":true,"path":"page/English/从句.html","link":"","permalink":"https://rchangl.github.io/page/English/%E4%BB%8E%E5%8F%A5.html","excerpt":"","text":"定语从句 形容词从句 关系从句 relative clause关系代词that vs. which that 唯一、无法选择 whitch 多选一 关系副词where why when 关系副词转代词： at which , for which , on which 关系副词相当于 &#x3D; 借词 + 关系代词 非限定性定语从句which 关系词不再限定意思，仅为代词功能，且可能指代的是整件事而不是单个词了 通常逗号分隔，作为插入语 My head, which is big, is useful when it rains. 先行词 antecedentrelative clause 所修饰的名词 which非人的物品整个句子（完整的句子） whose某人的 sb’s某物的 sth’s that when时间副词（状语）（不完整句子） where地点副词（状语）（不完整句子） why原因 reason why … 主语从句在疑问句中：疑问代（副）词 引导词：连接代（副)词 引导词 + 句子 that 确定信息 whether 是否where 哪里when 什么时候how 怎样who 谁what 什么 形式主语It 替代主语从句，原主语从句放到了句子后面 宾语从句类似主语从句 that 可以省略","categories":[{"name":"English","slug":"English","permalink":"https://rchangl.github.io/categories/English/"}],"tags":[]},{"title":"Win10 笔记本禁用自带键盘（只使用外置键盘）","slug":"Computer Use/Windows/Win10 笔记本禁用自带键盘（只使用外置键盘）","date":"2023-06-16T02:55:33.460Z","updated":"2022-10-01T04:37:19.295Z","comments":true,"path":"page/Computer Use/Windows/Win10 笔记本禁用自带键盘（只使用外置键盘）.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/Windows/Win10%20%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%A6%81%E7%94%A8%E8%87%AA%E5%B8%A6%E9%94%AE%E7%9B%98%EF%BC%88%E5%8F%AA%E4%BD%BF%E7%94%A8%E5%A4%96%E7%BD%AE%E9%94%AE%E7%9B%98%EF%BC%89.html","excerpt":"","text":"Win10 下如何禁用笔记本自带键盘？ - 知乎 cmd，以管理员身份运行 输入： sc config i8042prt start= disabled 重启 笔记本自带键盘关闭如果想恢复，只要外置键盘以同样方法输入下面这个代码，重启即可 sc config i8042prt start= auto","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"},{"name":"Windows","slug":"Computer-Use/Windows","permalink":"https://rchangl.github.io/categories/Computer-Use/Windows/"}],"tags":[]},{"title":"Windows cmd 命令.md","slug":"Computer Use/Windows/Windows cmd 命令","date":"2023-06-16T02:55:33.460Z","updated":"2022-10-02T05:47:29.842Z","comments":true,"path":"page/Computer Use/Windows/Windows cmd 命令.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/Windows/Windows%20cmd%20%E5%91%BD%E4%BB%A4.html","excerpt":"","text":"netsh wlan show profiles 查看电脑上连接过的WIFI名称 netsh wlan show profiles &quot;WIFI名称&quot; key=clear 查看WIFI的具体信息","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"},{"name":"Windows","slug":"Computer-Use/Windows","permalink":"https://rchangl.github.io/categories/Computer-Use/Windows/"}],"tags":[]},{"title":"关闭Alt+Tab组合键切换Edge浏览器多窗口","slug":"Computer Use/Windows/关闭Alt+Tab组合键切换Edge浏览器多窗口","date":"2023-06-16T02:55:33.460Z","updated":"2023-03-02T16:45:12.387Z","comments":true,"path":"page/Computer Use/Windows/关闭Alt+Tab组合键切换Edge浏览器多窗口.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/Windows/%E5%85%B3%E9%97%ADAlt+Tab%E7%BB%84%E5%90%88%E9%94%AE%E5%88%87%E6%8D%A2Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E7%AA%97%E5%8F%A3.html","excerpt":"","text":"Windows 10 的： 设置 -&gt; 系统 -&gt; 多任务处理 alt + tab 改为 仅打开的窗口","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"},{"name":"Windows","slug":"Computer-Use/Windows","permalink":"https://rchangl.github.io/categories/Computer-Use/Windows/"}],"tags":[]},{"title":"VSCode 变量 Variables Reference","slug":"Computer Use/Hexo blog/VSCode 变量 Variables Reference","date":"2023-06-16T02:55:33.445Z","updated":"2023-03-28T06:12:59.579Z","comments":true,"path":"page/Computer Use/Hexo blog/VSCode 变量 Variables Reference.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/Hexo%20blog/VSCode%20%E5%8F%98%E9%87%8F%20Variables%20Reference.html","excerpt":"","text":"Visual Studio Code Variables Reference 在VSCode的配置文件中可以使用的变量 Variable （在插件设置中不能用） Predefined variables 预定义变量$&#123;userHome&#125; - the path of the user’s home folder$&#123;workspaceFolder&#125; - the path of the folder opened in VS Code$&#123;workspaceFolderBasename&#125; - the name of the folder opened in VS Code without any slashes (&#x2F;)$&#123;file&#125; - the current opened file$&#123;fileWorkspaceFolder&#125; - the current opened file’s workspace folder$&#123;relativeFile&#125; - the current opened file relative to workspaceFolder$&#123;relativeFileDirname&#125; - the current opened file’s dirname relative to workspaceFolder$&#123;fileBasename&#125; - the current opened file’s basename$&#123;fileBasenameNoExtension&#125; - the current opened file’s basename with no file extension$&#123;fileExtname&#125; - the current opened file’s extension$&#123;fileDirname&#125; - the current opened file’s folder path$&#123;fileDirnameBasename&#125; - the current opened file’s folder name$&#123;cwd&#125; - the task runner’s current working directory upon the startup of VS Code$&#123;lineNumber&#125; - the current selected line number in the active file$&#123;selectedText&#125; - the current selected text in the active file$&#123;execPath&#125; - the path to the running VS Code executable$&#123;defaultBuildTask&#125; - the name of the default build task$&#123;pathSeparator&#125; - the character used by the operating system to separate components in file paths","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"},{"name":"Hexo blog","slug":"Computer-Use/Hexo-blog","permalink":"https://rchangl.github.io/categories/Computer-Use/Hexo-blog/"}],"tags":[]},{"title":"VSCode Markdown中快速粘贴图片","slug":"Computer Use/Hexo blog/VSCode Markdown中快速粘贴图片","date":"2023-06-16T02:55:33.445Z","updated":"2023-09-27T09:34:00.555Z","comments":true,"path":"page/Computer Use/Hexo blog/VSCode Markdown中快速粘贴图片.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/Hexo%20blog/VSCode%20Markdown%E4%B8%AD%E5%BF%AB%E9%80%9F%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%87.html","excerpt":"","text":"新版VSCode在新版VSCode中已经支持直接粘贴图片到Markdown文档中了，可以不需要插件，目前版本（1.81.1）相比插件还少了一点功能，无法以时间戳配置文件名，使用直接 ctrl+v 粘贴即可。 默认在与当前Markdown同文件夹下保存粘贴的图片，如果需要修改位置，需要进行设置： markdown.copyFiles.destination 设置 Key **/*Value $&#123;documentBaseName&#125;/ 之后图片会自动保存在当前目录下的，与当前文件同名的，文件夹下 参考： How can I paste images into my markdown files in VS Code? - Stack Overflow 安装 Paste Image 插件直接在 VSCode 搜索 Paste Image 安装即可 快捷键：Ctrl+Alt+V 插件链接 示例：用Windows10自带的截图工具截图，剪切版里已经存在了图片 在Markdown文档中按下快捷键 Ctrl+Alt+V 粘贴图片 会在当前目录生成一个图片文件并在Markdown中引用 更改默认图片存放位置默认存放在和文档同一文件夹下的，这样文件都堆在一起比较凌乱，不方便管理，我们把图片统一放到_assets文件夹里 进入插件设置 更改设置 pasteImage.path 这样就存放在_assets文件夹里了，需要更自定义的存放方式，看插件的介绍文档","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"},{"name":"Hexo blog","slug":"Computer-Use/Hexo-blog","permalink":"https://rchangl.github.io/categories/Computer-Use/Hexo-blog/"}],"tags":[]},{"title":"curl - Linux command","slug":"Computer Use/Linux/命令/curl","date":"2023-06-16T02:55:33.445Z","updated":"2023-03-10T05:28:18.144Z","comments":true,"path":"page/Computer Use/Linux/命令/curl.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/Linux/%E5%91%BD%E4%BB%A4/curl.html","excerpt":"","text":"向 Web Server 发出请求 没有参数，GET请求 L 跟随重定向，默认不跟随 s 不输出错误和进度信息","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"},{"name":"Linux","slug":"Computer-Use/Linux","permalink":"https://rchangl.github.io/categories/Computer-Use/Linux/"},{"name":"命令","slug":"Computer-Use/Linux/命令","permalink":"https://rchangl.github.io/categories/Computer-Use/Linux/%E5%91%BD%E4%BB%A4/"}],"tags":[]},{"title":"Linux 基本命令 - Ubuntu / Xubuntu","slug":"Computer Use/Linux/命令/基本命令","date":"2023-06-16T02:55:33.445Z","updated":"2023-03-15T04:31:29.052Z","comments":true,"path":"page/Computer Use/Linux/命令/基本命令.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/Linux/%E5%91%BD%E4%BB%A4/%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4.html","excerpt":"","text":"基本命令| 管道符 第一个命令的输出，作为第二个命令的输入 bash: sh的扩展 sh: UNIX标准Shell Shell: 脚本 bash a.sh./ a.sh 软件管理安装软件前sudo apt-get update &#x2F;&#x2F;更新软件列表sudo apt-get upgrade &#x2F;&#x2F;更新软件包 安装软件dpkg： dpkg --get-selections |grep 名字 apt: sudo apt-get purge 每一个包名字 本地deb文件： sudo dpkg -i filename 卸载sudo apt remove program_name 修复依赖关系sudo apt-get -f install &#x2F;&#x2F;修复依赖关系 查看某个软件是否安装需要结合grep过滤搜索一下即可 dpkg -l | grep 软件包名 大陆地区ubuntu使用snap下载速度过慢问题sudo snap install snap-store-proxysudo snap install snap-store-proxy-client 查看ip地址ifconfig -a ip addr 目录、文件操作cp 文件 目录 &#x2F;&#x2F; 复制 mv 文件 目录 &#x2F;&#x2F; 移动 命令行&#x2F;控制台 复制粘贴复制命令：Ctrl + Insert 组合键 或 用鼠标选中即是复制 粘贴命令：Shift + Insert 组合键 或 单击鼠标滚轮即为粘贴。 VMware安装VMware Tools sudo apt install open-vm-tools-desktop 重启","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"},{"name":"Linux","slug":"Computer-Use/Linux","permalink":"https://rchangl.github.io/categories/Computer-Use/Linux/"},{"name":"命令","slug":"Computer-Use/Linux/命令","permalink":"https://rchangl.github.io/categories/Computer-Use/Linux/%E5%91%BD%E4%BB%A4/"}],"tags":[]},{"title":"什么是RSS？如何使用他？","slug":"Computer Use/什么是RSS？如何使用他？","date":"2023-06-16T02:55:33.429Z","updated":"2023-03-05T08:06:21.764Z","comments":true,"path":"page/Computer Use/什么是RSS？如何使用他？.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/%E4%BB%80%E4%B9%88%E6%98%AFRSS%EF%BC%9F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E4%BB%96%EF%BC%9F.html","excerpt":"","text":"RSS 的全称有三种说法： RDF Site Summary（资源描述框架站点摘要） Rich Site Summary（网站内容摘要） Really Simple Syndication（简易资讯聚合） 可以简单理解为：RSS 能让你在一个地方订阅各种感兴趣网站的工具 可惜的是，因为不可抗拒的原因，很多 RSS 服务在国内都被正常访问了，真是件麻烦事。 RSS 如何使用呢，很简单，只需要两样东西：RSS源+RSS阅读器 RSS 源就是一串链接，一些网站会提供链接，复制下来，在RSS阅读器中添加就完成了。 参考： 知道RSS的人越少，我就越希望它能被人知道！ - 知乎","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"}],"tags":[]},{"title":"电脑测试","slug":"Computer Use/电脑测试","date":"2023-06-16T02:55:33.429Z","updated":"2023-05-19T01:44:40.238Z","comments":true,"path":"page/Computer Use/电脑测试.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/%E7%94%B5%E8%84%91%E6%B5%8B%E8%AF%95.html","excerpt":"","text":"CPU 指令测试","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"}],"tags":[]},{"title":"Hexo 的 Wikitten 主题 - 适用于个人知识管理的主题","slug":"Computer Use/Hexo blog/Hexo 的 Wikitten 主题","date":"2023-06-16T02:55:33.429Z","updated":"2022-08-15T04:36:49.517Z","comments":true,"path":"page/Computer Use/Hexo blog/Hexo 的 Wikitten 主题.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/Hexo%20blog/Hexo%20%E7%9A%84%20Wikitten%20%E4%B8%BB%E9%A2%98.html","excerpt":"","text":"Wikitten 中文文档 这个主题像百科一样，可以分类，页面简洁，适合整理自己的个人知识。 主题的配置文件可以开关一些功能，比如用于统计的不蒜子插件，有很多bug，使用体验极差，默认打开的，直接关了。","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"},{"name":"Hexo blog","slug":"Computer-Use/Hexo-blog","permalink":"https://rchangl.github.io/categories/Computer-Use/Hexo-blog/"}],"tags":[]},{"title":"Hexo 文章置顶的方法","slug":"Computer Use/Hexo blog/Hexo文章置顶的方法","date":"2023-06-16T02:55:33.429Z","updated":"2022-08-15T14:01:58.541Z","comments":true,"path":"page/Computer Use/Hexo blog/Hexo文章置顶的方法.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/Hexo%20blog/Hexo%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6%E7%9A%84%E6%96%B9%E6%B3%95.html","excerpt":"","text":"hexo-generator-index插件，官方默认插件很多时候我们会需要置顶一个文章，但 Hexo 默认没有支持这样的操作。Hexo 默认是用插件hexo-generator-index实现排序功能的，这个插件在我们安装Hexo的时候就默认安装了，只实现了时间倒序排序的方式，并没有实现文章置顶功能。 hexo-generator-index-pin-top插件这个插件实现了置顶和时间倒序排序的功能，可以直接替换掉官方的那个插件 首先卸载系统自带的排序插件： npm uninstall hexo-generator-index 然后添加替代插件： npm install hexo-generator-index-pin-top --save 使用只需要加入 top 属性即可，就像这样： 1234---title: 标题top :10--- 修改源码的方式实现自定义排序如果我们需要更多的 具体参考这篇文章：hexo博客文章置顶功能实现的两种方法","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"},{"name":"Hexo blog","slug":"Computer-Use/Hexo-blog","permalink":"https://rchangl.github.io/categories/Computer-Use/Hexo-blog/"}],"tags":[]},{"title":"Hexo更改链接的形式","slug":"Computer Use/Hexo blog/Hexo更改链接的形式","date":"2023-06-16T02:55:33.429Z","updated":"2022-08-15T04:01:32.130Z","comments":true,"path":"page/Computer Use/Hexo blog/Hexo更改链接的形式.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/Hexo%20blog/Hexo%E6%9B%B4%E6%94%B9%E9%93%BE%E6%8E%A5%E7%9A%84%E5%BD%A2%E5%BC%8F.html","excerpt":"","text":"Hexo 的默认链接是用日期分层级的，这种分类方式可能会比较混乱，Hexo也提供了自定义的链接命名方式。 在配置文件_config.yml中，permalink属性就是决定链接命名形式的，冒号:后面的是变量，默认会有一些变量可以使用，也可以自己写一个变量，在Markdown上方的键值对就是变量。 具体例子和更多的变量看官方文档的这个就行： 永久链接（Permalinks）","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"},{"name":"Hexo blog","slug":"Computer-Use/Hexo-blog","permalink":"https://rchangl.github.io/categories/Computer-Use/Hexo-blog/"}],"tags":[]},{"title":"个人博客攻略（三） - Hexo 主题","slug":"Computer Use/Hexo blog/个人博客攻略（三） - Hexo 主题","date":"2023-06-16T02:55:33.429Z","updated":"2022-08-14T14:50:13.064Z","comments":true,"path":"page/Computer Use/Hexo blog/个人博客攻略（三） - Hexo 主题.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/Hexo%20blog/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%94%BB%E7%95%A5%EF%BC%88%E4%B8%89%EF%BC%89%20-%20Hexo%20%E4%B8%BB%E9%A2%98.html","excerpt":"","text":"主题的安装一般主题的说明文档会有介绍，现在我们来安装一个最流行的主题——NexT NexT的安装文档 下载可以通过 Git 和 npm 安装，我们选用Git： 在博客根目录打开Git命令行，输入命令： git clone https://github.com/next-theme/hexo-theme-next themes/next 这时 themes 文件夹下就多了一个next文件夹 （如果网络不好可以手动去Github用下载器下载） 应用主题打开根目录文件 _config.yml 找到 theme: 字样，改为： theme: next 注意冒号后有空格 现在已可以使用主题了 主题配置文件主题也有一个自己的配置文件，位于 theme/next/_config.yml 我们称之为主题配置文件，里面可以更改一些主题的设置，比如布局是紧凑还是松散的 更新 NexThttps://theme-next.js.org/docs/getting-started/#Upgrading-NexT","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"},{"name":"Hexo blog","slug":"Computer-Use/Hexo-blog","permalink":"https://rchangl.github.io/categories/Computer-Use/Hexo-blog/"}],"tags":[]},{"title":"在Hexo中使用图片","slug":"Computer Use/Hexo blog/在Hexo中使用图片","date":"2023-06-16T02:55:33.429Z","updated":"2023-07-31T03:45:05.228Z","comments":true,"path":"page/Computer Use/Hexo blog/在Hexo中使用图片.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/Hexo%20blog/%E5%9C%A8Hexo%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%9B%BE%E7%89%87.html","excerpt":"","text":"Hexo 默认支持的插入图片方式很差，不太方便 默认的插入图片方式在config.yaml文件中更改一下配置： 1post_asset_folder: true 在Markdown中插入： &#123;% asset_img image.jpg 这是一张图片 %&#125; 不太方便的插入方式 以 Markdown 语法插入 （hexo-asset-img 插件）安装： 1npm install hexo-asset-img --save 12345hexo-typora├── apppicker.jpg├── logo.png└── rules.jpghexo-typora.md Make sure post_asset_folder: true in your _config.yml. hexo-typora.md: Just use ![logo](hexo-typora/logo.png) to insert logo.png. hexo-typora.md: 使用 ![logo](hexo-typora/logo.png) 来插入图片 logo.png 保证 post_asset_folder: true 在配置文件 _config.yml 中仓库 经测试，图片文件夹名不可有空格（即md文件名不可有空格），否则无法正常加载图片。 GitHub: http://github.com/yiyungent/hexo-asset-img Gitee: http://gitee.com/yiyungent/hex","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"},{"name":"Hexo blog","slug":"Computer-Use/Hexo-blog","permalink":"https://rchangl.github.io/categories/Computer-Use/Hexo-blog/"}],"tags":[]},{"title":"个人博客攻略（二） - 开始写博客","slug":"Computer Use/Hexo blog/个人博客攻略（二） - 开始写博客","date":"2023-06-16T02:55:33.429Z","updated":"2022-08-14T14:50:07.001Z","comments":true,"path":"page/Computer Use/Hexo blog/个人博客攻略（二） - 开始写博客.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/Hexo%20blog/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%94%BB%E7%95%A5%EF%BC%88%E4%BA%8C%EF%BC%89%20-%20%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2.html","excerpt":"","text":"博客已经搭建好了，我们可以开始写博客了！ 在博客当中添加文章，思路是在本地写好内容，再用 Git 同步至 Github 仓库上 在本地博客中添加文章博客根目录中有很多文件和文件夹，现在我们只关注一个文件夹 source 里面存放的就是我们的个人文件，所有的个人文件都在里面。 source 文件夹下面还有一个 _posts 文件夹，这个文件夹里存放的就是我们的博客文件。我们刚建立博客之后，会有一个 Hello World 页面，他就是由这个文件夹里的 hello-world.md 文件生成的。 Markdown.md 文件就是 Markdown 文件，我们的博客内容就写在 Markdown 文件里，再由 Hexo 生成网页文件。 Markdown 文件的编写非常的简单，知乎、简书等很多平台都支持直接使用 Markdown 编辑，在搜索引擎中搜索 Markdown 教程，对着敲两下就能学会；在Bilibili上搜 Markdown ，视频教程也不过几分钟而已。 这里的 Markdown 换行会直接解析为换行，而不是像其他的 Markdown 解析器一样需要多空一行才能换行。 添加博客要添加我们自己的博客文件，只需要在 _posts 文件夹里写好 Markdown 文件。 可以在Git命令行中输入 hexo n &quot;博客名&quot; ，这个命令会在 _posts 生成 博客名.md 文件，文件的开头自带了一些不是 Markdown 的东西，这些东西叫做 Front-matter 可以指定网页的标题之类的。 当然也可以直接在 _posts 文件夹手动新建一个 .md 文件，同样可以作为博客文件 插入图片在 _config.yml 开启资源文件夹： post_asset_folder: true 这样，在 _posts 目录下会生成一个与文章同名的文件夹。把需要插入到文章中的图片放到该文件夹中，并在写文章时通过如下标签引用即可。 &#123;% asset_img [图片标题] %&#125; Front-matterFront-matter 是在博客 Markdown 文件的开头，以 --- 来划分的部分，用 YAML 来编写，YAML 是用来写配置文件的语言，不用专门去学，照着样子自己写就可以了，就像下面这样： 12345678910---title: 这是标题date: 2022-07-14 21:18:17tags: - markdown - blogcategories: - tutorial - markdown--- 顾名思义，title是标题，date是日期，tag是标签，categories是分类 不需要的部分就不写 分类具有层级结构，像文件夹一样可以有包含关系；而标签没有，是扁平化的结构 将写好的 Markdown 文件生成博客并发表到 Github写完博客内容的 Markdown 文件后，更新到 Github 进入 Git 命令行，然后输入命令： hexo cl 用于清除缓存文件（db.json）和已生成的静态文件（public） hexo g 生成网页文件 hexo d 同步至Github （也可以使用hexo s 先在本地运行查看效果） _config.yml 配置文件博客根目录的 _config.yml 配置文件 可以配置一些博客的信息 title: 的博客 整个博客的名字 author: RC 作者名字 language: zh-CN 语言设置 首页仅显示文章摘录而不是全文现在我们博客的首页文章是全文展开的，这非常不利于我们阅读，我们希望的是像大多数论坛一样的，只显示一部分内容，点击文章再查看全文的。 网上可以查询到在 NexT 主题中可以使用 auto_excerpt 来实现，但是在NexT新版本中以及取消了，有些网站还是没更新这一说明 我们可以使用插件：hexo-excerpt 安装 hexo-excerpt ,Git命令行中输入命令安装即可： $ npm install hexo-excerpt --save 在博客根目录配置文件中可以设置显示内容的多少： 12excerpt: depth: 10","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"},{"name":"Hexo blog","slug":"Computer-Use/Hexo-blog","permalink":"https://rchangl.github.io/categories/Computer-Use/Hexo-blog/"}],"tags":[]},{"title":"floccus - 多平台同步书签插件","slug":"Computer Use/floccus - 多平台同步书签插件","date":"2023-06-16T02:55:33.414Z","updated":"2023-03-28T05:04:17.522Z","comments":true,"path":"page/Computer Use/floccus - 多平台同步书签插件.html","link":"","permalink":"https://rchangl.github.io/page/Computer%20Use/floccus%20-%20%E5%A4%9A%E5%B9%B3%E5%8F%B0%E5%90%8C%E6%AD%A5%E4%B9%A6%E7%AD%BE%E6%8F%92%E4%BB%B6.html","excerpt":"","text":"创建账户配置WebDAV、用户名、密码: 坚果云DAV提供的 Bookmarks file path: floccus/bookmarks.xbel 文件夹映射(Local folder)：选择需要同步的书签文件夹，直接选书签栏 嵌套帐户(Nested accounts) ：选 从其他帐户同步中排除此帐户的本地文件夹 No, ignore","categories":[{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"}],"tags":[]}],"categories":[{"name":"Devolop","slug":"Devolop","permalink":"https://rchangl.github.io/categories/Devolop/"},{"name":"后端","slug":"Devolop/后端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/"},{"name":"Spring Boot","slug":"Devolop/后端/Spring-Boot","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/"},{"name":"Java Web","slug":"Devolop/后端/Java-Web","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/"},{"name":"Math_and_Algo_数学和算法","slug":"Devolop/Math-and-Algo-数学和算法","permalink":"https://rchangl.github.io/categories/Devolop/Math-and-Algo-%E6%95%B0%E5%AD%A6%E5%92%8C%E7%AE%97%E6%B3%95/"},{"name":"Language","slug":"Devolop/Language","permalink":"https://rchangl.github.io/categories/Devolop/Language/"},{"name":"Java SE","slug":"Devolop/Language/Java-SE","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/"},{"name":"内置类","slug":"Devolop/Language/Java-SE/内置类","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/%E5%86%85%E7%BD%AE%E7%B1%BB/"},{"name":"小工具","slug":"Devolop/小工具","permalink":"https://rchangl.github.io/categories/Devolop/%E5%B0%8F%E5%B7%A5%E5%85%B7/"},{"name":"Secondary","slug":"Devolop/Secondary","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/"},{"name":"Python","slug":"Devolop/Secondary/Python","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Python/"},{"name":"Base and Grammer","slug":"Devolop/Language/Java-SE/Base-and-Grammer","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/"},{"name":"Main","slug":"Devolop/Main","permalink":"https://rchangl.github.io/categories/Devolop/Main/"},{"name":"Rust","slug":"Devolop/Main/Rust","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/"},{"name":"基本语法","slug":"Devolop/Main/Rust/基本语法","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"name":"模式匹配","slug":"Devolop/Main/Rust/基本语法/模式匹配","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"},{"name":"测试","slug":"Devolop/Main/Rust/测试","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E6%B5%8B%E8%AF%95/"},{"name":"Slint","slug":"Devolop/Main/Rust/Slint","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/Slint/"},{"name":"Linux和项目环境","slug":"Devolop/Main/Linux和项目环境","permalink":"https://rchangl.github.io/categories/Devolop/Main/Linux%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/"},{"name":"MySQL","slug":"Devolop/后端/MySQL","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/"},{"name":"Computer Use","slug":"Computer-Use","permalink":"https://rchangl.github.io/categories/Computer-Use/"},{"name":"Java9-11的新特性","slug":"Devolop/Language/Java-SE/Java9-11的新特性","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Java9-11%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/"},{"name":"项目配置管理","slug":"Devolop/Main/Rust/项目配置管理","permalink":"https://rchangl.github.io/categories/Devolop/Main/Rust/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"},{"name":"测试维护","slug":"Devolop/Language/Java-SE/测试维护","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/%E6%B5%8B%E8%AF%95%E7%BB%B4%E6%8A%A4/"},{"name":"项目开发","slug":"Devolop/Main/项目开发","permalink":"https://rchangl.github.io/categories/Devolop/Main/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"},{"name":"三层架构","slug":"Devolop/后端/Spring-Boot/三层架构","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"},{"name":"考试","slug":"考试","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/"},{"name":"劳动","slug":"劳动","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/"},{"name":"劳动与法律","slug":"劳动/劳动与法律","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/%E5%8A%B3%E5%8A%A8%E4%B8%8E%E6%B3%95%E5%BE%8B/"},{"name":"Other_library_其它库","slug":"Devolop/Language/Java-SE/Other-library-其它库","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Other-library-%E5%85%B6%E5%AE%83%E5%BA%93/"},{"name":"Phyloshophy","slug":"Phyloshophy","permalink":"https://rchangl.github.io/categories/Phyloshophy/"},{"name":"SQL","slug":"Devolop/后端/MySQL/SQL","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/SQL/"},{"name":"Linux","slug":"Computer-Use/Linux","permalink":"https://rchangl.github.io/categories/Computer-Use/Linux/"},{"name":"命令","slug":"Computer-Use/Linux/命令","permalink":"https://rchangl.github.io/categories/Computer-Use/Linux/%E5%91%BD%E4%BB%A4/"},{"name":"English","slug":"English","permalink":"https://rchangl.github.io/categories/English/"},{"name":"从句","slug":"English/从句","permalink":"https://rchangl.github.io/categories/English/%E4%BB%8E%E5%8F%A5/"},{"name":"环境配置和命令行命令","slug":"Devolop/后端/MySQL/环境配置和命令行命令","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/MySQL/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%91%BD%E4%BB%A4/"},{"name":"音乐","slug":"音乐","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/"},{"name":"歌词","slug":"音乐/歌词","permalink":"https://rchangl.github.io/categories/%E9%9F%B3%E4%B9%90/%E6%AD%8C%E8%AF%8D/"},{"name":"Windows","slug":"Computer-Use/Windows","permalink":"https://rchangl.github.io/categories/Computer-Use/Windows/"},{"name":"Android","slug":"Devolop/Secondary/Android","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Android/"},{"name":"控件样式","slug":"Devolop/Secondary/Android/控件样式","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Android/%E6%8E%A7%E4%BB%B6%E6%A0%B7%E5%BC%8F/"},{"name":"界面","slug":"Devolop/Secondary/Android/界面","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Android/%E7%95%8C%E9%9D%A2/"},{"name":"Game","slug":"Game","permalink":"https://rchangl.github.io/categories/Game/"},{"name":"吃的","slug":"劳动/吃的","permalink":"https://rchangl.github.io/categories/%E5%8A%B3%E5%8A%A8/%E5%90%83%E7%9A%84/"},{"name":"Hexo blog","slug":"Computer-Use/Hexo-blog","permalink":"https://rchangl.github.io/categories/Computer-Use/Hexo-blog/"},{"name":"软考","slug":"考试/软考","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/%E8%BD%AF%E8%80%83/"},{"name":"23年上期末","slug":"考试/23年上期末","permalink":"https://rchangl.github.io/categories/%E8%80%83%E8%AF%95/23%E5%B9%B4%E4%B8%8A%E6%9C%9F%E6%9C%AB/"},{"name":"Tools","slug":"Tools","permalink":"https://rchangl.github.io/categories/Tools/"},{"name":"T","slug":"T","permalink":"https://rchangl.github.io/categories/T/"},{"name":"C","slug":"Devolop/Secondary/C","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/C/"},{"name":"Nework","slug":"Devolop/Secondary/Nework","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Nework/"},{"name":"HTTP","slug":"Devolop/Secondary/Nework/HTTP","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Nework/HTTP/"},{"name":"前端","slug":"Devolop/前端","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/"},{"name":"环境配置","slug":"Devolop/环境配置","permalink":"https://rchangl.github.io/categories/Devolop/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"name":"信息安全","slug":"Devolop/Secondary/信息安全","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"},{"name":"Vue","slug":"Devolop/Secondary/Vue","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/"},{"name":"组件","slug":"Devolop/Secondary/Vue/组件","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/%E7%BB%84%E4%BB%B6/"},{"name":"Bascal","slug":"Devolop/Secondary/Vue/Bascal","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/Bascal/"},{"name":"0开始之前","slug":"Devolop/Secondary/Vue/0开始之前","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/Vue/0%E5%BC%80%E5%A7%8B%E4%B9%8B%E5%89%8D/"},{"name":"PHP","slug":"Devolop/Secondary/PHP","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/PHP/"},{"name":"nodejs","slug":"Devolop/Main/nodejs","permalink":"https://rchangl.github.io/categories/Devolop/Main/nodejs/"},{"name":"JavaScript","slug":"Devolop/前端/JavaScript","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"DOM","slug":"Devolop/前端/JavaScript/DOM","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/DOM/"},{"name":"异步","slug":"Devolop/前端/JavaScript/异步","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/%E5%BC%82%E6%AD%A5/"},{"name":"BOM","slug":"Devolop/前端/JavaScript/BOM","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/BOM/"},{"name":"Basic Use","slug":"Devolop/前端/JavaScript/Basic-Use","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic-Use/"},{"name":"Basic","slug":"Devolop/前端/JavaScript/Basic","permalink":"https://rchangl.github.io/categories/Devolop/%E5%89%8D%E7%AB%AF/JavaScript/Basic/"},{"name":"Java","slug":"Devolop/Main/Java","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/"},{"name":"JavaFX","slug":"Devolop/Main/Java/JavaFX","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/JavaFX/"},{"name":"Controller","slug":"Devolop/后端/Spring-Boot/三层架构/Controller","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Spring-Boot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/Controller/"},{"name":"Servlet","slug":"Devolop/后端/Java-Web/Servlet","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/"},{"name":"请求 响应","slug":"Devolop/后端/Java-Web/Servlet/请求-响应","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/%E8%AF%B7%E6%B1%82-%E5%93%8D%E5%BA%94/"},{"name":"Cookie","slug":"Devolop/后端/Java-Web/Servlet/Cookie","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/Cookie/"},{"name":"会话","slug":"Devolop/后端/Java-Web/Servlet/会话","permalink":"https://rchangl.github.io/categories/Devolop/%E5%90%8E%E7%AB%AF/Java-Web/Servlet/%E4%BC%9A%E8%AF%9D/"},{"name":"集合","slug":"Devolop/Language/Java-SE/Base-and-Grammer/集合","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/%E9%9B%86%E5%90%88/"},{"name":"Java Swing","slug":"Devolop/Main/Java/Java-Swing","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/Java-Swing/"},{"name":"面板","slug":"Devolop/Main/Java/Java-Swing/面板","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/Java-Swing/%E9%9D%A2%E6%9D%BF/"},{"name":"窗口","slug":"Devolop/Main/Java/Java-Swing/窗口","permalink":"https://rchangl.github.io/categories/Devolop/Main/Java/Java-Swing/%E7%AA%97%E5%8F%A3/"},{"name":"网络","slug":"Devolop/Language/Java-SE/网络","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/%E7%BD%91%E7%BB%9C/"},{"name":"报错","slug":"Devolop/Language/Java-SE/Base-and-Grammer/报错","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/%E6%8A%A5%E9%94%99/"},{"name":"JVM","slug":"Devolop/Language/Java-SE/JVM","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/JVM/"},{"name":"IO流","slug":"Devolop/Language/Java-SE/Base-and-Grammer/IO流","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/IO%E6%B5%81/"},{"name":"字符串","slug":"Devolop/Language/Java-SE/Base-and-Grammer/字符串","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"数据类型","slug":"Devolop/Language/Java-SE/Base-and-Grammer/数据类型","permalink":"https://rchangl.github.io/categories/Devolop/Language/Java-SE/Base-and-Grammer/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"name":"Git","slug":"Devolop/Main/Git","permalink":"https://rchangl.github.io/categories/Devolop/Main/Git/"},{"name":"CSS","slug":"Devolop/Secondary/CSS","permalink":"https://rchangl.github.io/categories/Devolop/Secondary/CSS/"}],"tags":[]}